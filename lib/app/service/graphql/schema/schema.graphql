"""Exposes a URL that specifies the behavior of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behavior of this scalar."""
  url: String!
) on SCALAR

type Account {
  id: Int!
  accountNumber: Float
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  userId: String!
  accountCategory: AccountCategory!
  user: UserAbstract!
  transactionOrigins: [Transaction!]
  transactionDestination: [Transaction!]
  project: Project
  bankAccount: Bank
  _count: AccountCount!
}

type AccountAvgAggregate {
  id: Float
  accountNumber: Float
}

input AccountBalanceByCustomPeriodArgs {
  accountId: Int!
  start: DateTime!
  end: DateTime!
  period: Period!
}

type AccountBalanceByCustomPeriodQuery {
  period: String
  totalBalance: Float
}

enum AccountCategory {
  EQUITY
  PROJECT
  COMISSION
  CASH
  PLATFORM
  BANK
  DEBT
}

type AccountCount {
  transactionOrigins: Int!
  transactionDestination: Int!
}

type AccountCountAggregate {
  id: Int!
  accountNumber: Int!
  name: Int!
  createdAt: Int!
  updatedAt: Int!
  userId: Int!
  accountCategory: Int!
  _all: Int!
}

input AccountCreateManyUserInput {
  id: Int
  accountNumber: Float
  name: String!
  createdAt: DateTime
  updatedAt: DateTime
  accountCategory: AccountCategory!
}

input AccountCreateManyUserInputEnvelope {
  data: [AccountCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input AccountCreateNestedManyWithoutUserInput {
  create: [AccountCreateWithoutUserInput!]
  connectOrCreate: [AccountCreateOrConnectWithoutUserInput!]
  createMany: AccountCreateManyUserInputEnvelope
  connect: [AccountWhereUniqueInput!]
}

input AccountCreateNestedOneWithoutProjectInput {
  create: AccountCreateWithoutProjectInput
  connectOrCreate: AccountCreateOrConnectWithoutProjectInput
  connect: AccountWhereUniqueInput
}

input AccountCreateNestedOneWithoutTransactionDestinationInput {
  create: AccountCreateWithoutTransactionDestinationInput
  connectOrCreate: AccountCreateOrConnectWithoutTransactionDestinationInput
  connect: AccountWhereUniqueInput
}

input AccountCreateNestedOneWithoutTransactionOriginsInput {
  create: AccountCreateWithoutTransactionOriginsInput
  connectOrCreate: AccountCreateOrConnectWithoutTransactionOriginsInput
  connect: AccountWhereUniqueInput
}

input AccountCreateOrConnectWithoutProjectInput {
  where: AccountWhereUniqueInput!
  create: AccountCreateWithoutProjectInput!
}

input AccountCreateOrConnectWithoutTransactionDestinationInput {
  where: AccountWhereUniqueInput!
  create: AccountCreateWithoutTransactionDestinationInput!
}

input AccountCreateOrConnectWithoutTransactionOriginsInput {
  where: AccountWhereUniqueInput!
  create: AccountCreateWithoutTransactionOriginsInput!
}

input AccountCreateOrConnectWithoutUserInput {
  where: AccountWhereUniqueInput!
  create: AccountCreateWithoutUserInput!
}

input AccountCreateWithoutProjectInput {
  accountNumber: Float
  name: String!
  createdAt: DateTime
  updatedAt: DateTime
  accountCategory: AccountCategory!
  user: UserCreateNestedOneWithoutAccountsInput!
  transactionOrigins: TransactionCreateNestedManyWithoutFromAccountInput
  transactionDestination: TransactionCreateNestedManyWithoutToAccountInput
  bankAccount: BankCreateNestedOneWithoutAccountInput
}

input AccountCreateWithoutTransactionDestinationInput {
  accountNumber: Float
  name: String!
  createdAt: DateTime
  updatedAt: DateTime
  accountCategory: AccountCategory!
  user: UserCreateNestedOneWithoutAccountsInput!
  transactionOrigins: TransactionCreateNestedManyWithoutFromAccountInput
  project: ProjectCreateNestedOneWithoutAccountInput
  bankAccount: BankCreateNestedOneWithoutAccountInput
}

input AccountCreateWithoutTransactionOriginsInput {
  accountNumber: Float
  name: String!
  createdAt: DateTime
  updatedAt: DateTime
  accountCategory: AccountCategory!
  user: UserCreateNestedOneWithoutAccountsInput!
  transactionDestination: TransactionCreateNestedManyWithoutToAccountInput
  project: ProjectCreateNestedOneWithoutAccountInput
  bankAccount: BankCreateNestedOneWithoutAccountInput
}

input AccountCreateWithoutUserInput {
  accountNumber: Float
  name: String!
  createdAt: DateTime
  updatedAt: DateTime
  accountCategory: AccountCategory!
  transactionOrigins: TransactionCreateNestedManyWithoutFromAccountInput
  transactionDestination: TransactionCreateNestedManyWithoutToAccountInput
  project: ProjectCreateNestedOneWithoutAccountInput
  bankAccount: BankCreateNestedOneWithoutAccountInput
}

input AccountFindFirstArgs {
  where: AccountWhereInput
  orderBy: [AccountOrderByWithRelationInput!]
  cursor: AccountWhereUniqueInput
  take: Int
  skip: Int
  distinct: [AccountScalarFieldEnum!]
}

input AccountFindManyArgs {
  where: AccountWhereInput
  orderBy: [AccountOrderByWithRelationInput!]
  take: Int
  skip: Int
  distinct: [AccountScalarFieldEnum!]
}

input AccountFindUniqueArgs {
  where: AccountWhereUniqueInput!
}

input AccountListRelationFilter {
  every: AccountWhereInput
  some: AccountWhereInput
  none: AccountWhereInput
}

type AccountMaxAggregate {
  id: Int
  accountNumber: Float
  name: String
  createdAt: DateTime
  updatedAt: DateTime
  userId: String
  accountCategory: AccountCategory
}

type AccountMinAggregate {
  id: Int
  accountNumber: Float
  name: String
  createdAt: DateTime
  updatedAt: DateTime
  userId: String
  accountCategory: AccountCategory
}

input AccountOrderByRelationAggregateInput {
  _count: SortOrder
}

input AccountOrderByWithRelationInput {
  id: SortOrder
  accountNumber: SortOrderInput
  name: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
  accountCategory: SortOrder
  user: UserOrderByWithRelationInput
  transactionOrigins: TransactionOrderByRelationAggregateInput
  transactionDestination: TransactionOrderByRelationAggregateInput
  project: ProjectOrderByWithRelationInput
  bankAccount: BankOrderByWithRelationInput
}

input AccountRelationFilter {
  is: AccountWhereInput
  isNot: AccountWhereInput
}

enum AccountScalarFieldEnum {
  id
  accountNumber
  name
  createdAt
  updatedAt
  userId
  accountCategory
}

input AccountScalarWhereInput {
  AND: [AccountScalarWhereInput!]
  OR: [AccountScalarWhereInput!]
  NOT: [AccountScalarWhereInput!]
  id: IntFilter
  accountNumber: FloatNullableFilter
  name: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
  accountCategory: EnumAccountCategoryFilter
}

type AccountSumAggregate {
  id: Int
  accountNumber: Float
}

input AccountUpdateInput {
  accountNumber: NullableFloatFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  accountCategory: EnumAccountCategoryFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutAccountsNestedInput
  transactionOrigins: TransactionUpdateManyWithoutFromAccountNestedInput
  transactionDestination: TransactionUpdateManyWithoutToAccountNestedInput
  project: ProjectUpdateOneWithoutAccountNestedInput
  bankAccount: BankUpdateOneWithoutAccountNestedInput
}

input AccountUpdateManyMutationInput {
  accountNumber: NullableFloatFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  accountCategory: EnumAccountCategoryFieldUpdateOperationsInput
}

input AccountUpdateManyWithoutUserNestedInput {
  create: [AccountCreateWithoutUserInput!]
  connectOrCreate: [AccountCreateOrConnectWithoutUserInput!]
  upsert: [AccountUpsertWithWhereUniqueWithoutUserInput!]
  createMany: AccountCreateManyUserInputEnvelope
  set: [AccountWhereUniqueInput!]
  disconnect: [AccountWhereUniqueInput!]
  delete: [AccountWhereUniqueInput!]
  connect: [AccountWhereUniqueInput!]
  update: [AccountUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [AccountUpdateManyWithWhereWithoutUserInput!]
  deleteMany: [AccountScalarWhereInput!]
}

input AccountUpdateManyWithWhereWithoutUserInput {
  where: AccountScalarWhereInput!
  data: AccountUpdateManyMutationInput!
}

input AccountUpdateOneArgs {
  data: AccountUpdateInput!
  where: AccountWhereUniqueInput!
}

input AccountUpdateOneRequiredWithoutProjectNestedInput {
  create: AccountCreateWithoutProjectInput
  connectOrCreate: AccountCreateOrConnectWithoutProjectInput
  upsert: AccountUpsertWithoutProjectInput
  connect: AccountWhereUniqueInput
  update: AccountUpdateToOneWithWhereWithoutProjectInput
}

input AccountUpdateOneRequiredWithoutTransactionDestinationNestedInput {
  create: AccountCreateWithoutTransactionDestinationInput
  connectOrCreate: AccountCreateOrConnectWithoutTransactionDestinationInput
  upsert: AccountUpsertWithoutTransactionDestinationInput
  connect: AccountWhereUniqueInput
  update: AccountUpdateToOneWithWhereWithoutTransactionDestinationInput
}

input AccountUpdateOneRequiredWithoutTransactionOriginsNestedInput {
  create: AccountCreateWithoutTransactionOriginsInput
  connectOrCreate: AccountCreateOrConnectWithoutTransactionOriginsInput
  upsert: AccountUpsertWithoutTransactionOriginsInput
  connect: AccountWhereUniqueInput
  update: AccountUpdateToOneWithWhereWithoutTransactionOriginsInput
}

input AccountUpdateToOneWithWhereWithoutProjectInput {
  where: AccountWhereInput
  data: AccountUpdateWithoutProjectInput!
}

input AccountUpdateToOneWithWhereWithoutTransactionDestinationInput {
  where: AccountWhereInput
  data: AccountUpdateWithoutTransactionDestinationInput!
}

input AccountUpdateToOneWithWhereWithoutTransactionOriginsInput {
  where: AccountWhereInput
  data: AccountUpdateWithoutTransactionOriginsInput!
}

input AccountUpdateWithoutProjectInput {
  accountNumber: NullableFloatFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  accountCategory: EnumAccountCategoryFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutAccountsNestedInput
  transactionOrigins: TransactionUpdateManyWithoutFromAccountNestedInput
  transactionDestination: TransactionUpdateManyWithoutToAccountNestedInput
  bankAccount: BankUpdateOneWithoutAccountNestedInput
}

input AccountUpdateWithoutTransactionDestinationInput {
  accountNumber: NullableFloatFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  accountCategory: EnumAccountCategoryFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutAccountsNestedInput
  transactionOrigins: TransactionUpdateManyWithoutFromAccountNestedInput
  project: ProjectUpdateOneWithoutAccountNestedInput
  bankAccount: BankUpdateOneWithoutAccountNestedInput
}

input AccountUpdateWithoutTransactionOriginsInput {
  accountNumber: NullableFloatFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  accountCategory: EnumAccountCategoryFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutAccountsNestedInput
  transactionDestination: TransactionUpdateManyWithoutToAccountNestedInput
  project: ProjectUpdateOneWithoutAccountNestedInput
  bankAccount: BankUpdateOneWithoutAccountNestedInput
}

input AccountUpdateWithoutUserInput {
  accountNumber: NullableFloatFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  accountCategory: EnumAccountCategoryFieldUpdateOperationsInput
  transactionOrigins: TransactionUpdateManyWithoutFromAccountNestedInput
  transactionDestination: TransactionUpdateManyWithoutToAccountNestedInput
  project: ProjectUpdateOneWithoutAccountNestedInput
  bankAccount: BankUpdateOneWithoutAccountNestedInput
}

input AccountUpdateWithWhereUniqueWithoutUserInput {
  where: AccountWhereUniqueInput!
  data: AccountUpdateWithoutUserInput!
}

input AccountUpsertWithoutProjectInput {
  update: AccountUpdateWithoutProjectInput!
  create: AccountCreateWithoutProjectInput!
  where: AccountWhereInput
}

input AccountUpsertWithoutTransactionDestinationInput {
  update: AccountUpdateWithoutTransactionDestinationInput!
  create: AccountCreateWithoutTransactionDestinationInput!
  where: AccountWhereInput
}

input AccountUpsertWithoutTransactionOriginsInput {
  update: AccountUpdateWithoutTransactionOriginsInput!
  create: AccountCreateWithoutTransactionOriginsInput!
  where: AccountWhereInput
}

input AccountUpsertWithWhereUniqueWithoutUserInput {
  where: AccountWhereUniqueInput!
  update: AccountUpdateWithoutUserInput!
  create: AccountCreateWithoutUserInput!
}

input AccountWhereInput {
  AND: [AccountWhereInput!]
  OR: [AccountWhereInput!]
  NOT: [AccountWhereInput!]
  id: IntFilter
  accountNumber: FloatNullableFilter
  name: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
  accountCategory: EnumAccountCategoryFilter
  user: UserRelationFilter
  transactionOrigins: TransactionListRelationFilter
  transactionDestination: TransactionListRelationFilter
  project: ProjectNullableRelationFilter
  bankAccount: BankNullableRelationFilter
}

input AccountWhereUniqueInput {
  id: Int
  AND: [AccountWhereInput!]
  OR: [AccountWhereInput!]
  NOT: [AccountWhereInput!]
  accountNumber: FloatNullableFilter
  name: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
  accountCategory: EnumAccountCategoryFilter
  user: UserRelationFilter
  transactionOrigins: TransactionListRelationFilter
  transactionDestination: TransactionListRelationFilter
  project: ProjectNullableRelationFilter
  bankAccount: BankNullableRelationFilter
}

type Address {
  id: Int!
  name: String!
  cityId: Int!
  districtId: Int!
  postalCodeId: Int!
  city: City!
  district: District!
  postalCode: PostalCode!
  user: UserAbstract
  hotel: Hotel
  school: School
  Shipping: Shipping
}

type AddressAvgAggregate {
  id: Float
  cityId: Float
  districtId: Float
  postalCodeId: Float
}

type AddressCountAggregate {
  id: Int!
  name: Int!
  cityId: Int!
  districtId: Int!
  postalCodeId: Int!
  _all: Int!
}

input AddressCreateArgs {
  data: AddressCreateInput!
}

input AddressCreateInput {
  name: String!
  city: CityCreateNestedOneWithoutAddressInput!
  district: DistrictCreateNestedOneWithoutAddressInput!
  postalCode: PostalCodeCreateNestedOneWithoutAddressInput!
}

input AddressCreateNestedOneWithoutHotelInput {
  create: AddressCreateWithoutHotelInput
  connectOrCreate: AddressCreateOrConnectWithoutHotelInput
  connect: AddressWhereUniqueInput
}

input AddressCreateNestedOneWithoutSchoolInput {
  create: AddressCreateWithoutSchoolInput
  connectOrCreate: AddressCreateOrConnectWithoutSchoolInput
  connect: AddressWhereUniqueInput
}

input AddressCreateNestedOneWithoutShippingInput {
  create: AddressCreateWithoutShippingInput
  connectOrCreate: AddressCreateOrConnectWithoutShippingInput
  connect: AddressWhereUniqueInput
}

input AddressCreateNestedOneWithoutUserInput {
  create: AddressCreateWithoutUserInput
  connectOrCreate: AddressCreateOrConnectWithoutUserInput
  connect: AddressWhereUniqueInput
}

input AddressCreateOrConnectWithoutHotelInput {
  where: AddressWhereUniqueInput!
  create: AddressCreateWithoutHotelInput!
}

input AddressCreateOrConnectWithoutSchoolInput {
  where: AddressWhereUniqueInput!
  create: AddressCreateWithoutSchoolInput!
}

input AddressCreateOrConnectWithoutShippingInput {
  where: AddressWhereUniqueInput!
  create: AddressCreateWithoutShippingInput!
}

input AddressCreateOrConnectWithoutUserInput {
  where: AddressWhereUniqueInput!
  create: AddressCreateWithoutUserInput!
}

input AddressCreateWithoutHotelInput {
  name: String!
  city: CityCreateNestedOneWithoutAddressInput!
  district: DistrictCreateNestedOneWithoutAddressInput!
  postalCode: PostalCodeCreateNestedOneWithoutAddressInput!
}

input AddressCreateWithoutSchoolInput {
  name: String!
  city: CityCreateNestedOneWithoutAddressInput!
  district: DistrictCreateNestedOneWithoutAddressInput!
  postalCode: PostalCodeCreateNestedOneWithoutAddressInput!
}

input AddressCreateWithoutShippingInput {
  name: String!
  city: CityCreateNestedOneWithoutAddressInput!
  district: DistrictCreateNestedOneWithoutAddressInput!
  postalCode: PostalCodeCreateNestedOneWithoutAddressInput!
}

input AddressCreateWithoutUserInput {
  name: String!
  city: CityCreateNestedOneWithoutAddressInput!
  district: DistrictCreateNestedOneWithoutAddressInput!
  postalCode: PostalCodeCreateNestedOneWithoutAddressInput!
}

input AddressFindManyArgs {
  where: AddressWhereInput
  orderBy: [AddressOrderByWithRelationInput!]
  take: Int
  skip: Int
  distinct: [AddressScalarFieldEnum!]
}

input AddressFindUniqueArgs {
  where: AddressWhereUniqueInput!
}

input AddressListRelationFilter {
  every: AddressWhereInput
  some: AddressWhereInput
  none: AddressWhereInput
}

type AddressMaxAggregate {
  id: Int
  name: String
  cityId: Int
  districtId: Int
  postalCodeId: Int
}

type AddressMinAggregate {
  id: Int
  name: String
  cityId: Int
  districtId: Int
  postalCodeId: Int
}

input AddressOrderByRelationAggregateInput {
  _count: SortOrder
}

input AddressOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  cityId: SortOrder
  districtId: SortOrder
  postalCodeId: SortOrder
  city: CityOrderByWithRelationInput
  district: DistrictOrderByWithRelationInput
  postalCode: PostalCodeOrderByWithRelationInput
  user: UserOrderByWithRelationInput
  hotel: HotelOrderByWithRelationInput
  school: SchoolOrderByWithRelationInput
  Shipping: ShippingOrderByWithRelationInput
}

input AddressRelationFilter {
  is: AddressWhereInput
  isNot: AddressWhereInput
}

enum AddressScalarFieldEnum {
  id
  name
  cityId
  districtId
  postalCodeId
}

type AddressSumAggregate {
  id: Int
  cityId: Int
  districtId: Int
  postalCodeId: Int
}

input AddressUpdateInput {
  name: StringFieldUpdateOperationsInput
  city: CityUpdateOneRequiredWithoutAddressNestedInput
  district: DistrictUpdateOneRequiredWithoutAddressNestedInput
  postalCode: PostalCodeUpdateOneRequiredWithoutAddressNestedInput
  user: UserUpdateOneWithoutAddressNestedInput
  hotel: HotelUpdateOneWithoutAddressNestedInput
  school: SchoolUpdateOneWithoutAddressNestedInput
  Shipping: ShippingUpdateOneWithoutAddressNestedInput
}

input AddressUpdateOneArgs {
  data: AddressUpdateInput!
  where: AddressWhereUniqueInput!
}

input AddressUpdateOneRequiredWithoutHotelNestedInput {
  create: AddressCreateWithoutHotelInput
  connectOrCreate: AddressCreateOrConnectWithoutHotelInput
  upsert: AddressUpsertWithoutHotelInput
  connect: AddressWhereUniqueInput
  update: AddressUpdateToOneWithWhereWithoutHotelInput
}

input AddressUpdateOneRequiredWithoutSchoolNestedInput {
  create: AddressCreateWithoutSchoolInput
  connectOrCreate: AddressCreateOrConnectWithoutSchoolInput
  upsert: AddressUpsertWithoutSchoolInput
  connect: AddressWhereUniqueInput
  update: AddressUpdateToOneWithWhereWithoutSchoolInput
}

input AddressUpdateOneRequiredWithoutShippingNestedInput {
  create: AddressCreateWithoutShippingInput
  connectOrCreate: AddressCreateOrConnectWithoutShippingInput
  upsert: AddressUpsertWithoutShippingInput
  connect: AddressWhereUniqueInput
  update: AddressUpdateToOneWithWhereWithoutShippingInput
}

input AddressUpdateOneRequiredWithoutUserNestedInput {
  create: AddressCreateWithoutUserInput
  connectOrCreate: AddressCreateOrConnectWithoutUserInput
  upsert: AddressUpsertWithoutUserInput
  connect: AddressWhereUniqueInput
  update: AddressUpdateToOneWithWhereWithoutUserInput
}

input AddressUpdateToOneWithWhereWithoutHotelInput {
  where: AddressWhereInput
  data: AddressUpdateWithoutHotelInput!
}

input AddressUpdateToOneWithWhereWithoutSchoolInput {
  where: AddressWhereInput
  data: AddressUpdateWithoutSchoolInput!
}

input AddressUpdateToOneWithWhereWithoutShippingInput {
  where: AddressWhereInput
  data: AddressUpdateWithoutShippingInput!
}

input AddressUpdateToOneWithWhereWithoutUserInput {
  where: AddressWhereInput
  data: AddressUpdateWithoutUserInput!
}

input AddressUpdateWithoutHotelInput {
  name: StringFieldUpdateOperationsInput
  city: CityUpdateOneRequiredWithoutAddressNestedInput
  district: DistrictUpdateOneRequiredWithoutAddressNestedInput
  postalCode: PostalCodeUpdateOneRequiredWithoutAddressNestedInput
  user: UserUpdateOneWithoutAddressNestedInput
  school: SchoolUpdateOneWithoutAddressNestedInput
  Shipping: ShippingUpdateOneWithoutAddressNestedInput
}

input AddressUpdateWithoutSchoolInput {
  name: StringFieldUpdateOperationsInput
  city: CityUpdateOneRequiredWithoutAddressNestedInput
  district: DistrictUpdateOneRequiredWithoutAddressNestedInput
  postalCode: PostalCodeUpdateOneRequiredWithoutAddressNestedInput
  user: UserUpdateOneWithoutAddressNestedInput
  hotel: HotelUpdateOneWithoutAddressNestedInput
  Shipping: ShippingUpdateOneWithoutAddressNestedInput
}

input AddressUpdateWithoutShippingInput {
  name: StringFieldUpdateOperationsInput
  city: CityUpdateOneRequiredWithoutAddressNestedInput
  district: DistrictUpdateOneRequiredWithoutAddressNestedInput
  postalCode: PostalCodeUpdateOneRequiredWithoutAddressNestedInput
  user: UserUpdateOneWithoutAddressNestedInput
  hotel: HotelUpdateOneWithoutAddressNestedInput
  school: SchoolUpdateOneWithoutAddressNestedInput
}

input AddressUpdateWithoutUserInput {
  name: StringFieldUpdateOperationsInput
  city: CityUpdateOneRequiredWithoutAddressNestedInput
  district: DistrictUpdateOneRequiredWithoutAddressNestedInput
  postalCode: PostalCodeUpdateOneRequiredWithoutAddressNestedInput
  hotel: HotelUpdateOneWithoutAddressNestedInput
  school: SchoolUpdateOneWithoutAddressNestedInput
  Shipping: ShippingUpdateOneWithoutAddressNestedInput
}

input AddressUpsertWithoutHotelInput {
  update: AddressUpdateWithoutHotelInput!
  create: AddressCreateWithoutHotelInput!
  where: AddressWhereInput
}

input AddressUpsertWithoutSchoolInput {
  update: AddressUpdateWithoutSchoolInput!
  create: AddressCreateWithoutSchoolInput!
  where: AddressWhereInput
}

input AddressUpsertWithoutShippingInput {
  update: AddressUpdateWithoutShippingInput!
  create: AddressCreateWithoutShippingInput!
  where: AddressWhereInput
}

input AddressUpsertWithoutUserInput {
  update: AddressUpdateWithoutUserInput!
  create: AddressCreateWithoutUserInput!
  where: AddressWhereInput
}

input AddressWhereInput {
  AND: [AddressWhereInput!]
  OR: [AddressWhereInput!]
  NOT: [AddressWhereInput!]
  id: IntFilter
  name: StringFilter
  cityId: IntFilter
  districtId: IntFilter
  postalCodeId: IntFilter
  city: CityRelationFilter
  district: DistrictRelationFilter
  postalCode: PostalCodeRelationFilter
  user: UserNullableRelationFilter
  hotel: HotelNullableRelationFilter
  school: SchoolNullableRelationFilter
  Shipping: ShippingNullableRelationFilter
}

input AddressWhereUniqueInput {
  id: Int
  AND: [AddressWhereInput!]
  OR: [AddressWhereInput!]
  NOT: [AddressWhereInput!]
  name: StringFilter
  cityId: IntFilter
  districtId: IntFilter
  postalCodeId: IntFilter
  city: CityRelationFilter
  district: DistrictRelationFilter
  postalCode: PostalCodeRelationFilter
  user: UserNullableRelationFilter
  hotel: HotelNullableRelationFilter
  school: SchoolNullableRelationFilter
  Shipping: ShippingNullableRelationFilter
}

type Auth {
  """Example field (placeholder)"""
  message: String!
}

type Bank {
  id: Int!
  name: String!
  logoUrl: String!
  accountNumber: Int!
}

type BankAvgAggregate {
  id: Float
  accountNumber: Float
  accountId: Float
}

type BankCountAggregate {
  id: Int!
  name: Int!
  logoUrl: Int!
  accountNumber: Int!
  accountId: Int!
  _all: Int!
}

input BankCreateNestedOneWithoutAccountInput {
  create: BankCreateWithoutAccountInput
  connectOrCreate: BankCreateOrConnectWithoutAccountInput
  connect: BankWhereUniqueInput
}

input BankCreateOrConnectWithoutAccountInput {
  where: BankWhereUniqueInput!
  create: BankCreateWithoutAccountInput!
}

input BankCreateWithoutAccountInput {
  name: String!
  logoUrl: String!
  accountNumber: Int!
}

type BankMaxAggregate {
  id: Int
  name: String
  logoUrl: String
  accountNumber: Int
  accountId: Int
}

type BankMinAggregate {
  id: Int
  name: String
  logoUrl: String
  accountNumber: Int
  accountId: Int
}

input BankNullableRelationFilter {
  is: BankWhereInput
  isNot: BankWhereInput
}

input BankOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  logoUrl: SortOrder
  accountNumber: SortOrder
  accountId: SortOrder
  account: AccountOrderByWithRelationInput
}

type BankSumAggregate {
  id: Int
  accountNumber: Int
  accountId: Int
}

input BankUpdateOneWithoutAccountNestedInput {
  create: BankCreateWithoutAccountInput
  connectOrCreate: BankCreateOrConnectWithoutAccountInput
  upsert: BankUpsertWithoutAccountInput
  disconnect: BankWhereInput
  delete: BankWhereInput
  connect: BankWhereUniqueInput
  update: BankUpdateToOneWithWhereWithoutAccountInput
}

input BankUpdateToOneWithWhereWithoutAccountInput {
  where: BankWhereInput
  data: BankUpdateWithoutAccountInput!
}

input BankUpdateWithoutAccountInput {
  name: StringFieldUpdateOperationsInput
  logoUrl: StringFieldUpdateOperationsInput
  accountNumber: IntFieldUpdateOperationsInput
}

input BankUpsertWithoutAccountInput {
  update: BankUpdateWithoutAccountInput!
  create: BankCreateWithoutAccountInput!
  where: BankWhereInput
}

input BankWhereInput {
  AND: [BankWhereInput!]
  OR: [BankWhereInput!]
  NOT: [BankWhereInput!]
  id: IntFilter
  name: StringFilter
  logoUrl: StringFilter
  accountNumber: IntFilter
  accountId: IntFilter
  account: AccountRelationFilter
}

input BankWhereUniqueInput {
  id: Int
  accountId: Int
  AND: [BankWhereInput!]
  OR: [BankWhereInput!]
  NOT: [BankWhereInput!]
  name: StringFilter
  logoUrl: StringFilter
  accountNumber: IntFilter
  account: AccountRelationFilter
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

type Cart {
  id: Int!
  orderId: Int!
  itemId: Int!
  quantity: Int!
  price: Float!
  cost: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  order: Order!
  item: Item!
}

type CartAvgAggregate {
  id: Float
  orderId: Float
  itemId: Float
  quantity: Float
  price: Float
  cost: Float
}

type CartCountAggregate {
  id: Int!
  orderId: Int!
  itemId: Int!
  quantity: Int!
  price: Int!
  cost: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

input CartCreateManyItemInput {
  id: Int
  orderId: Int!
  quantity: Int!
  createdAt: DateTime
  updatedAt: DateTime
}

input CartCreateManyItemInputEnvelope {
  data: [CartCreateManyItemInput!]!
  skipDuplicates: Boolean
}

input CartCreateManyOrderInput {
  id: Int
  itemId: Int!
  quantity: Int!
  createdAt: DateTime
  updatedAt: DateTime
}

input CartCreateManyOrderInputEnvelope {
  data: [CartCreateManyOrderInput!]!
  skipDuplicates: Boolean
}

input CartCreateNestedManyWithoutItemInput {
  create: [CartCreateWithoutItemInput!]
  connectOrCreate: [CartCreateOrConnectWithoutItemInput!]
  createMany: CartCreateManyItemInputEnvelope
  connect: [CartWhereUniqueInput!]
}

input CartCreateNestedManyWithoutOrderInput {
  create: [CartCreateWithoutOrderInput!]
  connectOrCreate: [CartCreateOrConnectWithoutOrderInput!]
  createMany: CartCreateManyOrderInputEnvelope
  connect: [CartWhereUniqueInput!]
}

input CartCreateOrConnectWithoutItemInput {
  where: CartWhereUniqueInput!
  create: CartCreateWithoutItemInput!
}

input CartCreateOrConnectWithoutOrderInput {
  where: CartWhereUniqueInput!
  create: CartCreateWithoutOrderInput!
}

input CartCreateWithoutItemInput {
  quantity: Int!
  createdAt: DateTime
  updatedAt: DateTime
  order: OrderCreateNestedOneWithoutCartInput!
}

input CartCreateWithoutOrderInput {
  quantity: Int!
  createdAt: DateTime
  updatedAt: DateTime
  item: ItemCreateNestedOneWithoutCartInput!
}

input CartListRelationFilter {
  every: CartWhereInput
  some: CartWhereInput
  none: CartWhereInput
}

type CartMaxAggregate {
  id: Int
  orderId: Int
  itemId: Int
  quantity: Int
  price: Float
  cost: Float
  createdAt: DateTime
  updatedAt: DateTime
}

type CartMinAggregate {
  id: Int
  orderId: Int
  itemId: Int
  quantity: Int
  price: Float
  cost: Float
  createdAt: DateTime
  updatedAt: DateTime
}

input CartOrderByRelationAggregateInput {
  _count: SortOrder
}

input CartScalarWhereInput {
  AND: [CartScalarWhereInput!]
  OR: [CartScalarWhereInput!]
  NOT: [CartScalarWhereInput!]
  id: IntFilter
  orderId: IntFilter
  itemId: IntFilter
  quantity: IntFilter
  price: FloatFilter
  cost: FloatFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

type CartSumAggregate {
  id: Int
  orderId: Int
  itemId: Int
  quantity: Int
  price: Float
  cost: Float
}

input CartUpdateManyMutationInput {
  quantity: IntFieldUpdateOperationsInput
  price: FloatFieldUpdateOperationsInput
  cost: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CartUpdateManyWithoutItemNestedInput {
  create: [CartCreateWithoutItemInput!]
  connectOrCreate: [CartCreateOrConnectWithoutItemInput!]
  upsert: [CartUpsertWithWhereUniqueWithoutItemInput!]
  createMany: CartCreateManyItemInputEnvelope
  set: [CartWhereUniqueInput!]
  disconnect: [CartWhereUniqueInput!]
  delete: [CartWhereUniqueInput!]
  connect: [CartWhereUniqueInput!]
  update: [CartUpdateWithWhereUniqueWithoutItemInput!]
  updateMany: [CartUpdateManyWithWhereWithoutItemInput!]
  deleteMany: [CartScalarWhereInput!]
}

input CartUpdateManyWithoutOrderNestedInput {
  create: [CartCreateWithoutOrderInput!]
  connectOrCreate: [CartCreateOrConnectWithoutOrderInput!]
  upsert: [CartUpsertWithWhereUniqueWithoutOrderInput!]
  createMany: CartCreateManyOrderInputEnvelope
  set: [CartWhereUniqueInput!]
  disconnect: [CartWhereUniqueInput!]
  delete: [CartWhereUniqueInput!]
  connect: [CartWhereUniqueInput!]
  update: [CartUpdateWithWhereUniqueWithoutOrderInput!]
  updateMany: [CartUpdateManyWithWhereWithoutOrderInput!]
  deleteMany: [CartScalarWhereInput!]
}

input CartUpdateManyWithWhereWithoutItemInput {
  where: CartScalarWhereInput!
  data: CartUpdateManyMutationInput!
}

input CartUpdateManyWithWhereWithoutOrderInput {
  where: CartScalarWhereInput!
  data: CartUpdateManyMutationInput!
}

input CartUpdateWithoutItemInput {
  quantity: IntFieldUpdateOperationsInput
  price: FloatFieldUpdateOperationsInput
  cost: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  order: OrderUpdateOneRequiredWithoutCartNestedInput
}

input CartUpdateWithoutOrderInput {
  quantity: IntFieldUpdateOperationsInput
  price: FloatFieldUpdateOperationsInput
  cost: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  item: ItemUpdateOneRequiredWithoutCartNestedInput
}

input CartUpdateWithWhereUniqueWithoutItemInput {
  where: CartWhereUniqueInput!
  data: CartUpdateWithoutItemInput!
}

input CartUpdateWithWhereUniqueWithoutOrderInput {
  where: CartWhereUniqueInput!
  data: CartUpdateWithoutOrderInput!
}

input CartUpsertWithWhereUniqueWithoutItemInput {
  where: CartWhereUniqueInput!
  update: CartUpdateWithoutItemInput!
  create: CartCreateWithoutItemInput!
}

input CartUpsertWithWhereUniqueWithoutOrderInput {
  where: CartWhereUniqueInput!
  update: CartUpdateWithoutOrderInput!
  create: CartCreateWithoutOrderInput!
}

input CartWhereInput {
  AND: [CartWhereInput!]
  OR: [CartWhereInput!]
  NOT: [CartWhereInput!]
  id: IntFilter
  orderId: IntFilter
  itemId: IntFilter
  quantity: IntFilter
  price: FloatFilter
  cost: FloatFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  order: OrderRelationFilter
  item: ItemRelationFilter
}

input CartWhereUniqueInput {
  id: Int
  AND: [CartWhereInput!]
  OR: [CartWhereInput!]
  NOT: [CartWhereInput!]
  orderId: IntFilter
  itemId: IntFilter
  quantity: IntFilter
  price: FloatFilter
  cost: FloatFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  order: OrderRelationFilter
  item: ItemRelationFilter
}

type CheckIn {
  id: Int!
  userId: String!
  hotelId: Int!
  checkInAt: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
  user: UserAbstract!
  hotel: Hotel!
}

type CheckInAvgAggregate {
  id: Float
  hotelId: Float
}

type CheckInCountAggregate {
  id: Int!
  userId: Int!
  hotelId: Int!
  checkInAt: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

input CheckInCreateArgs {
  data: CheckInCreateInput!
}

input CheckInCreateInput {
  checkInAt: DateTime
  user: UserCreateNestedOneWithoutCheckInsInput!
  hotel: HotelCreateNestedOneWithoutCheckInsInput!
}

input CheckInCreateManyHotelInput {
  id: Int
  userId: String!
  checkInAt: DateTime
}

input CheckInCreateManyHotelInputEnvelope {
  data: [CheckInCreateManyHotelInput!]!
  skipDuplicates: Boolean
}

input CheckInCreateManyUserInput {
  id: Int
  hotelId: Int!
  checkInAt: DateTime
}

input CheckInCreateManyUserInputEnvelope {
  data: [CheckInCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input CheckInCreateOrConnectWithoutHotelInput {
  where: CheckInWhereUniqueInput!
  create: CheckInCreateWithoutHotelInput!
}

input CheckInCreateOrConnectWithoutUserInput {
  where: CheckInWhereUniqueInput!
  create: CheckInCreateWithoutUserInput!
}

input CheckInCreateWithoutHotelInput {
  checkInAt: DateTime
  user: UserCreateNestedOneWithoutCheckInsInput!
}

input CheckInCreateWithoutUserInput {
  checkInAt: DateTime
  hotel: HotelCreateNestedOneWithoutCheckInsInput!
}

input CheckInFindManyArgs {
  where: CheckInWhereInput
  orderBy: [CheckInOrderByWithRelationInput!]
  take: Int
  skip: Int
  distinct: [CheckInScalarFieldEnum!]
}

input CheckInFindUniqueArgs {
  where: CheckInWhereUniqueInput!
}

input CheckInListRelationFilter {
  every: CheckInWhereInput
  some: CheckInWhereInput
  none: CheckInWhereInput
}

type CheckInMaxAggregate {
  id: Int
  userId: String
  hotelId: Int
  checkInAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

type CheckInMinAggregate {
  id: Int
  userId: String
  hotelId: Int
  checkInAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

input CheckInOrderByRelationAggregateInput {
  _count: SortOrder
}

input CheckInOrderByWithRelationInput {
  id: SortOrder
  userId: SortOrder
  hotelId: SortOrder
  checkInAt: SortOrder
  user: UserOrderByWithRelationInput
  hotel: HotelOrderByWithRelationInput
}

enum CheckInScalarFieldEnum {
  id
  userId
  hotelId
  checkInAt
  createdAt
  updatedAt
}

input CheckInScalarWhereInput {
  AND: [CheckInScalarWhereInput!]
  OR: [CheckInScalarWhereInput!]
  NOT: [CheckInScalarWhereInput!]
  id: IntFilter
  userId: StringFilter
  hotelId: IntFilter
  checkInAt: DateTimeFilter
}

type CheckInSumAggregate {
  id: Int
  hotelId: Int
}

input CheckInUpdateInput {
  checkInAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutCheckInsNestedInput
  hotel: HotelUpdateOneRequiredWithoutCheckInsNestedInput
}

input CheckInUpdateManyMutationInput {
  checkInAt: DateTimeFieldUpdateOperationsInput
}

input CheckInUpdateManyWithoutHotelNestedInput {
  create: [CheckInCreateWithoutHotelInput!]
  connectOrCreate: [CheckInCreateOrConnectWithoutHotelInput!]
  upsert: [CheckInUpsertWithWhereUniqueWithoutHotelInput!]
  createMany: CheckInCreateManyHotelInputEnvelope
  set: [CheckInWhereUniqueInput!]
  disconnect: [CheckInWhereUniqueInput!]
  delete: [CheckInWhereUniqueInput!]
  connect: [CheckInWhereUniqueInput!]
  update: [CheckInUpdateWithWhereUniqueWithoutHotelInput!]
  updateMany: [CheckInUpdateManyWithWhereWithoutHotelInput!]
  deleteMany: [CheckInScalarWhereInput!]
}

input CheckInUpdateManyWithoutUserNestedInput {
  create: [CheckInCreateWithoutUserInput!]
  connectOrCreate: [CheckInCreateOrConnectWithoutUserInput!]
  upsert: [CheckInUpsertWithWhereUniqueWithoutUserInput!]
  createMany: CheckInCreateManyUserInputEnvelope
  set: [CheckInWhereUniqueInput!]
  disconnect: [CheckInWhereUniqueInput!]
  delete: [CheckInWhereUniqueInput!]
  connect: [CheckInWhereUniqueInput!]
  update: [CheckInUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [CheckInUpdateManyWithWhereWithoutUserInput!]
  deleteMany: [CheckInScalarWhereInput!]
}

input CheckInUpdateManyWithWhereWithoutHotelInput {
  where: CheckInScalarWhereInput!
  data: CheckInUpdateManyMutationInput!
}

input CheckInUpdateManyWithWhereWithoutUserInput {
  where: CheckInScalarWhereInput!
  data: CheckInUpdateManyMutationInput!
}

input CheckInUpdateOneArgs {
  data: CheckInUpdateInput!
  where: CheckInWhereUniqueInput!
}

input CheckInUpdateWithoutHotelInput {
  checkInAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutCheckInsNestedInput
}

input CheckInUpdateWithoutUserInput {
  checkInAt: DateTimeFieldUpdateOperationsInput
  hotel: HotelUpdateOneRequiredWithoutCheckInsNestedInput
}

input CheckInUpdateWithWhereUniqueWithoutHotelInput {
  where: CheckInWhereUniqueInput!
  data: CheckInUpdateWithoutHotelInput!
}

input CheckInUpdateWithWhereUniqueWithoutUserInput {
  where: CheckInWhereUniqueInput!
  data: CheckInUpdateWithoutUserInput!
}

input CheckInUpsertWithWhereUniqueWithoutHotelInput {
  where: CheckInWhereUniqueInput!
  update: CheckInUpdateWithoutHotelInput!
  create: CheckInCreateWithoutHotelInput!
}

input CheckInUpsertWithWhereUniqueWithoutUserInput {
  where: CheckInWhereUniqueInput!
  update: CheckInUpdateWithoutUserInput!
  create: CheckInCreateWithoutUserInput!
}

input CheckInWhereInput {
  AND: [CheckInWhereInput!]
  OR: [CheckInWhereInput!]
  NOT: [CheckInWhereInput!]
  id: IntFilter
  userId: StringFilter
  hotelId: IntFilter
  checkInAt: DateTimeFilter
  user: UserRelationFilter
  hotel: HotelRelationFilter
}

input CheckInWhereUniqueInput {
  id: Int
  AND: [CheckInWhereInput!]
  OR: [CheckInWhereInput!]
  NOT: [CheckInWhereInput!]
  userId: StringFilter
  hotelId: IntFilter
  checkInAt: DateTimeFilter
  user: UserRelationFilter
  hotel: HotelRelationFilter
}

type City {
  id: Int!
  name: String!
  _count: CityCount!
}

type CityAvgAggregate {
  id: Float
}

type CityCount {
  address: Int!
}

type CityCountAggregate {
  id: Int!
  name: Int!
  _all: Int!
}

input CityCreateNestedOneWithoutAddressInput {
  create: CityCreateWithoutAddressInput
  connectOrCreate: CityCreateOrConnectWithoutAddressInput
  connect: CityWhereUniqueInput
}

input CityCreateOrConnectWithoutAddressInput {
  where: CityWhereUniqueInput!
  create: CityCreateWithoutAddressInput!
}

input CityCreateWithoutAddressInput {
  name: String!
}

type CityMaxAggregate {
  id: Int
  name: String
}

type CityMinAggregate {
  id: Int
  name: String
}

input CityOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  address: AddressOrderByRelationAggregateInput
}

input CityRelationFilter {
  is: CityWhereInput
  isNot: CityWhereInput
}

type CitySumAggregate {
  id: Int
}

input CityUpdateOneRequiredWithoutAddressNestedInput {
  create: CityCreateWithoutAddressInput
  connectOrCreate: CityCreateOrConnectWithoutAddressInput
  upsert: CityUpsertWithoutAddressInput
  connect: CityWhereUniqueInput
  update: CityUpdateToOneWithWhereWithoutAddressInput
}

input CityUpdateToOneWithWhereWithoutAddressInput {
  where: CityWhereInput
  data: CityUpdateWithoutAddressInput!
}

input CityUpdateWithoutAddressInput {
  name: StringFieldUpdateOperationsInput
}

input CityUpsertWithoutAddressInput {
  update: CityUpdateWithoutAddressInput!
  create: CityCreateWithoutAddressInput!
  where: CityWhereInput
}

input CityWhereInput {
  AND: [CityWhereInput!]
  OR: [CityWhereInput!]
  NOT: [CityWhereInput!]
  id: IntFilter
  name: StringFilter
  address: AddressListRelationFilter
}

input CityWhereUniqueInput {
  id: Int
  AND: [CityWhereInput!]
  OR: [CityWhereInput!]
  NOT: [CityWhereInput!]
  name: StringFilter
  address: AddressListRelationFilter
}

input CreateAuthInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeNullableFilter
}

type District {
  id: Int!
  name: String!
  _count: DistrictCount!
}

type DistrictAvgAggregate {
  id: Float
}

type DistrictCount {
  address: Int!
}

type DistrictCountAggregate {
  id: Int!
  name: Int!
  _all: Int!
}

input DistrictCreateNestedOneWithoutAddressInput {
  create: DistrictCreateWithoutAddressInput
  connectOrCreate: DistrictCreateOrConnectWithoutAddressInput
  connect: DistrictWhereUniqueInput
}

input DistrictCreateOrConnectWithoutAddressInput {
  where: DistrictWhereUniqueInput!
  create: DistrictCreateWithoutAddressInput!
}

input DistrictCreateWithoutAddressInput {
  name: String!
}

type DistrictMaxAggregate {
  id: Int
  name: String
}

type DistrictMinAggregate {
  id: Int
  name: String
}

input DistrictOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  address: AddressOrderByRelationAggregateInput
}

input DistrictRelationFilter {
  is: DistrictWhereInput
  isNot: DistrictWhereInput
}

type DistrictSumAggregate {
  id: Int
}

input DistrictUpdateOneRequiredWithoutAddressNestedInput {
  create: DistrictCreateWithoutAddressInput
  connectOrCreate: DistrictCreateOrConnectWithoutAddressInput
  upsert: DistrictUpsertWithoutAddressInput
  connect: DistrictWhereUniqueInput
  update: DistrictUpdateToOneWithWhereWithoutAddressInput
}

input DistrictUpdateToOneWithWhereWithoutAddressInput {
  where: DistrictWhereInput
  data: DistrictUpdateWithoutAddressInput!
}

input DistrictUpdateWithoutAddressInput {
  name: StringFieldUpdateOperationsInput
}

input DistrictUpsertWithoutAddressInput {
  update: DistrictUpdateWithoutAddressInput!
  create: DistrictCreateWithoutAddressInput!
  where: DistrictWhereInput
}

input DistrictWhereInput {
  AND: [DistrictWhereInput!]
  OR: [DistrictWhereInput!]
  NOT: [DistrictWhereInput!]
  id: IntFilter
  name: StringFilter
  address: AddressListRelationFilter
}

input DistrictWhereUniqueInput {
  id: Int
  AND: [DistrictWhereInput!]
  OR: [DistrictWhereInput!]
  NOT: [DistrictWhereInput!]
  name: StringFilter
  address: AddressListRelationFilter
}

input EnumAccountCategoryFieldUpdateOperationsInput {
  set: AccountCategory
}

input EnumAccountCategoryFilter {
  equals: AccountCategory
  in: [AccountCategory!]
  notIn: [AccountCategory!]
  not: NestedEnumAccountCategoryFilter
}

input EnumFaqTypeFieldUpdateOperationsInput {
  set: FaqType
}

input EnumFaqTypeFilter {
  equals: FaqType
  in: [FaqType!]
  notIn: [FaqType!]
  not: NestedEnumFaqTypeFilter
}

input EnumFileTypeFieldUpdateOperationsInput {
  set: FileType
}

input EnumFileTypeFilter {
  equals: FileType
  in: [FileType!]
  notIn: [FileType!]
  not: NestedEnumFileTypeFilter
}

input EnumInstallmentStatusFieldUpdateOperationsInput {
  set: InstallmentStatus
}

input EnumInstallmentStatusFilter {
  equals: InstallmentStatus
  in: [InstallmentStatus!]
  notIn: [InstallmentStatus!]
  not: NestedEnumInstallmentStatusFilter
}

input EnumPointTypeFilter {
  equals: PointType
  in: [PointType!]
  notIn: [PointType!]
  not: NestedEnumPointTypeFilter
}

input EnumProjectCategoryFieldUpdateOperationsInput {
  set: ProjectCategory
}

input EnumProjectCategoryFilter {
  equals: ProjectCategory
  in: [ProjectCategory!]
  notIn: [ProjectCategory!]
  not: NestedEnumProjectCategoryFilter
}

input EnumShippingStatusFieldUpdateOperationsInput {
  set: ShippingStatus
}

input EnumShippingStatusFilter {
  equals: ShippingStatus
  in: [ShippingStatus!]
  notIn: [ShippingStatus!]
  not: NestedEnumShippingStatusFilter
}

input EnumThemeFieldUpdateOperationsInput {
  set: Theme
}

input EnumThemeFilter {
  equals: Theme
  in: [Theme!]
  notIn: [Theme!]
  not: NestedEnumThemeFilter
}

input EnumTransactionCategoryFieldUpdateOperationsInput {
  set: TransactionCategory
}

input EnumTransactionCategoryFilter {
  equals: TransactionCategory
  in: [TransactionCategory!]
  notIn: [TransactionCategory!]
  not: NestedEnumTransactionCategoryFilter
}

input EnumTransactionStatusFieldUpdateOperationsInput {
  set: TransactionStatus
}

input EnumTransactionStatusFilter {
  equals: TransactionStatus
  in: [TransactionStatus!]
  notIn: [TransactionStatus!]
  not: NestedEnumTransactionStatusFilter
}

input EnumTransactionTypeFilter {
  equals: TransactionType
  in: [TransactionType!]
  notIn: [TransactionType!]
  not: NestedEnumTransactionTypeFilter
}

input EnumUserNotificationCategoryFieldUpdateOperationsInput {
  set: UserNotificationCategory
}

input EnumUserNotificationCategoryFilter {
  equals: UserNotificationCategory
  in: [UserNotificationCategory!]
  notIn: [UserNotificationCategory!]
  not: NestedEnumUserNotificationCategoryFilter
}

input EnumUserRoleFieldUpdateOperationsInput {
  set: UserRole
}

input EnumUserRoleFilter {
  equals: UserRole
  in: [UserRole!]
  notIn: [UserRole!]
  not: NestedEnumUserRoleFilter
}

input EnumUserStatusFieldUpdateOperationsInput {
  set: UserStatus
}

input EnumUserStatusFilter {
  equals: UserStatus
  in: [UserStatus!]
  notIn: [UserStatus!]
  not: NestedEnumUserStatusFilter
}

input EnumUserTypeFieldUpdateOperationsInput {
  set: UserType
}

input EnumUserTypeFilter {
  equals: UserType
  in: [UserType!]
  notIn: [UserType!]
  not: NestedEnumUserTypeFilter
}

type Faq {
  id: Int!
  name: String!
  description: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  type: FaqType!
}

type FaqAvgAggregate {
  id: Float
}

type FaqCountAggregate {
  id: Int!
  name: Int!
  description: Int!
  createdAt: Int!
  updatedAt: Int!
  type: Int!
  _all: Int!
}

input FaqCreateArgs {
  data: FaqCreateInput!
}

input FaqCreateInput {
  name: String!
  description: String!
  createdAt: DateTime
  updatedAt: DateTime
  type: FaqType!
}

input FaqFindManyArgs {
  where: FaqWhereInput
  orderBy: [FaqOrderByWithRelationInput!]
  take: Int
  skip: Int
  distinct: [FaqScalarFieldEnum!]
}

input FaqFindUniqueArgs {
  where: FaqWhereUniqueInput!
}

type FaqMaxAggregate {
  id: Int
  name: String
  description: String
  createdAt: DateTime
  updatedAt: DateTime
  type: FaqType
}

type FaqMinAggregate {
  id: Int
  name: String
  description: String
  createdAt: DateTime
  updatedAt: DateTime
  type: FaqType
}

input FaqOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  description: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  type: SortOrder
}

enum FaqScalarFieldEnum {
  id
  name
  description
  createdAt
  updatedAt
  type
}

type FaqSumAggregate {
  id: Int
}

enum FaqType {
  REFERRAL_PAGE
  DASHBOARD_PAGE
  REWARD_PAGE
  PROJECT_PAGE
}

input FaqUpdateInput {
  name: StringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  type: EnumFaqTypeFieldUpdateOperationsInput
}

input FaqUpdateOneArgs {
  data: FaqUpdateInput!
  where: FaqWhereUniqueInput!
}

input FaqWhereInput {
  AND: [FaqWhereInput!]
  OR: [FaqWhereInput!]
  NOT: [FaqWhereInput!]
  id: IntFilter
  name: StringFilter
  description: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  type: EnumFaqTypeFilter
}

input FaqWhereUniqueInput {
  id: Int
  AND: [FaqWhereInput!]
  OR: [FaqWhereInput!]
  NOT: [FaqWhereInput!]
  name: StringFilter
  description: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  type: EnumFaqTypeFilter
}

type File {
  id: Int!
  fileType: FileType!
  filesize: Float!
  name: String!
  description: String!
  url: String!
  createdById: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy: UserAbstract!
}

type FileAvgAggregate {
  id: Float
  filesize: Float
}

type FileCountAggregate {
  id: Int!
  fileType: Int!
  filesize: Int!
  name: Int!
  description: Int!
  url: Int!
  createdById: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

input FileCreateArgs {
  data: FileCreateInput!
}

input FileCreateInput {
  fileType: FileType!
  filesize: Float!
  name: String!
  description: String!
  url: String!
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserCreateNestedOneWithoutFilesCreatedInput!
}

input FileFindManyArgs {
  where: FileWhereInput
  orderBy: [FileOrderByWithRelationInput!]
  take: Int
  skip: Int
  distinct: [FileScalarFieldEnum!]
}

input FileFindUniqueArgs {
  where: FileWhereUniqueInput!
}

type FileMaxAggregate {
  id: Int
  fileType: FileType
  filesize: Float
  name: String
  description: String
  url: String
  createdById: String
  createdAt: DateTime
  updatedAt: DateTime
}

type FileMinAggregate {
  id: Int
  fileType: FileType
  filesize: Float
  name: String
  description: String
  url: String
  createdById: String
  createdAt: DateTime
  updatedAt: DateTime
}

input FileOrderByWithRelationInput {
  id: SortOrder
  fileType: SortOrder
  filesize: SortOrder
  name: SortOrder
  description: SortOrder
  url: SortOrder
  createdById: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  createdBy: UserOrderByWithRelationInput
}

enum FileScalarFieldEnum {
  id
  fileType
  filesize
  name
  description
  url
  createdById
  createdAt
  updatedAt
}

type FileSumAggregate {
  id: Int
  filesize: Float
}

enum FileType {
  MP4
  JPG
  PNG
  PDF
}

input FileUpdateInput {
  fileType: EnumFileTypeFieldUpdateOperationsInput
  filesize: FloatFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  createdBy: UserUpdateOneRequiredWithoutFilesCreatedNestedInput
}

input FileUpdateOneArgs {
  data: FileUpdateInput!
  where: FileWhereUniqueInput!
}

input FileWhereInput {
  AND: [FileWhereInput!]
  OR: [FileWhereInput!]
  NOT: [FileWhereInput!]
  id: IntFilter
  fileType: EnumFileTypeFilter
  filesize: FloatFilter
  name: StringFilter
  description: StringFilter
  url: StringFilter
  createdById: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  createdBy: UserRelationFilter
}

input FileWhereUniqueInput {
  id: Int
  createdById: String
  AND: [FileWhereInput!]
  OR: [FileWhereInput!]
  NOT: [FileWhereInput!]
  fileType: EnumFileTypeFilter
  filesize: FloatFilter
  name: StringFilter
  description: StringFilter
  url: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  createdBy: UserRelationFilter
}

input FloatFieldUpdateOperationsInput {
  set: Float
  increment: Float
  decrement: Float
  multiply: Float
  divide: Float
}

input FloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatFilter
}

input FloatNullableFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatNullableFilter
}

type Hotel {
  id: Int!
  name: String!
  addressId: Int!
  description: String!
  rating: Float!
  startDate: DateTime!
  quota: Int!
  createdById: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  address: Address!
  images: [Images!]
  checkIns: [CheckIn!]
  createdBy: UserAbstract!
  _count: HotelCount!
}

type HotelAvgAggregate {
  id: Float
  addressId: Float
  rating: Float
  quota: Float
}

type HotelCount {
  images: Int!
  checkIns: Int!
}

type HotelCountAggregate {
  id: Int!
  name: Int!
  addressId: Int!
  description: Int!
  rating: Int!
  startDate: Int!
  quota: Int!
  createdById: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

input HotelCreateArgs {
  select: HotelSelect
  include: HotelSelect
  data: HotelCreateInput!
}

input HotelCreateInput {
  name: String!
  description: String!
  rating: Float!
  startDate: DateTime!
  quota: Int!
  address: AddressCreateNestedOneWithoutHotelInput!
  images: ImagesCreateNestedManyWithoutHotelImageInput
  createdBy: UserCreateNestedOneWithoutHotelsCreatedInput!
}

input HotelCreateManyCreatedByInput {
  name: String!
  description: String!
  rating: Float!
  startDate: DateTime!
  quota: Int!
}

input HotelCreateManyCreatedByInputEnvelope {
  data: [HotelCreateManyCreatedByInput!]!
  skipDuplicates: Boolean
}

input HotelCreateNestedOneWithoutCheckInsInput {
  create: HotelCreateWithoutCheckInsInput
  connectOrCreate: HotelCreateOrConnectWithoutCheckInsInput
  connect: HotelWhereUniqueInput
}

input HotelCreateOrConnectWithoutAddressInput {
  where: HotelWhereUniqueInput!
  create: HotelCreateWithoutAddressInput!
}

input HotelCreateOrConnectWithoutCheckInsInput {
  where: HotelWhereUniqueInput!
  create: HotelCreateWithoutCheckInsInput!
}

input HotelCreateOrConnectWithoutCreatedByInput {
  where: HotelWhereUniqueInput!
  create: HotelCreateWithoutCreatedByInput!
}

input HotelCreateOrConnectWithoutImagesInput {
  where: HotelWhereUniqueInput!
  create: HotelCreateWithoutImagesInput!
}

input HotelCreateWithoutAddressInput {
  name: String!
  description: String!
  rating: Float!
  startDate: DateTime!
  quota: Int!
  images: ImagesCreateNestedManyWithoutHotelImageInput
  createdBy: UserCreateNestedOneWithoutHotelsCreatedInput!
}

input HotelCreateWithoutCheckInsInput {
  name: String!
  description: String!
  rating: Float!
  startDate: DateTime!
  quota: Int!
  address: AddressCreateNestedOneWithoutHotelInput!
  images: ImagesCreateNestedManyWithoutHotelImageInput
  createdBy: UserCreateNestedOneWithoutHotelsCreatedInput!
}

input HotelCreateWithoutCreatedByInput {
  name: String!
  description: String!
  rating: Float!
  startDate: DateTime!
  quota: Int!
  address: AddressCreateNestedOneWithoutHotelInput!
  images: ImagesCreateNestedManyWithoutHotelImageInput
}

input HotelCreateWithoutImagesInput {
  name: String!
  description: String!
  rating: Float!
  startDate: DateTime!
  quota: Int!
  address: AddressCreateNestedOneWithoutHotelInput!
  createdBy: UserCreateNestedOneWithoutHotelsCreatedInput!
}

input HotelFindManyArgs {
  select: HotelSelect
  include: HotelSelect
  where: HotelWhereUniqueInput
  orderBy: [HotelOrderByWithRelationInput!]
  cursor: HotelWhereUniqueInput
  take: Int
  skip: Int
  distinct: [HotelScalarFieldEnum!]
}

input HotelFindUniqueArgs {
  select: HotelSelect
  include: HotelSelect
  where: HotelWhereUniqueInput!
}

input HotelListRelationFilter {
  every: HotelWhereInput
  some: HotelWhereInput
  none: HotelWhereInput
}

type HotelMaxAggregate {
  id: Int
  name: String
  addressId: Int
  description: String
  rating: Float
  startDate: DateTime
  quota: Int
  createdById: String
  createdAt: DateTime
  updatedAt: DateTime
}

type HotelMinAggregate {
  id: Int
  name: String
  addressId: Int
  description: String
  rating: Float
  startDate: DateTime
  quota: Int
  createdById: String
  createdAt: DateTime
  updatedAt: DateTime
}

input HotelNullableRelationFilter {
  is: HotelWhereInput
  isNot: HotelWhereInput
}

input HotelOrderByRelationAggregateInput {
  _count: SortOrder
}

input HotelOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  addressId: SortOrder
  description: SortOrder
  rating: SortOrder
  startDate: SortOrder
  quota: SortOrder
  createdById: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  address: AddressOrderByWithRelationInput
  images: ImagesOrderByRelationAggregateInput
  checkIns: CheckInOrderByRelationAggregateInput
  createdBy: UserOrderByWithRelationInput
}

input HotelRelationFilter {
  is: HotelWhereInput
  isNot: HotelWhereInput
}

enum HotelScalarFieldEnum {
  id
  name
  addressId
  description
  rating
  startDate
  quota
  createdById
  createdAt
  updatedAt
}

input HotelScalarWhereInput {
  AND: [HotelScalarWhereInput!]
  OR: [HotelScalarWhereInput!]
  NOT: [HotelScalarWhereInput!]
  id: IntFilter
  name: StringFilter
  addressId: IntFilter
  description: StringFilter
  rating: FloatFilter
  startDate: DateTimeFilter
  quota: IntFilter
  createdById: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input HotelSelect {
  id: Boolean
  name: Boolean
  addressId: Boolean
  description: Boolean
  rating: Boolean
  startDate: Boolean
  quota: Boolean
  createdById: Boolean
  createdAt: Boolean
  updatedAt: Boolean
  address: Boolean
  images: Boolean
  checkIns: Boolean
  createdBy: Boolean
  _count: Boolean
}

type HotelSumAggregate {
  id: Int
  addressId: Int
  rating: Float
  quota: Int
}

input HotelUpdateManyMutationInput {
  name: StringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  rating: FloatFieldUpdateOperationsInput
  startDate: DateTimeFieldUpdateOperationsInput
  quota: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input HotelUpdateManyWithoutCreatedByNestedInput {
  create: [HotelCreateWithoutCreatedByInput!]
  connectOrCreate: [HotelCreateOrConnectWithoutCreatedByInput!]
  upsert: [HotelUpsertWithWhereUniqueWithoutCreatedByInput!]
  createMany: HotelCreateManyCreatedByInputEnvelope
  set: [HotelWhereUniqueInput!]
  disconnect: [HotelWhereUniqueInput!]
  delete: [HotelWhereUniqueInput!]
  connect: [HotelWhereUniqueInput!]
  update: [HotelUpdateWithWhereUniqueWithoutCreatedByInput!]
  updateMany: [HotelUpdateManyWithWhereWithoutCreatedByInput!]
  deleteMany: [HotelScalarWhereInput!]
}

input HotelUpdateManyWithWhereWithoutCreatedByInput {
  where: HotelScalarWhereInput!
  data: HotelUpdateManyMutationInput!
}

input HotelUpdateOneRequiredWithoutCheckInsNestedInput {
  create: HotelCreateWithoutCheckInsInput
  connectOrCreate: HotelCreateOrConnectWithoutCheckInsInput
  upsert: HotelUpsertWithoutCheckInsInput
  connect: HotelWhereUniqueInput
  update: HotelUpdateToOneWithWhereWithoutCheckInsInput
}

input HotelUpdateOneWithoutAddressNestedInput {
  create: HotelCreateWithoutAddressInput
  connectOrCreate: HotelCreateOrConnectWithoutAddressInput
  upsert: HotelUpsertWithoutAddressInput
  disconnect: HotelWhereInput
  delete: HotelWhereInput
  connect: HotelWhereUniqueInput
  update: HotelUpdateToOneWithWhereWithoutAddressInput
}

input HotelUpdateOneWithoutImagesNestedInput {
  create: HotelCreateWithoutImagesInput
  connectOrCreate: HotelCreateOrConnectWithoutImagesInput
  upsert: HotelUpsertWithoutImagesInput
  disconnect: HotelWhereInput
  delete: HotelWhereInput
  connect: HotelWhereUniqueInput
  update: HotelUpdateToOneWithWhereWithoutImagesInput
}

input HotelUpdateToOneWithWhereWithoutAddressInput {
  where: HotelWhereInput
  data: HotelUpdateWithoutAddressInput!
}

input HotelUpdateToOneWithWhereWithoutCheckInsInput {
  where: HotelWhereInput
  data: HotelUpdateWithoutCheckInsInput!
}

input HotelUpdateToOneWithWhereWithoutImagesInput {
  where: HotelWhereInput
  data: HotelUpdateWithoutImagesInput!
}

input HotelUpdateWithoutAddressInput {
  name: StringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  rating: FloatFieldUpdateOperationsInput
  startDate: DateTimeFieldUpdateOperationsInput
  quota: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  images: ImagesUpdateManyWithoutHotelImageNestedInput
  checkIns: CheckInUpdateManyWithoutHotelNestedInput
  createdBy: UserUpdateOneRequiredWithoutHotelsCreatedNestedInput
}

input HotelUpdateWithoutCheckInsInput {
  name: StringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  rating: FloatFieldUpdateOperationsInput
  startDate: DateTimeFieldUpdateOperationsInput
  quota: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  address: AddressUpdateOneRequiredWithoutHotelNestedInput
  images: ImagesUpdateManyWithoutHotelImageNestedInput
  createdBy: UserUpdateOneRequiredWithoutHotelsCreatedNestedInput
}

input HotelUpdateWithoutCreatedByInput {
  name: StringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  rating: FloatFieldUpdateOperationsInput
  startDate: DateTimeFieldUpdateOperationsInput
  quota: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  address: AddressUpdateOneRequiredWithoutHotelNestedInput
  images: ImagesUpdateManyWithoutHotelImageNestedInput
  checkIns: CheckInUpdateManyWithoutHotelNestedInput
}

input HotelUpdateWithoutImagesInput {
  name: StringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  rating: FloatFieldUpdateOperationsInput
  startDate: DateTimeFieldUpdateOperationsInput
  quota: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  address: AddressUpdateOneRequiredWithoutHotelNestedInput
  checkIns: CheckInUpdateManyWithoutHotelNestedInput
  createdBy: UserUpdateOneRequiredWithoutHotelsCreatedNestedInput
}

input HotelUpdateWithWhereUniqueWithoutCreatedByInput {
  where: HotelWhereUniqueInput!
  data: HotelUpdateWithoutCreatedByInput!
}

input HotelUpsertWithoutAddressInput {
  update: HotelUpdateWithoutAddressInput!
  create: HotelCreateWithoutAddressInput!
  where: HotelWhereInput
}

input HotelUpsertWithoutCheckInsInput {
  update: HotelUpdateWithoutCheckInsInput!
  create: HotelCreateWithoutCheckInsInput!
  where: HotelWhereInput
}

input HotelUpsertWithoutImagesInput {
  update: HotelUpdateWithoutImagesInput!
  create: HotelCreateWithoutImagesInput!
  where: HotelWhereInput
}

input HotelUpsertWithWhereUniqueWithoutCreatedByInput {
  where: HotelWhereUniqueInput!
  update: HotelUpdateWithoutCreatedByInput!
  create: HotelCreateWithoutCreatedByInput!
}

input HotelWhereInput {
  AND: [HotelWhereInput!]
  OR: [HotelWhereInput!]
  NOT: [HotelWhereInput!]
  id: IntFilter
  name: StringFilter
  addressId: IntFilter
  description: StringFilter
  rating: FloatFilter
  startDate: DateTimeFilter
  quota: IntFilter
  createdById: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  address: AddressRelationFilter
  images: ImagesListRelationFilter
  checkIns: CheckInListRelationFilter
  createdBy: UserRelationFilter
}

input HotelWhereUniqueInput {
  id: Int
  addressId: Int
  AND: [HotelWhereInput!]
  OR: [HotelWhereInput!]
  NOT: [HotelWhereInput!]
  name: StringFilter
  description: StringFilter
  rating: FloatFilter
  startDate: DateTimeFilter
  quota: IntFilter
  createdById: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  address: AddressRelationFilter
  images: ImagesListRelationFilter
  checkIns: CheckInListRelationFilter
  createdBy: UserRelationFilter
}

type Images {
  id: Int!
  fileType: FileType!
  filesize: Float!
  url: String!
  hotelImageId: Int
  programImageId: Int
  rewardImageId: Int
  projectImageId: Int
  createdAt: DateTime!
  hotelImage: Hotel
  programImage: Program
  rewardImage: Reward
  projectImage: Project
}

type ImagesAvgAggregate {
  id: Float
  filesize: Float
  hotelImageId: Float
  programImageId: Float
  rewardImageId: Float
  projectImageId: Float
}

type ImagesCountAggregate {
  id: Int!
  fileType: Int!
  filesize: Int!
  url: Int!
  hotelImageId: Int!
  programImageId: Int!
  rewardImageId: Int!
  projectImageId: Int!
  createdAt: Int!
  _all: Int!
}

input ImagesCreateManyHotelImageInput {
  fileType: FileType!
  filesize: Float!
  url: String!
}

input ImagesCreateManyHotelImageInputEnvelope {
  data: [ImagesCreateManyHotelImageInput!]!
  skipDuplicates: Boolean
}

input ImagesCreateManyProgramImageInput {
  fileType: FileType!
  filesize: Float!
  url: String!
}

input ImagesCreateManyProgramImageInputEnvelope {
  data: [ImagesCreateManyProgramImageInput!]!
  skipDuplicates: Boolean
}

input ImagesCreateManyProjectImageInput {
  fileType: FileType!
  filesize: Float!
  url: String!
}

input ImagesCreateManyProjectImageInputEnvelope {
  data: [ImagesCreateManyProjectImageInput!]!
  skipDuplicates: Boolean
}

input ImagesCreateManyRewardImageInput {
  fileType: FileType!
  filesize: Float!
  url: String!
}

input ImagesCreateManyRewardImageInputEnvelope {
  data: [ImagesCreateManyRewardImageInput!]!
  skipDuplicates: Boolean
}

input ImagesCreateNestedManyWithoutHotelImageInput {
  create: [ImagesCreateWithoutHotelImageInput!]
  connectOrCreate: [ImagesCreateOrConnectWithoutHotelImageInput!]
  createMany: ImagesCreateManyHotelImageInputEnvelope
  connect: [ImagesWhereUniqueInput!]
}

input ImagesCreateNestedManyWithoutProgramImageInput {
  create: [ImagesCreateWithoutProgramImageInput!]
  connectOrCreate: [ImagesCreateOrConnectWithoutProgramImageInput!]
  createMany: ImagesCreateManyProgramImageInputEnvelope
  connect: [ImagesWhereUniqueInput!]
}

input ImagesCreateNestedManyWithoutProjectImageInput {
  create: [ImagesCreateWithoutProjectImageInput!]
  connectOrCreate: [ImagesCreateOrConnectWithoutProjectImageInput!]
  createMany: ImagesCreateManyProjectImageInputEnvelope
  connect: [ImagesWhereUniqueInput!]
}

input ImagesCreateNestedManyWithoutRewardImageInput {
  create: [ImagesCreateWithoutRewardImageInput!]
  connectOrCreate: [ImagesCreateOrConnectWithoutRewardImageInput!]
  createMany: ImagesCreateManyRewardImageInputEnvelope
  connect: [ImagesWhereUniqueInput!]
}

input ImagesCreateOrConnectWithoutHotelImageInput {
  where: ImagesWhereUniqueInput!
  create: ImagesCreateWithoutHotelImageInput!
}

input ImagesCreateOrConnectWithoutProgramImageInput {
  where: ImagesWhereUniqueInput!
  create: ImagesCreateWithoutProgramImageInput!
}

input ImagesCreateOrConnectWithoutProjectImageInput {
  where: ImagesWhereUniqueInput!
  create: ImagesCreateWithoutProjectImageInput!
}

input ImagesCreateOrConnectWithoutRewardImageInput {
  where: ImagesWhereUniqueInput!
  create: ImagesCreateWithoutRewardImageInput!
}

input ImagesCreateWithoutHotelImageInput {
  fileType: FileType!
  filesize: Float!
  url: String!
}

input ImagesCreateWithoutProgramImageInput {
  fileType: FileType!
  filesize: Float!
  url: String!
}

input ImagesCreateWithoutProjectImageInput {
  fileType: FileType!
  filesize: Float!
  url: String!
}

input ImagesCreateWithoutRewardImageInput {
  fileType: FileType!
  filesize: Float!
  url: String!
}

input ImagesListRelationFilter {
  every: ImagesWhereInput
  some: ImagesWhereInput
  none: ImagesWhereInput
}

type ImagesMaxAggregate {
  id: Int
  fileType: FileType
  filesize: Float
  url: String
  hotelImageId: Int
  programImageId: Int
  rewardImageId: Int
  projectImageId: Int
  createdAt: DateTime
}

type ImagesMinAggregate {
  id: Int
  fileType: FileType
  filesize: Float
  url: String
  hotelImageId: Int
  programImageId: Int
  rewardImageId: Int
  projectImageId: Int
  createdAt: DateTime
}

input ImagesOrderByRelationAggregateInput {
  _count: SortOrder
}

input ImagesScalarWhereInput {
  AND: [ImagesScalarWhereInput!]
  OR: [ImagesScalarWhereInput!]
  NOT: [ImagesScalarWhereInput!]
  id: IntFilter
  fileType: EnumFileTypeFilter
  filesize: FloatFilter
  url: StringFilter
  hotelImageId: IntNullableFilter
  programImageId: IntNullableFilter
  rewardImageId: IntNullableFilter
  projectImageId: IntNullableFilter
  createdAt: DateTimeFilter
}

type ImagesSumAggregate {
  id: Int
  filesize: Float
  hotelImageId: Int
  programImageId: Int
  rewardImageId: Int
  projectImageId: Int
}

input ImagesUpdateManyMutationInput {
  fileType: EnumFileTypeFieldUpdateOperationsInput
  filesize: FloatFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
}

input ImagesUpdateManyWithoutHotelImageNestedInput {
  create: [ImagesCreateWithoutHotelImageInput!]
  connectOrCreate: [ImagesCreateOrConnectWithoutHotelImageInput!]
  upsert: [ImagesUpsertWithWhereUniqueWithoutHotelImageInput!]
  createMany: ImagesCreateManyHotelImageInputEnvelope
  set: [ImagesWhereUniqueInput!]
  disconnect: [ImagesWhereUniqueInput!]
  delete: [ImagesWhereUniqueInput!]
  connect: [ImagesWhereUniqueInput!]
  update: [ImagesUpdateWithWhereUniqueWithoutHotelImageInput!]
  updateMany: [ImagesUpdateManyWithWhereWithoutHotelImageInput!]
  deleteMany: [ImagesScalarWhereInput!]
}

input ImagesUpdateManyWithoutProgramImageNestedInput {
  create: [ImagesCreateWithoutProgramImageInput!]
  connectOrCreate: [ImagesCreateOrConnectWithoutProgramImageInput!]
  upsert: [ImagesUpsertWithWhereUniqueWithoutProgramImageInput!]
  createMany: ImagesCreateManyProgramImageInputEnvelope
  set: [ImagesWhereUniqueInput!]
  disconnect: [ImagesWhereUniqueInput!]
  delete: [ImagesWhereUniqueInput!]
  connect: [ImagesWhereUniqueInput!]
  update: [ImagesUpdateWithWhereUniqueWithoutProgramImageInput!]
  updateMany: [ImagesUpdateManyWithWhereWithoutProgramImageInput!]
  deleteMany: [ImagesScalarWhereInput!]
}

input ImagesUpdateManyWithoutProjectImageNestedInput {
  create: [ImagesCreateWithoutProjectImageInput!]
  connectOrCreate: [ImagesCreateOrConnectWithoutProjectImageInput!]
  upsert: [ImagesUpsertWithWhereUniqueWithoutProjectImageInput!]
  createMany: ImagesCreateManyProjectImageInputEnvelope
  set: [ImagesWhereUniqueInput!]
  disconnect: [ImagesWhereUniqueInput!]
  delete: [ImagesWhereUniqueInput!]
  connect: [ImagesWhereUniqueInput!]
  update: [ImagesUpdateWithWhereUniqueWithoutProjectImageInput!]
  updateMany: [ImagesUpdateManyWithWhereWithoutProjectImageInput!]
  deleteMany: [ImagesScalarWhereInput!]
}

input ImagesUpdateManyWithoutRewardImageNestedInput {
  create: [ImagesCreateWithoutRewardImageInput!]
  connectOrCreate: [ImagesCreateOrConnectWithoutRewardImageInput!]
  upsert: [ImagesUpsertWithWhereUniqueWithoutRewardImageInput!]
  createMany: ImagesCreateManyRewardImageInputEnvelope
  set: [ImagesWhereUniqueInput!]
  disconnect: [ImagesWhereUniqueInput!]
  delete: [ImagesWhereUniqueInput!]
  connect: [ImagesWhereUniqueInput!]
  update: [ImagesUpdateWithWhereUniqueWithoutRewardImageInput!]
  updateMany: [ImagesUpdateManyWithWhereWithoutRewardImageInput!]
  deleteMany: [ImagesScalarWhereInput!]
}

input ImagesUpdateManyWithWhereWithoutHotelImageInput {
  where: ImagesScalarWhereInput!
  data: ImagesUpdateManyMutationInput!
}

input ImagesUpdateManyWithWhereWithoutProgramImageInput {
  where: ImagesScalarWhereInput!
  data: ImagesUpdateManyMutationInput!
}

input ImagesUpdateManyWithWhereWithoutProjectImageInput {
  where: ImagesScalarWhereInput!
  data: ImagesUpdateManyMutationInput!
}

input ImagesUpdateManyWithWhereWithoutRewardImageInput {
  where: ImagesScalarWhereInput!
  data: ImagesUpdateManyMutationInput!
}

input ImagesUpdateWithoutHotelImageInput {
  fileType: EnumFileTypeFieldUpdateOperationsInput
  filesize: FloatFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  programImage: ProgramUpdateOneWithoutImagesNestedInput
  rewardImage: RewardUpdateOneWithoutImagesNestedInput
  projectImage: ProjectUpdateOneWithoutImagesNestedInput
}

input ImagesUpdateWithoutProgramImageInput {
  fileType: EnumFileTypeFieldUpdateOperationsInput
  filesize: FloatFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  hotelImage: HotelUpdateOneWithoutImagesNestedInput
  rewardImage: RewardUpdateOneWithoutImagesNestedInput
  projectImage: ProjectUpdateOneWithoutImagesNestedInput
}

input ImagesUpdateWithoutProjectImageInput {
  fileType: EnumFileTypeFieldUpdateOperationsInput
  filesize: FloatFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  hotelImage: HotelUpdateOneWithoutImagesNestedInput
  programImage: ProgramUpdateOneWithoutImagesNestedInput
  rewardImage: RewardUpdateOneWithoutImagesNestedInput
}

input ImagesUpdateWithoutRewardImageInput {
  fileType: EnumFileTypeFieldUpdateOperationsInput
  filesize: FloatFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  hotelImage: HotelUpdateOneWithoutImagesNestedInput
  programImage: ProgramUpdateOneWithoutImagesNestedInput
  projectImage: ProjectUpdateOneWithoutImagesNestedInput
}

input ImagesUpdateWithWhereUniqueWithoutHotelImageInput {
  where: ImagesWhereUniqueInput!
  data: ImagesUpdateWithoutHotelImageInput!
}

input ImagesUpdateWithWhereUniqueWithoutProgramImageInput {
  where: ImagesWhereUniqueInput!
  data: ImagesUpdateWithoutProgramImageInput!
}

input ImagesUpdateWithWhereUniqueWithoutProjectImageInput {
  where: ImagesWhereUniqueInput!
  data: ImagesUpdateWithoutProjectImageInput!
}

input ImagesUpdateWithWhereUniqueWithoutRewardImageInput {
  where: ImagesWhereUniqueInput!
  data: ImagesUpdateWithoutRewardImageInput!
}

input ImagesUpsertWithWhereUniqueWithoutHotelImageInput {
  where: ImagesWhereUniqueInput!
  update: ImagesUpdateWithoutHotelImageInput!
  create: ImagesCreateWithoutHotelImageInput!
}

input ImagesUpsertWithWhereUniqueWithoutProgramImageInput {
  where: ImagesWhereUniqueInput!
  update: ImagesUpdateWithoutProgramImageInput!
  create: ImagesCreateWithoutProgramImageInput!
}

input ImagesUpsertWithWhereUniqueWithoutProjectImageInput {
  where: ImagesWhereUniqueInput!
  update: ImagesUpdateWithoutProjectImageInput!
  create: ImagesCreateWithoutProjectImageInput!
}

input ImagesUpsertWithWhereUniqueWithoutRewardImageInput {
  where: ImagesWhereUniqueInput!
  update: ImagesUpdateWithoutRewardImageInput!
  create: ImagesCreateWithoutRewardImageInput!
}

input ImagesWhereInput {
  AND: [ImagesWhereInput!]
  OR: [ImagesWhereInput!]
  NOT: [ImagesWhereInput!]
  id: IntFilter
  fileType: EnumFileTypeFilter
  filesize: FloatFilter
  url: StringFilter
  hotelImageId: IntNullableFilter
  programImageId: IntNullableFilter
  rewardImageId: IntNullableFilter
  projectImageId: IntNullableFilter
  createdAt: DateTimeFilter
  hotelImage: HotelNullableRelationFilter
  programImage: ProgramNullableRelationFilter
  rewardImage: RewardNullableRelationFilter
  projectImage: ProjectNullableRelationFilter
}

input ImagesWhereUniqueInput {
  id: Int
  AND: [ImagesWhereInput!]
  OR: [ImagesWhereInput!]
  NOT: [ImagesWhereInput!]
  fileType: EnumFileTypeFilter
  filesize: FloatFilter
  url: StringFilter
  hotelImageId: IntNullableFilter
  programImageId: IntNullableFilter
  rewardImageId: IntNullableFilter
  projectImageId: IntNullableFilter
  createdAt: DateTimeFilter
  hotelImage: HotelNullableRelationFilter
  programImage: ProgramNullableRelationFilter
  rewardImage: RewardNullableRelationFilter
  projectImage: ProjectNullableRelationFilter
}

type Installment {
  id: Int!
  number: Int!
  lateFee: Float!
  amount: Float!
  dueDate: DateTime!
  status: InstallmentStatus!
  transactionId: Int
  invoiceId: Int!
  transaction: Transaction
  invoice: Invoice!
}

type InstallmentAvgAggregate {
  id: Float
  number: Float
  lateFee: Float
  amount: Float
  transactionId: Float
  invoiceId: Float
}

type InstallmentCountAggregate {
  id: Int!
  number: Int!
  lateFee: Int!
  amount: Int!
  dueDate: Int!
  status: Int!
  transactionId: Int!
  invoiceId: Int!
  _all: Int!
}

input InstallmentCreateManyInvoiceInput {
  id: Int
  number: Int!
  lateFee: Float!
  amount: Float!
  dueDate: DateTime!
  status: InstallmentStatus!
  transactionId: Int
}

input InstallmentCreateManyInvoiceInputEnvelope {
  data: [InstallmentCreateManyInvoiceInput!]!
  skipDuplicates: Boolean
}

input InstallmentCreateNestedManyWithoutInvoiceInput {
  create: [InstallmentCreateWithoutInvoiceInput!]
  connectOrCreate: [InstallmentCreateOrConnectWithoutInvoiceInput!]
  createMany: InstallmentCreateManyInvoiceInputEnvelope
  connect: [InstallmentWhereUniqueInput!]
}

input InstallmentCreateNestedOneWithoutTransactionInput {
  create: InstallmentCreateWithoutTransactionInput
  connectOrCreate: InstallmentCreateOrConnectWithoutTransactionInput
  connect: InstallmentWhereUniqueInput
}

input InstallmentCreateOrConnectWithoutInvoiceInput {
  where: InstallmentWhereUniqueInput!
  create: InstallmentCreateWithoutInvoiceInput!
}

input InstallmentCreateOrConnectWithoutTransactionInput {
  where: InstallmentWhereUniqueInput!
  create: InstallmentCreateWithoutTransactionInput!
}

input InstallmentCreateWithoutInvoiceInput {
  number: Int!
  lateFee: Float!
  amount: Float!
  dueDate: DateTime!
  status: InstallmentStatus!
  transactionId: Int
  transaction: TransactionCreateNestedOneWithoutInstallmentInput
}

input InstallmentCreateWithoutTransactionInput {
  number: Int!
  lateFee: Float!
  amount: Float!
  dueDate: DateTime!
  status: InstallmentStatus!
  transactionId: Int
  invoice: InvoiceCreateNestedOneWithoutInstallmentsInput!
}

input InstallmentListRelationFilter {
  every: InstallmentWhereInput
  some: InstallmentWhereInput
  none: InstallmentWhereInput
}

type InstallmentMaxAggregate {
  id: Int
  number: Int
  lateFee: Float
  amount: Float
  dueDate: DateTime
  status: InstallmentStatus
  transactionId: Int
  invoiceId: Int
}

type InstallmentMinAggregate {
  id: Int
  number: Int
  lateFee: Float
  amount: Float
  dueDate: DateTime
  status: InstallmentStatus
  transactionId: Int
  invoiceId: Int
}

input InstallmentNullableRelationFilter {
  is: InstallmentWhereInput
  isNot: InstallmentWhereInput
}

input InstallmentOrderByRelationAggregateInput {
  _count: SortOrder
}

input InstallmentOrderByWithRelationInput {
  id: SortOrder
  number: SortOrder
  lateFee: SortOrder
  amount: SortOrder
  dueDate: SortOrder
  status: SortOrder
  transactionId: SortOrderInput
  invoiceId: SortOrder
  transaction: TransactionOrderByWithRelationInput
  invoice: InvoiceOrderByWithRelationInput
}

input InstallmentScalarWhereInput {
  AND: [InstallmentScalarWhereInput!]
  OR: [InstallmentScalarWhereInput!]
  NOT: [InstallmentScalarWhereInput!]
  id: IntFilter
  number: IntFilter
  lateFee: FloatFilter
  amount: FloatFilter
  dueDate: DateTimeFilter
  status: EnumInstallmentStatusFilter
  transactionId: IntNullableFilter
  invoiceId: IntFilter
}

enum InstallmentStatus {
  UPCOMING
  PAID
}

type InstallmentSumAggregate {
  id: Int
  number: Int
  lateFee: Float
  amount: Float
  transactionId: Int
  invoiceId: Int
}

input InstallmentUpdateManyMutationInput {
  number: IntFieldUpdateOperationsInput
  lateFee: FloatFieldUpdateOperationsInput
  amount: FloatFieldUpdateOperationsInput
  dueDate: DateTimeFieldUpdateOperationsInput
  status: EnumInstallmentStatusFieldUpdateOperationsInput
  transactionId: NullableIntFieldUpdateOperationsInput
}

input InstallmentUpdateManyWithoutInvoiceNestedInput {
  create: [InstallmentCreateWithoutInvoiceInput!]
  connectOrCreate: [InstallmentCreateOrConnectWithoutInvoiceInput!]
  upsert: [InstallmentUpsertWithWhereUniqueWithoutInvoiceInput!]
  createMany: InstallmentCreateManyInvoiceInputEnvelope
  set: [InstallmentWhereUniqueInput!]
  disconnect: [InstallmentWhereUniqueInput!]
  delete: [InstallmentWhereUniqueInput!]
  connect: [InstallmentWhereUniqueInput!]
  update: [InstallmentUpdateWithWhereUniqueWithoutInvoiceInput!]
  updateMany: [InstallmentUpdateManyWithWhereWithoutInvoiceInput!]
  deleteMany: [InstallmentScalarWhereInput!]
}

input InstallmentUpdateManyWithWhereWithoutInvoiceInput {
  where: InstallmentScalarWhereInput!
  data: InstallmentUpdateManyMutationInput!
}

input InstallmentUpdateOneWithoutTransactionNestedInput {
  create: InstallmentCreateWithoutTransactionInput
  connectOrCreate: InstallmentCreateOrConnectWithoutTransactionInput
  upsert: InstallmentUpsertWithoutTransactionInput
  disconnect: InstallmentWhereInput
  delete: InstallmentWhereInput
  connect: InstallmentWhereUniqueInput
  update: InstallmentUpdateToOneWithWhereWithoutTransactionInput
}

input InstallmentUpdateToOneWithWhereWithoutTransactionInput {
  where: InstallmentWhereInput
  data: InstallmentUpdateWithoutTransactionInput!
}

input InstallmentUpdateWithoutInvoiceInput {
  number: IntFieldUpdateOperationsInput
  lateFee: FloatFieldUpdateOperationsInput
  amount: FloatFieldUpdateOperationsInput
  dueDate: DateTimeFieldUpdateOperationsInput
  status: EnumInstallmentStatusFieldUpdateOperationsInput
  transactionId: NullableIntFieldUpdateOperationsInput
  transaction: TransactionUpdateOneWithoutInstallmentNestedInput
}

input InstallmentUpdateWithoutTransactionInput {
  number: IntFieldUpdateOperationsInput
  lateFee: FloatFieldUpdateOperationsInput
  amount: FloatFieldUpdateOperationsInput
  dueDate: DateTimeFieldUpdateOperationsInput
  status: EnumInstallmentStatusFieldUpdateOperationsInput
  transactionId: NullableIntFieldUpdateOperationsInput
  invoice: InvoiceUpdateOneRequiredWithoutInstallmentsNestedInput
}

input InstallmentUpdateWithWhereUniqueWithoutInvoiceInput {
  where: InstallmentWhereUniqueInput!
  data: InstallmentUpdateWithoutInvoiceInput!
}

input InstallmentUpsertWithoutTransactionInput {
  update: InstallmentUpdateWithoutTransactionInput!
  create: InstallmentCreateWithoutTransactionInput!
  where: InstallmentWhereInput
}

input InstallmentUpsertWithWhereUniqueWithoutInvoiceInput {
  where: InstallmentWhereUniqueInput!
  update: InstallmentUpdateWithoutInvoiceInput!
  create: InstallmentCreateWithoutInvoiceInput!
}

input InstallmentWhereInput {
  AND: [InstallmentWhereInput!]
  OR: [InstallmentWhereInput!]
  NOT: [InstallmentWhereInput!]
  id: IntFilter
  number: IntFilter
  lateFee: FloatFilter
  amount: FloatFilter
  dueDate: DateTimeFilter
  status: EnumInstallmentStatusFilter
  transactionId: IntNullableFilter
  invoiceId: IntFilter
  transaction: TransactionNullableRelationFilter
  invoice: InvoiceRelationFilter
}

input InstallmentWhereUniqueInput {
  id: Int
  AND: [InstallmentWhereInput!]
  OR: [InstallmentWhereInput!]
  NOT: [InstallmentWhereInput!]
  number: IntFilter
  lateFee: FloatFilter
  amount: FloatFilter
  dueDate: DateTimeFilter
  status: EnumInstallmentStatusFilter
  transactionId: IntNullableFilter
  invoiceId: IntFilter
  transaction: TransactionNullableRelationFilter
  invoice: InvoiceRelationFilter
}

input IntFieldUpdateOperationsInput {
  set: Int
  increment: Int
  decrement: Int
  multiply: Int
  divide: Int
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
}

type Invoice {
  id: Int!
  adminFee: Float!
  amount: Float!
  createdAt: DateTime!
  Order: Order
  transactions: [Transaction!]
  Installments: [Installment!]
  _count: InvoiceCount!
}

type InvoiceAvgAggregate {
  id: Float
  adminFee: Float
  amount: Float
}

type InvoiceCount {
  transactions: Int!
  Installments: Int!
}

type InvoiceCountAggregate {
  id: Int!
  adminFee: Int!
  amount: Int!
  createdAt: Int!
  _all: Int!
}

input InvoiceCreateNestedOneWithoutInstallmentsInput {
  create: InvoiceCreateWithoutInstallmentsInput
  connectOrCreate: InvoiceCreateOrConnectWithoutInstallmentsInput
  connect: InvoiceWhereUniqueInput
}

input InvoiceCreateNestedOneWithoutOrderInput {
  create: InvoiceCreateWithoutOrderInput
  connectOrCreate: InvoiceCreateOrConnectWithoutOrderInput
  connect: InvoiceWhereUniqueInput
}

input InvoiceCreateNestedOneWithoutTransactionsInput {
  create: InvoiceCreateWithoutTransactionsInput
  connectOrCreate: InvoiceCreateOrConnectWithoutTransactionsInput
  connect: InvoiceWhereUniqueInput
}

input InvoiceCreateOrConnectWithoutInstallmentsInput {
  where: InvoiceWhereUniqueInput!
  create: InvoiceCreateWithoutInstallmentsInput!
}

input InvoiceCreateOrConnectWithoutOrderInput {
  where: InvoiceWhereUniqueInput!
  create: InvoiceCreateWithoutOrderInput!
}

input InvoiceCreateOrConnectWithoutTransactionsInput {
  where: InvoiceWhereUniqueInput!
  create: InvoiceCreateWithoutTransactionsInput!
}

input InvoiceCreateWithoutInstallmentsInput {
  adminFee: Float!
  amount: Float!
  createdAt: DateTime
  Order: OrderCreateNestedOneWithoutInvoiceInput
  transactions: TransactionCreateNestedManyWithoutInvoiceInput
}

input InvoiceCreateWithoutOrderInput {
  adminFee: Float!
  amount: Float!
  createdAt: DateTime
  transactions: TransactionCreateNestedManyWithoutInvoiceInput
  Installments: InstallmentCreateNestedManyWithoutInvoiceInput
}

input InvoiceCreateWithoutTransactionsInput {
  adminFee: Float!
  amount: Float!
  createdAt: DateTime
  Order: OrderCreateNestedOneWithoutInvoiceInput
  Installments: InstallmentCreateNestedManyWithoutInvoiceInput
}

type InvoiceMaxAggregate {
  id: Int
  adminFee: Float
  amount: Float
  createdAt: DateTime
}

type InvoiceMinAggregate {
  id: Int
  adminFee: Float
  amount: Float
  createdAt: DateTime
}

input InvoiceNullableRelationFilter {
  is: InvoiceWhereInput
  isNot: InvoiceWhereInput
}

input InvoiceOrderByWithRelationInput {
  id: SortOrder
  adminFee: SortOrder
  amount: SortOrder
  createdAt: SortOrder
  Order: OrderOrderByWithRelationInput
  transactions: TransactionOrderByRelationAggregateInput
  Installments: InstallmentOrderByRelationAggregateInput
}

input InvoiceRelationFilter {
  is: InvoiceWhereInput
  isNot: InvoiceWhereInput
}

type InvoiceSumAggregate {
  id: Int
  adminFee: Float
  amount: Float
}

input InvoiceUpdateOneRequiredWithoutInstallmentsNestedInput {
  create: InvoiceCreateWithoutInstallmentsInput
  connectOrCreate: InvoiceCreateOrConnectWithoutInstallmentsInput
  upsert: InvoiceUpsertWithoutInstallmentsInput
  connect: InvoiceWhereUniqueInput
  update: InvoiceUpdateToOneWithWhereWithoutInstallmentsInput
}

input InvoiceUpdateOneRequiredWithoutOrderNestedInput {
  create: InvoiceCreateWithoutOrderInput
  connectOrCreate: InvoiceCreateOrConnectWithoutOrderInput
  upsert: InvoiceUpsertWithoutOrderInput
  connect: InvoiceWhereUniqueInput
  update: InvoiceUpdateToOneWithWhereWithoutOrderInput
}

input InvoiceUpdateOneWithoutTransactionsNestedInput {
  create: InvoiceCreateWithoutTransactionsInput
  connectOrCreate: InvoiceCreateOrConnectWithoutTransactionsInput
  upsert: InvoiceUpsertWithoutTransactionsInput
  disconnect: InvoiceWhereInput
  delete: InvoiceWhereInput
  connect: InvoiceWhereUniqueInput
  update: InvoiceUpdateToOneWithWhereWithoutTransactionsInput
}

input InvoiceUpdateToOneWithWhereWithoutInstallmentsInput {
  where: InvoiceWhereInput
  data: InvoiceUpdateWithoutInstallmentsInput!
}

input InvoiceUpdateToOneWithWhereWithoutOrderInput {
  where: InvoiceWhereInput
  data: InvoiceUpdateWithoutOrderInput!
}

input InvoiceUpdateToOneWithWhereWithoutTransactionsInput {
  where: InvoiceWhereInput
  data: InvoiceUpdateWithoutTransactionsInput!
}

input InvoiceUpdateWithoutInstallmentsInput {
  adminFee: FloatFieldUpdateOperationsInput
  amount: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  Order: OrderUpdateOneWithoutInvoiceNestedInput
  transactions: TransactionUpdateManyWithoutInvoiceNestedInput
}

input InvoiceUpdateWithoutOrderInput {
  adminFee: FloatFieldUpdateOperationsInput
  amount: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  transactions: TransactionUpdateManyWithoutInvoiceNestedInput
  Installments: InstallmentUpdateManyWithoutInvoiceNestedInput
}

input InvoiceUpdateWithoutTransactionsInput {
  adminFee: FloatFieldUpdateOperationsInput
  amount: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  Order: OrderUpdateOneWithoutInvoiceNestedInput
  Installments: InstallmentUpdateManyWithoutInvoiceNestedInput
}

input InvoiceUpsertWithoutInstallmentsInput {
  update: InvoiceUpdateWithoutInstallmentsInput!
  create: InvoiceCreateWithoutInstallmentsInput!
  where: InvoiceWhereInput
}

input InvoiceUpsertWithoutOrderInput {
  update: InvoiceUpdateWithoutOrderInput!
  create: InvoiceCreateWithoutOrderInput!
  where: InvoiceWhereInput
}

input InvoiceUpsertWithoutTransactionsInput {
  update: InvoiceUpdateWithoutTransactionsInput!
  create: InvoiceCreateWithoutTransactionsInput!
  where: InvoiceWhereInput
}

input InvoiceWhereInput {
  AND: [InvoiceWhereInput!]
  OR: [InvoiceWhereInput!]
  NOT: [InvoiceWhereInput!]
  id: IntFilter
  adminFee: FloatFilter
  amount: FloatFilter
  createdAt: DateTimeFilter
  Order: OrderNullableRelationFilter
  transactions: TransactionListRelationFilter
  Installments: InstallmentListRelationFilter
}

input InvoiceWhereUniqueInput {
  id: Int
  AND: [InvoiceWhereInput!]
  OR: [InvoiceWhereInput!]
  NOT: [InvoiceWhereInput!]
  adminFee: FloatFilter
  amount: FloatFilter
  createdAt: DateTimeFilter
  Order: OrderNullableRelationFilter
  transactions: TransactionListRelationFilter
  Installments: InstallmentListRelationFilter
}

type Item {
  id: Int!
  name: String!
  description: String!
  price: Float!
  cost: Float!
  userRole: UserRole!
  createdAt: DateTime!
  updatedAt: DateTime!
  cart: [Cart!]
  _count: ItemCount!
}

type ItemAvgAggregate {
  id: Float
  price: Float
  cost: Float
}

type ItemCount {
  cart: Int!
}

type ItemCountAggregate {
  id: Int!
  name: Int!
  description: Int!
  price: Int!
  cost: Int!
  userRole: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

input ItemCreateArgs {
  data: ItemCreateInput!
}

input ItemCreateInput {
  name: String!
  description: String!
  price: Float!
  cost: Float!
  userRole: UserRole!
  createdAt: DateTime
  updatedAt: DateTime
  cart: CartCreateNestedManyWithoutItemInput
}

input ItemCreateNestedOneWithoutCartInput {
  create: ItemCreateWithoutCartInput
  connectOrCreate: ItemCreateOrConnectWithoutCartInput
  connect: ItemWhereUniqueInput
}

input ItemCreateOrConnectWithoutCartInput {
  where: ItemWhereUniqueInput!
  create: ItemCreateWithoutCartInput!
}

input ItemCreateWithoutCartInput {
  name: String!
  description: String!
  price: Float!
  cost: Float!
  userRole: UserRole!
  createdAt: DateTime
  updatedAt: DateTime
}

input ItemFindManyArgs {
  where: ItemWhereInput
  orderBy: [ItemOrderByWithRelationInput!]
  take: Int
  skip: Int
  distinct: [ItemScalarFieldEnum!]
}

input ItemFindUniqueArgs {
  where: ItemWhereUniqueInput!
}

type ItemMaxAggregate {
  id: Int
  name: String
  description: String
  price: Float
  cost: Float
  userRole: UserRole
  createdAt: DateTime
  updatedAt: DateTime
}

type ItemMinAggregate {
  id: Int
  name: String
  description: String
  price: Float
  cost: Float
  userRole: UserRole
  createdAt: DateTime
  updatedAt: DateTime
}

input ItemOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  description: SortOrder
  price: SortOrder
  cost: SortOrder
  userRole: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  cart: CartOrderByRelationAggregateInput
}

input ItemRelationFilter {
  is: ItemWhereInput
  isNot: ItemWhereInput
}

enum ItemScalarFieldEnum {
  id
  name
  description
  price
  cost
  userRole
  createdAt
  updatedAt
}

type ItemSumAggregate {
  id: Int
  price: Float
  cost: Float
}

input ItemUpdateInput {
  name: StringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  price: FloatFieldUpdateOperationsInput
  cost: FloatFieldUpdateOperationsInput
  userRole: EnumUserRoleFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  cart: CartUpdateManyWithoutItemNestedInput
}

input ItemUpdateOneArgs {
  data: ItemUpdateInput!
  where: ItemWhereUniqueInput!
}

input ItemUpdateOneRequiredWithoutCartNestedInput {
  create: ItemCreateWithoutCartInput
  connectOrCreate: ItemCreateOrConnectWithoutCartInput
  upsert: ItemUpsertWithoutCartInput
  connect: ItemWhereUniqueInput
  update: ItemUpdateToOneWithWhereWithoutCartInput
}

input ItemUpdateToOneWithWhereWithoutCartInput {
  where: ItemWhereInput
  data: ItemUpdateWithoutCartInput!
}

input ItemUpdateWithoutCartInput {
  name: StringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  price: FloatFieldUpdateOperationsInput
  cost: FloatFieldUpdateOperationsInput
  userRole: EnumUserRoleFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ItemUpsertWithoutCartInput {
  update: ItemUpdateWithoutCartInput!
  create: ItemCreateWithoutCartInput!
  where: ItemWhereInput
}

input ItemWhereInput {
  AND: [ItemWhereInput!]
  OR: [ItemWhereInput!]
  NOT: [ItemWhereInput!]
  id: IntFilter
  name: StringFilter
  description: StringFilter
  price: FloatFilter
  cost: FloatFilter
  userRole: EnumUserRoleFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  cart: CartListRelationFilter
}

input ItemWhereUniqueInput {
  id: Int
  AND: [ItemWhereInput!]
  OR: [ItemWhereInput!]
  NOT: [ItemWhereInput!]
  name: StringFilter
  description: StringFilter
  price: FloatFilter
  cost: FloatFilter
  userRole: EnumUserRoleFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  cart: CartListRelationFilter
}

type Mutation {
  """Deskripsinya ada disini loh"""
  userCreateOne(userCreateArgs: UserCreateArgs!): User

  """Deskripsinya ada disini loh"""
  userUpdateOne(userUpdateOneArgs: UserUpdateOneArgs!): User!

  """
  Hanya berupa softdelete, artinya semua data tetap ada di database. field
  deleteAt pada entitas user akan terisi. select: { id: true, firstName: true,
  deletedAt: true }
  """
  userRemove(userId: String!): User

  """Deskripsinya ada disini loh"""
  itemCreateOne(itemCreateArgs: ItemCreateArgs!): Item

  """Deskripsinya ada disini loh"""
  itemUpdateOne(itemUpdateOneArgs: ItemUpdateOneArgs!): Item!

  """Datanya benar2 terhapus dari db"""
  itemRemove(itemId: Float!): Boolean
  hotelCreate(hotelCreateArgs: HotelCreateArgs!): Hotel!
  removeHotel(id: Int!): Hotel!
  createAuth(createAuthInput: CreateAuthInput!): Auth!
  resetPassword(email: String!): Auth!
  removeAuth(id: Int!): Auth!

  """Deskripsinya ada disini loh"""
  programCreateOne(programCreateArgs: ProgramCreateArgs!): Program

  """Deskripsinya ada disini loh"""
  programUpdateOne(programUpdateOneArgs: ProgramUpdateOneArgs!): Program!

  """Datanya benar2 terhapus dari db"""
  programRemove(programId: Float!): Boolean

  """Deskripsinya ada disini loh"""
  programCategoryCreateOne(programCategoryCreateArgs: ProgramCategoryCreateArgs!): ProgramCategory

  """Deskripsinya ada disini loh"""
  programCategoryUpdateOne(programCategoryUpdateOneArgs: ProgramCategoryUpdateOneArgs!): ProgramCategory!

  """Datanya benar2 terhapus dari db"""
  programCategoryRemove(programCategoryId: Float!): Boolean

  """Deskripsinya ada disini loh"""
  rewardCreateOne(rewardCreateArgs: RewardCreateArgs!): Reward

  """
  Deskripsinya ada disini loh, Jika tentang mutasi klaim reward, backend akan cek apakah saldo point user cukup untuk claim
  """
  rewardUpdateOne(rewardUpdateOneArgs: RewardUpdateOneArgs!): Reward!

  """Datanya benar2 terhapus dari db"""
  rewardRemove(rewardId: Float!): Boolean

  """Deskripsinya ada disini loh"""
  pointTransactionCreateOne(pointTransactionCreateArgs: PointTransactionCreateArgs!): PointTransaction

  """Deskripsinya ada disini loh"""
  fileCreateOne(fileCreateArgs: FileCreateArgs!): File

  """Deskripsinya ada disini loh"""
  fileUpdateOne(fileUpdateOneArgs: FileUpdateOneArgs!): File!

  """Datanya benar2 terhapus dari db"""
  fileRemove(fileId: Float!): Boolean

  """Deskripsinya ada disini loh"""
  faqCreateOne(faqCreateArgs: FaqCreateArgs!): Faq

  """Deskripsinya ada disini loh"""
  faqUpdateOne(faqUpdateOneArgs: FaqUpdateOneArgs!): Faq!

  """Datanya benar2 terhapus dari db"""
  faqRemove(faqId: Float!): Boolean

  """Deskripsinya ada disini loh"""
  projectCreateOne(projectCreateArgs: ProjectCreateArgs!): Project

  """Deskripsinya ada disini loh"""
  projectUpdateOne(projectUpdateOneArgs: ProjectUpdateOneArgs!): Project!

  """Datanya benar2 terhapus dari db"""
  projectRemove(projectId: Float!): Boolean

  """Deskripsinya ada disini loh"""
  shippingCreateOne(shippingCreateArgs: ShippingCreateArgs!): Shipping

  """Deskripsinya ada disini loh"""
  shippingUpdateOne(shippingUpdateOneArgs: ShippingUpdateOneArgs!): Shipping!

  """Datanya benar2 terhapus dari db"""
  shippingRemove(shippingId: Float!): Boolean

  """Deskripsinya ada disini loh"""
  checkInCreateOne(checkInCreateArgs: CheckInCreateArgs!): CheckIn

  """Deskripsinya ada disini loh"""
  checkInUpdateOne(checkInUpdateOneArgs: CheckInUpdateOneArgs!): CheckIn!

  """Datanya benar2 terhapus dari db"""
  checkInRemove(checkInId: Float!): Boolean

  """Deskripsinya ada disini loh"""
  userNotificationCreateOne(userNotificationCreateArgs: UserNotificationCreateArgs!): UserNotification

  """Deskripsinya ada disini loh"""
  userNotificationUpdateOne(userNotificationUpdateOneArgs: UserNotificationUpdateOneArgs!): UserNotification!

  """Datanya benar2 terhapus dari db"""
  userNotificationRemove(userNotificationId: Float!): Boolean

  """Deskripsinya ada disini loh"""
  accountUpdateOne(accountUpdateOneArgs: AccountUpdateOneArgs!): Account!

  """Deskripsinya ada disini loh"""
  schoolCreateOne(schoolCreateArgs: SchoolCreateArgs!): School

  """Deskripsinya ada disini loh"""
  schoolUpdateOne(schoolUpdateOneArgs: SchoolUpdateOneArgs!): School!

  """Datanya benar2 terhapus dari db"""
  schoolRemove(schoolId: Float!): Boolean

  """Deskripsinya ada disini loh"""
  addressCreateOne(addressCreateArgs: AddressCreateArgs!): Address

  """Deskripsinya ada disini loh"""
  addressUpdateOne(addressUpdateOneArgs: AddressUpdateOneArgs!): Address!

  """Datanya benar2 terhapus dari db"""
  addressRemove(addressId: Float!): Boolean

  """Deskripsinya ada disini loh"""
  orderUpdateOne(orderUpdateOneArgs: OrderUpdateOneArgs!): Order!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeNullableFilter
}

input NestedEnumAccountCategoryFilter {
  equals: AccountCategory
  in: [AccountCategory!]
  notIn: [AccountCategory!]
  not: NestedEnumAccountCategoryFilter
}

input NestedEnumFaqTypeFilter {
  equals: FaqType
  in: [FaqType!]
  notIn: [FaqType!]
  not: NestedEnumFaqTypeFilter
}

input NestedEnumFileTypeFilter {
  equals: FileType
  in: [FileType!]
  notIn: [FileType!]
  not: NestedEnumFileTypeFilter
}

input NestedEnumInstallmentStatusFilter {
  equals: InstallmentStatus
  in: [InstallmentStatus!]
  notIn: [InstallmentStatus!]
  not: NestedEnumInstallmentStatusFilter
}

input NestedEnumPointTypeFilter {
  equals: PointType
  in: [PointType!]
  notIn: [PointType!]
  not: NestedEnumPointTypeFilter
}

input NestedEnumProjectCategoryFilter {
  equals: ProjectCategory
  in: [ProjectCategory!]
  notIn: [ProjectCategory!]
  not: NestedEnumProjectCategoryFilter
}

input NestedEnumShippingStatusFilter {
  equals: ShippingStatus
  in: [ShippingStatus!]
  notIn: [ShippingStatus!]
  not: NestedEnumShippingStatusFilter
}

input NestedEnumThemeFilter {
  equals: Theme
  in: [Theme!]
  notIn: [Theme!]
  not: NestedEnumThemeFilter
}

input NestedEnumTransactionCategoryFilter {
  equals: TransactionCategory
  in: [TransactionCategory!]
  notIn: [TransactionCategory!]
  not: NestedEnumTransactionCategoryFilter
}

input NestedEnumTransactionStatusFilter {
  equals: TransactionStatus
  in: [TransactionStatus!]
  notIn: [TransactionStatus!]
  not: NestedEnumTransactionStatusFilter
}

input NestedEnumTransactionTypeFilter {
  equals: TransactionType
  in: [TransactionType!]
  notIn: [TransactionType!]
  not: NestedEnumTransactionTypeFilter
}

input NestedEnumUserNotificationCategoryFilter {
  equals: UserNotificationCategory
  in: [UserNotificationCategory!]
  notIn: [UserNotificationCategory!]
  not: NestedEnumUserNotificationCategoryFilter
}

input NestedEnumUserRoleFilter {
  equals: UserRole
  in: [UserRole!]
  notIn: [UserRole!]
  not: NestedEnumUserRoleFilter
}

input NestedEnumUserStatusFilter {
  equals: UserStatus
  in: [UserStatus!]
  notIn: [UserStatus!]
  not: NestedEnumUserStatusFilter
}

input NestedEnumUserTypeFilter {
  equals: UserType
  in: [UserType!]
  notIn: [UserType!]
  not: NestedEnumUserTypeFilter
}

input NestedFloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatFilter
}

input NestedFloatNullableFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatNullableFilter
}

input NestedIntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input NestedIntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input NullableFloatFieldUpdateOperationsInput {
  set: Float
  increment: Float
  decrement: Float
  multiply: Float
  divide: Float
}

input NullableIntFieldUpdateOperationsInput {
  set: Int
  increment: Int
  decrement: Int
  multiply: Int
  divide: Int
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

enum NullsOrder {
  first
  last
}

type Order {
  id: Int!
  status: TransactionStatus!
  orderById: String!
  shippingId: Int
  invoiceId: Int!
  platformFee: Float!
  total: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  orderBy: UserAbstract!
  cart: [Cart!]
  shipping: Shipping
  invoice: Invoice!
  _count: OrderCount!
}

type OrderAvgAggregate {
  id: Float
  shippingId: Float
  invoiceId: Float
  platformFee: Float
  total: Float
}

type OrderCount {
  cart: Int!
}

type OrderCountAggregate {
  id: Int!
  status: Int!
  orderById: Int!
  shippingId: Int!
  invoiceId: Int!
  platformFee: Int!
  total: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

input OrderCreateManyOrderByInput {
  id: Int
  status: TransactionStatus!
  shippingId: Int
  invoiceId: Int!
  platformFee: Float!
  total: Float!
  createdAt: DateTime
  updatedAt: DateTime
}

input OrderCreateManyOrderByInputEnvelope {
  data: [OrderCreateManyOrderByInput!]!
  skipDuplicates: Boolean
}

input OrderCreateNestedManyWithoutOrderByInput {
  create: [OrderCreateWithoutOrderByInput!]
  connectOrCreate: [OrderCreateOrConnectWithoutOrderByInput!]
  createMany: OrderCreateManyOrderByInputEnvelope
  connect: [OrderWhereUniqueInput!]
}

input OrderCreateNestedOneWithoutCartInput {
  create: OrderCreateWithoutCartInput
  connectOrCreate: OrderCreateOrConnectWithoutCartInput
  connect: OrderWhereUniqueInput
}

input OrderCreateNestedOneWithoutInvoiceInput {
  create: OrderCreateWithoutInvoiceInput
  connectOrCreate: OrderCreateOrConnectWithoutInvoiceInput
  connect: OrderWhereUniqueInput
}

input OrderCreateNestedOneWithoutShippingInput {
  create: OrderCreateWithoutShippingInput
  connectOrCreate: OrderCreateOrConnectWithoutShippingInput
  connect: OrderWhereUniqueInput
}

input OrderCreateOrConnectWithoutCartInput {
  where: OrderWhereUniqueInput!
  create: OrderCreateWithoutCartInput!
}

input OrderCreateOrConnectWithoutInvoiceInput {
  where: OrderWhereUniqueInput!
  create: OrderCreateWithoutInvoiceInput!
}

input OrderCreateOrConnectWithoutOrderByInput {
  where: OrderWhereUniqueInput!
  create: OrderCreateWithoutOrderByInput!
}

input OrderCreateOrConnectWithoutShippingInput {
  where: OrderWhereUniqueInput!
  create: OrderCreateWithoutShippingInput!
}

input OrderCreateWithoutCartInput {
  status: TransactionStatus!
  shippingId: Int
  platformFee: Float!
  total: Float!
  createdAt: DateTime
  updatedAt: DateTime
  orderBy: UserCreateNestedOneWithoutOrdersInput!
  shipping: ShippingCreateNestedOneWithoutOrderInput
  invoice: InvoiceCreateNestedOneWithoutOrderInput!
}

input OrderCreateWithoutInvoiceInput {
  status: TransactionStatus!
  shippingId: Int
  platformFee: Float!
  total: Float!
  createdAt: DateTime
  updatedAt: DateTime
  orderBy: UserCreateNestedOneWithoutOrdersInput!
  cart: CartCreateNestedManyWithoutOrderInput
  shipping: ShippingCreateNestedOneWithoutOrderInput
}

input OrderCreateWithoutOrderByInput {
  status: TransactionStatus!
  shippingId: Int
  platformFee: Float!
  total: Float!
  createdAt: DateTime
  updatedAt: DateTime
  cart: CartCreateNestedManyWithoutOrderInput
  shipping: ShippingCreateNestedOneWithoutOrderInput
  invoice: InvoiceCreateNestedOneWithoutOrderInput!
}

input OrderCreateWithoutShippingInput {
  status: TransactionStatus!
  shippingId: Int
  platformFee: Float!
  total: Float!
  createdAt: DateTime
  updatedAt: DateTime
  orderBy: UserCreateNestedOneWithoutOrdersInput!
  cart: CartCreateNestedManyWithoutOrderInput
  invoice: InvoiceCreateNestedOneWithoutOrderInput!
}

input OrderFindManyArgs {
  where: OrderWhereInput
  orderBy: [OrderOrderByWithRelationInput!]
  take: Int
  skip: Int
  distinct: [OrderScalarFieldEnum!]
}

input OrderFindUniqueArgs {
  where: OrderWhereUniqueInput!
}

input OrderListRelationFilter {
  every: OrderWhereInput
  some: OrderWhereInput
  none: OrderWhereInput
}

type OrderMaxAggregate {
  id: Int
  status: TransactionStatus
  orderById: String
  shippingId: Int
  invoiceId: Int
  platformFee: Float
  total: Float
  createdAt: DateTime
  updatedAt: DateTime
}

type OrderMinAggregate {
  id: Int
  status: TransactionStatus
  orderById: String
  shippingId: Int
  invoiceId: Int
  platformFee: Float
  total: Float
  createdAt: DateTime
  updatedAt: DateTime
}

input OrderNullableRelationFilter {
  is: OrderWhereInput
  isNot: OrderWhereInput
}

input OrderOrderByRelationAggregateInput {
  _count: SortOrder
}

input OrderOrderByWithRelationInput {
  id: SortOrder
  status: SortOrder
  orderById: SortOrder
  shippingId: SortOrderInput
  invoiceId: SortOrder
  platformFee: SortOrder
  total: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  orderBy: UserOrderByWithRelationInput
  cart: CartOrderByRelationAggregateInput
  shipping: ShippingOrderByWithRelationInput
  invoice: InvoiceOrderByWithRelationInput
}

input OrderRelationFilter {
  is: OrderWhereInput
  isNot: OrderWhereInput
}

enum OrderScalarFieldEnum {
  id
  status
  orderById
  shippingId
  invoiceId
  platformFee
  total
  createdAt
  updatedAt
}

input OrderScalarWhereInput {
  AND: [OrderScalarWhereInput!]
  OR: [OrderScalarWhereInput!]
  NOT: [OrderScalarWhereInput!]
  id: IntFilter
  status: EnumTransactionStatusFilter
  orderById: StringFilter
  shippingId: IntNullableFilter
  invoiceId: IntFilter
  platformFee: FloatFilter
  total: FloatFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

type OrderSumAggregate {
  id: Int
  shippingId: Int
  invoiceId: Int
  platformFee: Float
  total: Float
}

input OrderUpdateInput {
  status: EnumTransactionStatusFieldUpdateOperationsInput
  shippingId: NullableIntFieldUpdateOperationsInput
  platformFee: FloatFieldUpdateOperationsInput
  total: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  orderBy: UserUpdateOneRequiredWithoutOrdersNestedInput
  cart: CartUpdateManyWithoutOrderNestedInput
  shipping: ShippingUpdateOneWithoutOrderNestedInput
  invoice: InvoiceUpdateOneRequiredWithoutOrderNestedInput
}

input OrderUpdateManyMutationInput {
  status: EnumTransactionStatusFieldUpdateOperationsInput
  shippingId: NullableIntFieldUpdateOperationsInput
  platformFee: FloatFieldUpdateOperationsInput
  total: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input OrderUpdateManyWithoutOrderByNestedInput {
  create: [OrderCreateWithoutOrderByInput!]
  connectOrCreate: [OrderCreateOrConnectWithoutOrderByInput!]
  upsert: [OrderUpsertWithWhereUniqueWithoutOrderByInput!]
  createMany: OrderCreateManyOrderByInputEnvelope
  set: [OrderWhereUniqueInput!]
  disconnect: [OrderWhereUniqueInput!]
  delete: [OrderWhereUniqueInput!]
  connect: [OrderWhereUniqueInput!]
  update: [OrderUpdateWithWhereUniqueWithoutOrderByInput!]
  updateMany: [OrderUpdateManyWithWhereWithoutOrderByInput!]
  deleteMany: [OrderScalarWhereInput!]
}

input OrderUpdateManyWithWhereWithoutOrderByInput {
  where: OrderScalarWhereInput!
  data: OrderUpdateManyMutationInput!
}

input OrderUpdateOneArgs {
  data: OrderUpdateInput!
  where: OrderWhereUniqueInput!
}

input OrderUpdateOneRequiredWithoutCartNestedInput {
  create: OrderCreateWithoutCartInput
  connectOrCreate: OrderCreateOrConnectWithoutCartInput
  upsert: OrderUpsertWithoutCartInput
  connect: OrderWhereUniqueInput
  update: OrderUpdateToOneWithWhereWithoutCartInput
}

input OrderUpdateOneRequiredWithoutShippingNestedInput {
  create: OrderCreateWithoutShippingInput
  connectOrCreate: OrderCreateOrConnectWithoutShippingInput
  upsert: OrderUpsertWithoutShippingInput
  connect: OrderWhereUniqueInput
  update: OrderUpdateToOneWithWhereWithoutShippingInput
}

input OrderUpdateOneWithoutInvoiceNestedInput {
  create: OrderCreateWithoutInvoiceInput
  connectOrCreate: OrderCreateOrConnectWithoutInvoiceInput
  upsert: OrderUpsertWithoutInvoiceInput
  disconnect: OrderWhereInput
  delete: OrderWhereInput
  connect: OrderWhereUniqueInput
  update: OrderUpdateToOneWithWhereWithoutInvoiceInput
}

input OrderUpdateToOneWithWhereWithoutCartInput {
  where: OrderWhereInput
  data: OrderUpdateWithoutCartInput!
}

input OrderUpdateToOneWithWhereWithoutInvoiceInput {
  where: OrderWhereInput
  data: OrderUpdateWithoutInvoiceInput!
}

input OrderUpdateToOneWithWhereWithoutShippingInput {
  where: OrderWhereInput
  data: OrderUpdateWithoutShippingInput!
}

input OrderUpdateWithoutCartInput {
  status: EnumTransactionStatusFieldUpdateOperationsInput
  shippingId: NullableIntFieldUpdateOperationsInput
  platformFee: FloatFieldUpdateOperationsInput
  total: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  orderBy: UserUpdateOneRequiredWithoutOrdersNestedInput
  shipping: ShippingUpdateOneWithoutOrderNestedInput
  invoice: InvoiceUpdateOneRequiredWithoutOrderNestedInput
}

input OrderUpdateWithoutInvoiceInput {
  status: EnumTransactionStatusFieldUpdateOperationsInput
  shippingId: NullableIntFieldUpdateOperationsInput
  platformFee: FloatFieldUpdateOperationsInput
  total: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  orderBy: UserUpdateOneRequiredWithoutOrdersNestedInput
  cart: CartUpdateManyWithoutOrderNestedInput
  shipping: ShippingUpdateOneWithoutOrderNestedInput
}

input OrderUpdateWithoutOrderByInput {
  status: EnumTransactionStatusFieldUpdateOperationsInput
  shippingId: NullableIntFieldUpdateOperationsInput
  platformFee: FloatFieldUpdateOperationsInput
  total: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  cart: CartUpdateManyWithoutOrderNestedInput
  shipping: ShippingUpdateOneWithoutOrderNestedInput
  invoice: InvoiceUpdateOneRequiredWithoutOrderNestedInput
}

input OrderUpdateWithoutShippingInput {
  status: EnumTransactionStatusFieldUpdateOperationsInput
  shippingId: NullableIntFieldUpdateOperationsInput
  platformFee: FloatFieldUpdateOperationsInput
  total: FloatFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  orderBy: UserUpdateOneRequiredWithoutOrdersNestedInput
  cart: CartUpdateManyWithoutOrderNestedInput
  invoice: InvoiceUpdateOneRequiredWithoutOrderNestedInput
}

input OrderUpdateWithWhereUniqueWithoutOrderByInput {
  where: OrderWhereUniqueInput!
  data: OrderUpdateWithoutOrderByInput!
}

input OrderUpsertWithoutCartInput {
  update: OrderUpdateWithoutCartInput!
  create: OrderCreateWithoutCartInput!
  where: OrderWhereInput
}

input OrderUpsertWithoutInvoiceInput {
  update: OrderUpdateWithoutInvoiceInput!
  create: OrderCreateWithoutInvoiceInput!
  where: OrderWhereInput
}

input OrderUpsertWithoutShippingInput {
  update: OrderUpdateWithoutShippingInput!
  create: OrderCreateWithoutShippingInput!
  where: OrderWhereInput
}

input OrderUpsertWithWhereUniqueWithoutOrderByInput {
  where: OrderWhereUniqueInput!
  update: OrderUpdateWithoutOrderByInput!
  create: OrderCreateWithoutOrderByInput!
}

input OrderWhereInput {
  AND: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  NOT: [OrderWhereInput!]
  id: IntFilter
  status: EnumTransactionStatusFilter
  orderById: StringFilter
  shippingId: IntNullableFilter
  invoiceId: IntFilter
  platformFee: FloatFilter
  total: FloatFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  orderBy: UserRelationFilter
  cart: CartListRelationFilter
  shipping: ShippingNullableRelationFilter
  invoice: InvoiceRelationFilter
}

input OrderWhereUniqueInput {
  id: Int
  orderById: String
  invoiceId: Int
  AND: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  NOT: [OrderWhereInput!]
  status: EnumTransactionStatusFilter
  shippingId: IntNullableFilter
  platformFee: FloatFilter
  total: FloatFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  orderBy: UserRelationFilter
  cart: CartListRelationFilter
  shipping: ShippingNullableRelationFilter
  invoice: InvoiceRelationFilter
}

"""Period options for data retrieval"""
enum Period {
  WEEKLY
  MONTHLY
  YEARLY
}

type PointTransaction {
  id: Int!
  amount: Float!
  pointType: PointType!
  transactionType: TransactionType!
  currentBalance: Float!
  userId: String!
  createdAt: DateTime!
  User: UserAbstract!
}

type PointTransactionAvgAggregate {
  id: Float
  amount: Float
  currentBalance: Float
}

type PointTransactionCountAggregate {
  id: Int!
  amount: Int!
  pointType: Int!
  transactionType: Int!
  currentBalance: Int!
  userId: Int!
  createdAt: Int!
  _all: Int!
}

input PointTransactionCreateArgs {
  data: PointTransactionCreateInput!
}

input PointTransactionCreateInput {
  amount: Float!
  pointType: PointType!
  transactionType: TransactionType!
  currentBalance: Float
  createdAt: DateTime
  User: UserCreateNestedOneWithoutPointTransactionsInput!
}

input PointTransactionFindFirstArgs {
  where: PointTransactionWhereInput
  orderBy: [PointTransactionOrderByWithRelationInput!]
  take: Int
  skip: Int
  distinct: [PointTransactionScalarFieldEnum!]
}

input PointTransactionFindManyArgs {
  where: PointTransactionWhereInput
  orderBy: [PointTransactionOrderByWithRelationInput!]
  take: Int
  skip: Int
  distinct: [PointTransactionScalarFieldEnum!]
}

input PointTransactionFindUniqueArgs {
  where: PointTransactionWhereUniqueInput!
}

type PointTransactionMaxAggregate {
  id: Int
  amount: Float
  pointType: PointType
  transactionType: TransactionType
  currentBalance: Float
  userId: String
  createdAt: DateTime
}

type PointTransactionMinAggregate {
  id: Int
  amount: Float
  pointType: PointType
  transactionType: TransactionType
  currentBalance: Float
  userId: String
  createdAt: DateTime
}

input PointTransactionOrderByWithRelationInput {
  id: SortOrder
  amount: SortOrder
  pointType: SortOrder
  transactionType: SortOrder
  currentBalance: SortOrder
  userId: SortOrder
  createdAt: SortOrder
  User: UserOrderByWithRelationInput
}

enum PointTransactionScalarFieldEnum {
  id
  amount
  pointType
  transactionType
  currentBalance
  userId
  createdAt
}

type PointTransactionSumAggregate {
  id: Int
  amount: Float
  currentBalance: Float
}

input PointTransactionWhereInput {
  AND: [PointTransactionWhereInput!]
  OR: [PointTransactionWhereInput!]
  NOT: [PointTransactionWhereInput!]
  id: IntFilter
  amount: FloatFilter
  pointType: EnumPointTypeFilter
  transactionType: EnumTransactionTypeFilter
  currentBalance: FloatFilter
  userId: StringFilter
  createdAt: DateTimeFilter
  User: UserRelationFilter
}

input PointTransactionWhereUniqueInput {
  id: Int
  AND: [PointTransactionWhereInput!]
  OR: [PointTransactionWhereInput!]
  NOT: [PointTransactionWhereInput!]
  amount: FloatFilter
  pointType: EnumPointTypeFilter
  transactionType: EnumTransactionTypeFilter
  currentBalance: FloatFilter
  userId: StringFilter
  createdAt: DateTimeFilter
  User: UserRelationFilter
}

enum PointType {
  REFERRING
  REDEEMING
}

type PostalCode {
  id: Int!
  code: Int!
  _count: PostalCodeCount!
}

type PostalCodeAvgAggregate {
  id: Float
  code: Float
}

type PostalCodeCount {
  address: Int!
}

type PostalCodeCountAggregate {
  id: Int!
  code: Int!
  _all: Int!
}

input PostalCodeCreateNestedOneWithoutAddressInput {
  create: PostalCodeCreateWithoutAddressInput
  connectOrCreate: PostalCodeCreateOrConnectWithoutAddressInput
  connect: PostalCodeWhereUniqueInput
}

input PostalCodeCreateOrConnectWithoutAddressInput {
  where: PostalCodeWhereUniqueInput!
  create: PostalCodeCreateWithoutAddressInput!
}

input PostalCodeCreateWithoutAddressInput {
  code: Int!
}

type PostalCodeMaxAggregate {
  id: Int
  code: Int
}

type PostalCodeMinAggregate {
  id: Int
  code: Int
}

input PostalCodeOrderByWithRelationInput {
  id: SortOrder
  code: SortOrder
  address: AddressOrderByRelationAggregateInput
}

input PostalCodeRelationFilter {
  is: PostalCodeWhereInput
  isNot: PostalCodeWhereInput
}

type PostalCodeSumAggregate {
  id: Int
  code: Int
}

input PostalCodeUpdateOneRequiredWithoutAddressNestedInput {
  create: PostalCodeCreateWithoutAddressInput
  connectOrCreate: PostalCodeCreateOrConnectWithoutAddressInput
  upsert: PostalCodeUpsertWithoutAddressInput
  connect: PostalCodeWhereUniqueInput
  update: PostalCodeUpdateToOneWithWhereWithoutAddressInput
}

input PostalCodeUpdateToOneWithWhereWithoutAddressInput {
  where: PostalCodeWhereInput
  data: PostalCodeUpdateWithoutAddressInput!
}

input PostalCodeUpdateWithoutAddressInput {
  code: IntFieldUpdateOperationsInput
}

input PostalCodeUpsertWithoutAddressInput {
  update: PostalCodeUpdateWithoutAddressInput!
  create: PostalCodeCreateWithoutAddressInput!
  where: PostalCodeWhereInput
}

input PostalCodeWhereInput {
  AND: [PostalCodeWhereInput!]
  OR: [PostalCodeWhereInput!]
  NOT: [PostalCodeWhereInput!]
  id: IntFilter
  code: IntFilter
  address: AddressListRelationFilter
}

input PostalCodeWhereUniqueInput {
  id: Int
  code: Int
  AND: [PostalCodeWhereInput!]
  OR: [PostalCodeWhereInput!]
  NOT: [PostalCodeWhereInput!]
  address: AddressListRelationFilter
}

type Program {
  id: Int!
  name: String!
  startDate: DateTime!
  dueDate: DateTime
  description: String!
  createdById: String!
  categoryId: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  Images: [Images!]
  createdBy: UserAbstract!
  participant: [UserAbstract!]
  category: ProgramCategory!
  _count: ProgramCount!
}

type ProgramAvgAggregate {
  id: Float
  categoryId: Float
}

type ProgramCategory {
  id: Int!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  programs: [Program!]
  _count: ProgramCategoryCount!
}

type ProgramCategoryAvgAggregate {
  id: Float
}

type ProgramCategoryCount {
  programs: Int!
}

type ProgramCategoryCountAggregate {
  id: Int!
  name: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

input ProgramCategoryCreateArgs {
  data: ProgramCategoryCreateInput!
}

input ProgramCategoryCreateInput {
  name: String!
  programs: ProgramCreateNestedManyWithoutCategoryInput
}

input ProgramCategoryCreateNestedOneWithoutProgramsInput {
  create: ProgramCategoryCreateWithoutProgramsInput
  connectOrCreate: ProgramCategoryCreateOrConnectWithoutProgramsInput
  connect: ProgramCategoryWhereUniqueInput
}

input ProgramCategoryCreateOrConnectWithoutProgramsInput {
  where: ProgramCategoryWhereUniqueInput!
  create: ProgramCategoryCreateWithoutProgramsInput!
}

input ProgramCategoryCreateWithoutProgramsInput {
  name: String!
}

input ProgramCategoryFindManyArgs {
  where: ProgramCategoryWhereInput
  orderBy: [ProgramCategoryOrderByWithRelationInput!]
  take: Int
  skip: Int
  distinct: [ProgramCategoryScalarFieldEnum!]
}

input ProgramCategoryFindUniqueArgs {
  where: ProgramCategoryWhereUniqueInput!
}

type ProgramCategoryMaxAggregate {
  id: Int
  name: String
  createdAt: DateTime
  updatedAt: DateTime
}

type ProgramCategoryMinAggregate {
  id: Int
  name: String
  createdAt: DateTime
  updatedAt: DateTime
}

input ProgramCategoryOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  programs: ProgramOrderByRelationAggregateInput
}

input ProgramCategoryRelationFilter {
  is: ProgramCategoryWhereInput
  isNot: ProgramCategoryWhereInput
}

enum ProgramCategoryScalarFieldEnum {
  id
  name
  createdAt
  updatedAt
}

type ProgramCategorySumAggregate {
  id: Int
}

input ProgramCategoryUpdateInput {
  name: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  programs: ProgramUpdateManyWithoutCategoryNestedInput
}

input ProgramCategoryUpdateOneArgs {
  data: ProgramCategoryUpdateInput!
  where: ProgramCategoryWhereUniqueInput!
}

input ProgramCategoryUpdateOneRequiredWithoutProgramsNestedInput {
  create: ProgramCategoryCreateWithoutProgramsInput
  connectOrCreate: ProgramCategoryCreateOrConnectWithoutProgramsInput
  upsert: ProgramCategoryUpsertWithoutProgramsInput
  connect: ProgramCategoryWhereUniqueInput
  update: ProgramCategoryUpdateToOneWithWhereWithoutProgramsInput
}

input ProgramCategoryUpdateToOneWithWhereWithoutProgramsInput {
  where: ProgramCategoryWhereInput
  data: ProgramCategoryUpdateWithoutProgramsInput!
}

input ProgramCategoryUpdateWithoutProgramsInput {
  name: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProgramCategoryUpsertWithoutProgramsInput {
  update: ProgramCategoryUpdateWithoutProgramsInput!
  create: ProgramCategoryCreateWithoutProgramsInput!
  where: ProgramCategoryWhereInput
}

input ProgramCategoryWhereInput {
  AND: [ProgramCategoryWhereInput!]
  OR: [ProgramCategoryWhereInput!]
  NOT: [ProgramCategoryWhereInput!]
  id: IntFilter
  name: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  programs: ProgramListRelationFilter
}

input ProgramCategoryWhereUniqueInput {
  id: Int
  AND: [ProgramCategoryWhereInput!]
  OR: [ProgramCategoryWhereInput!]
  NOT: [ProgramCategoryWhereInput!]
  name: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  programs: ProgramListRelationFilter
}

type ProgramCount {
  Images: Int!
  participant: Int!
}

type ProgramCountAggregate {
  id: Int!
  name: Int!
  startDate: Int!
  dueDate: Int!
  description: Int!
  createdById: Int!
  categoryId: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

input ProgramCreateArgs {
  data: ProgramCreateInput!
}

input ProgramCreateInput {
  name: String!
  startDate: DateTime!
  dueDate: DateTime
  description: String!
  Images: ImagesCreateNestedManyWithoutProgramImageInput
  createdBy: UserCreateNestedOneWithoutProgramsCreatedInput!
  category: ProgramCategoryCreateNestedOneWithoutProgramsInput!
}

input ProgramCreateManyCategoryInput {
  name: String!
  startDate: DateTime!
  dueDate: DateTime
  description: String!
  createdById: String!
}

input ProgramCreateManyCategoryInputEnvelope {
  data: [ProgramCreateManyCategoryInput!]!
  skipDuplicates: Boolean
}

input ProgramCreateManyCreatedByInput {
  name: String!
  startDate: DateTime!
  dueDate: DateTime
  description: String!
}

input ProgramCreateManyCreatedByInputEnvelope {
  data: [ProgramCreateManyCreatedByInput!]!
  skipDuplicates: Boolean
}

input ProgramCreateNestedManyWithoutCategoryInput {
  create: [ProgramCreateWithoutCategoryInput!]
  connectOrCreate: [ProgramCreateOrConnectWithoutCategoryInput!]
  createMany: ProgramCreateManyCategoryInputEnvelope
  connect: [ProgramWhereUniqueInput!]
}

input ProgramCreateOrConnectWithoutCategoryInput {
  where: ProgramWhereUniqueInput!
  create: ProgramCreateWithoutCategoryInput!
}

input ProgramCreateOrConnectWithoutCreatedByInput {
  where: ProgramWhereUniqueInput!
  create: ProgramCreateWithoutCreatedByInput!
}

input ProgramCreateOrConnectWithoutImagesInput {
  where: ProgramWhereUniqueInput!
  create: ProgramCreateWithoutImagesInput!
}

input ProgramCreateWithoutCategoryInput {
  name: String!
  startDate: DateTime!
  dueDate: DateTime
  description: String!
  Images: ImagesCreateNestedManyWithoutProgramImageInput
  createdBy: UserCreateNestedOneWithoutProgramsCreatedInput!
}

input ProgramCreateWithoutCreatedByInput {
  name: String!
  startDate: DateTime!
  dueDate: DateTime
  description: String!
  Images: ImagesCreateNestedManyWithoutProgramImageInput
  category: ProgramCategoryCreateNestedOneWithoutProgramsInput!
}

input ProgramCreateWithoutImagesInput {
  name: String!
  startDate: DateTime!
  dueDate: DateTime
  description: String!
  createdBy: UserCreateNestedOneWithoutProgramsCreatedInput!
  category: ProgramCategoryCreateNestedOneWithoutProgramsInput!
}

input ProgramFindManyArgs {
  where: ProgramWhereInput
  orderBy: [ProgramOrderByWithRelationInput!]
  cursor: ProgramWhereUniqueInput
  take: Int
  skip: Int
  distinct: [ProgramScalarFieldEnum!]
}

input ProgramFindUniqueArgs {
  where: ProgramWhereUniqueInput!
}

input ProgramListRelationFilter {
  every: ProgramWhereInput
  some: ProgramWhereInput
  none: ProgramWhereInput
}

type ProgramMaxAggregate {
  id: Int
  name: String
  startDate: DateTime
  dueDate: DateTime
  description: String
  createdById: String
  categoryId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type ProgramMinAggregate {
  id: Int
  name: String
  startDate: DateTime
  dueDate: DateTime
  description: String
  createdById: String
  categoryId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

input ProgramNullableRelationFilter {
  is: ProgramWhereInput
  isNot: ProgramWhereInput
}

input ProgramOrderByRelationAggregateInput {
  _count: SortOrder
}

input ProgramOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  startDate: SortOrder
  dueDate: SortOrderInput
  description: SortOrder
  createdById: SortOrder
  categoryId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  Images: ImagesOrderByRelationAggregateInput
  createdBy: UserOrderByWithRelationInput
  participant: UserOrderByRelationAggregateInput
  category: ProgramCategoryOrderByWithRelationInput
}

enum ProgramScalarFieldEnum {
  id
  name
  startDate
  dueDate
  description
  createdById
  categoryId
  createdAt
  updatedAt
}

input ProgramScalarWhereInput {
  AND: [ProgramScalarWhereInput!]
  OR: [ProgramScalarWhereInput!]
  NOT: [ProgramScalarWhereInput!]
  id: IntFilter
  name: StringFilter
  startDate: DateTimeFilter
  dueDate: DateTimeNullableFilter
  description: StringFilter
  createdById: StringFilter
  categoryId: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

type ProgramSumAggregate {
  id: Int
  categoryId: Int
}

input ProgramUpdateInput {
  name: StringFieldUpdateOperationsInput
  startDate: DateTimeFieldUpdateOperationsInput
  dueDate: NullableDateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Images: ImagesUpdateManyWithoutProgramImageNestedInput
  createdBy: UserUpdateOneRequiredWithoutProgramsCreatedNestedInput
  participant: UserUpdateManyWithoutProgramsParticipationNestedInput
  category: ProgramCategoryUpdateOneRequiredWithoutProgramsNestedInput
}

input ProgramUpdateManyMutationInput {
  name: StringFieldUpdateOperationsInput
  startDate: DateTimeFieldUpdateOperationsInput
  dueDate: NullableDateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProgramUpdateManyWithoutCategoryNestedInput {
  create: [ProgramCreateWithoutCategoryInput!]
  connectOrCreate: [ProgramCreateOrConnectWithoutCategoryInput!]
  upsert: [ProgramUpsertWithWhereUniqueWithoutCategoryInput!]
  createMany: ProgramCreateManyCategoryInputEnvelope
  set: [ProgramWhereUniqueInput!]
  disconnect: [ProgramWhereUniqueInput!]
  delete: [ProgramWhereUniqueInput!]
  connect: [ProgramWhereUniqueInput!]
  update: [ProgramUpdateWithWhereUniqueWithoutCategoryInput!]
  updateMany: [ProgramUpdateManyWithWhereWithoutCategoryInput!]
  deleteMany: [ProgramScalarWhereInput!]
}

input ProgramUpdateManyWithoutCreatedByNestedInput {
  create: [ProgramCreateWithoutCreatedByInput!]
  connectOrCreate: [ProgramCreateOrConnectWithoutCreatedByInput!]
  upsert: [ProgramUpsertWithWhereUniqueWithoutCreatedByInput!]
  createMany: ProgramCreateManyCreatedByInputEnvelope
  set: [ProgramWhereUniqueInput!]
  disconnect: [ProgramWhereUniqueInput!]
  delete: [ProgramWhereUniqueInput!]
  connect: [ProgramWhereUniqueInput!]
  update: [ProgramUpdateWithWhereUniqueWithoutCreatedByInput!]
  updateMany: [ProgramUpdateManyWithWhereWithoutCreatedByInput!]
  deleteMany: [ProgramScalarWhereInput!]
}

input ProgramUpdateManyWithWhereWithoutCategoryInput {
  where: ProgramScalarWhereInput!
  data: ProgramUpdateManyMutationInput!
}

input ProgramUpdateManyWithWhereWithoutCreatedByInput {
  where: ProgramScalarWhereInput!
  data: ProgramUpdateManyMutationInput!
}

input ProgramUpdateOneArgs {
  data: ProgramUpdateInput!
  where: ProgramWhereUniqueInput!
}

input ProgramUpdateOneWithoutImagesNestedInput {
  create: ProgramCreateWithoutImagesInput
  connectOrCreate: ProgramCreateOrConnectWithoutImagesInput
  upsert: ProgramUpsertWithoutImagesInput
  disconnect: ProgramWhereInput
  delete: ProgramWhereInput
  connect: ProgramWhereUniqueInput
  update: ProgramUpdateToOneWithWhereWithoutImagesInput
}

input ProgramUpdateToOneWithWhereWithoutImagesInput {
  where: ProgramWhereInput
  data: ProgramUpdateWithoutImagesInput!
}

input ProgramUpdateWithoutCategoryInput {
  name: StringFieldUpdateOperationsInput
  startDate: DateTimeFieldUpdateOperationsInput
  dueDate: NullableDateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Images: ImagesUpdateManyWithoutProgramImageNestedInput
  createdBy: UserUpdateOneRequiredWithoutProgramsCreatedNestedInput
  participant: UserUpdateManyWithoutProgramsParticipationNestedInput
}

input ProgramUpdateWithoutCreatedByInput {
  name: StringFieldUpdateOperationsInput
  startDate: DateTimeFieldUpdateOperationsInput
  dueDate: NullableDateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Images: ImagesUpdateManyWithoutProgramImageNestedInput
  participant: UserUpdateManyWithoutProgramsParticipationNestedInput
  category: ProgramCategoryUpdateOneRequiredWithoutProgramsNestedInput
}

input ProgramUpdateWithoutImagesInput {
  name: StringFieldUpdateOperationsInput
  startDate: DateTimeFieldUpdateOperationsInput
  dueDate: NullableDateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  createdBy: UserUpdateOneRequiredWithoutProgramsCreatedNestedInput
  participant: UserUpdateManyWithoutProgramsParticipationNestedInput
  category: ProgramCategoryUpdateOneRequiredWithoutProgramsNestedInput
}

input ProgramUpdateWithWhereUniqueWithoutCategoryInput {
  where: ProgramWhereUniqueInput!
  data: ProgramUpdateWithoutCategoryInput!
}

input ProgramUpdateWithWhereUniqueWithoutCreatedByInput {
  where: ProgramWhereUniqueInput!
  data: ProgramUpdateWithoutCreatedByInput!
}

input ProgramUpsertWithoutImagesInput {
  update: ProgramUpdateWithoutImagesInput!
  create: ProgramCreateWithoutImagesInput!
  where: ProgramWhereInput
}

input ProgramUpsertWithWhereUniqueWithoutCategoryInput {
  where: ProgramWhereUniqueInput!
  update: ProgramUpdateWithoutCategoryInput!
  create: ProgramCreateWithoutCategoryInput!
}

input ProgramUpsertWithWhereUniqueWithoutCreatedByInput {
  where: ProgramWhereUniqueInput!
  update: ProgramUpdateWithoutCreatedByInput!
  create: ProgramCreateWithoutCreatedByInput!
}

input ProgramWhereInput {
  AND: [ProgramWhereInput!]
  OR: [ProgramWhereInput!]
  NOT: [ProgramWhereInput!]
  id: IntFilter
  name: StringFilter
  startDate: DateTimeFilter
  dueDate: DateTimeNullableFilter
  description: StringFilter
  createdById: StringFilter
  categoryId: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  Images: ImagesListRelationFilter
  createdBy: UserRelationFilter
  participant: UserListRelationFilter
  category: ProgramCategoryRelationFilter
}

input ProgramWhereUniqueInput {
  id: Int
  AND: [ProgramWhereInput!]
  OR: [ProgramWhereInput!]
  NOT: [ProgramWhereInput!]
  name: StringFilter
  startDate: DateTimeFilter
  dueDate: DateTimeNullableFilter
  description: StringFilter
  createdById: StringFilter
  categoryId: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  Images: ImagesListRelationFilter
  createdBy: UserRelationFilter
  participant: UserListRelationFilter
  category: ProgramCategoryRelationFilter
}

type Project {
  id: Int!
  name: String!
  description: String!
  projectCategory: ProjectCategory!
  startDate: DateTime!
  endDate: DateTime!
  returnRate: Float!
  goalAmount: Int!
  currentAmount: Float!
  minimumInvestment: Int!
  maxInvestor: Int!
  accountId: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  images: [Images!]
  investors: [UserAbstract!]
  account: Account!
  _count: ProjectCount!
}

type ProjectAvgAggregate {
  id: Float
  returnRate: Float
  goalAmount: Float
  currentAmount: Float
  minimumInvestment: Float
  maxInvestor: Float
  accountId: Float
}

enum ProjectCategory {
  PROPERTY
  BUSSINESS
}

type ProjectCount {
  images: Int!
  investors: Int!
}

type ProjectCountAggregate {
  id: Int!
  name: Int!
  description: Int!
  projectCategory: Int!
  startDate: Int!
  endDate: Int!
  returnRate: Int!
  goalAmount: Int!
  currentAmount: Int!
  minimumInvestment: Int!
  maxInvestor: Int!
  accountId: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

input ProjectCreateArgs {
  data: ProjectCreateInput!
}

input ProjectCreateInput {
  name: String!
  description: String!
  projectCategory: ProjectCategory!
  startDate: DateTime!
  endDate: DateTime!
  returnRate: Float!
  goalAmount: Int!
  currentAmount: Float!
  minimumInvestment: Int!
  maxInvestor: Int!
  createdAt: DateTime
  updatedAt: DateTime
  images: ImagesCreateNestedManyWithoutProjectImageInput
  investors: UserCreateNestedManyWithoutProjectsInvestmentInput
  account: AccountCreateNestedOneWithoutProjectInput!
}

input ProjectCreateNestedOneWithoutAccountInput {
  create: ProjectCreateWithoutAccountInput
  connectOrCreate: ProjectCreateOrConnectWithoutAccountInput
  connect: ProjectWhereUniqueInput
}

input ProjectCreateOrConnectWithoutAccountInput {
  where: ProjectWhereUniqueInput!
  create: ProjectCreateWithoutAccountInput!
}

input ProjectCreateOrConnectWithoutImagesInput {
  where: ProjectWhereUniqueInput!
  create: ProjectCreateWithoutImagesInput!
}

input ProjectCreateWithoutAccountInput {
  name: String!
  description: String!
  projectCategory: ProjectCategory!
  startDate: DateTime!
  endDate: DateTime!
  returnRate: Float!
  goalAmount: Int!
  currentAmount: Float!
  minimumInvestment: Int!
  maxInvestor: Int!
  createdAt: DateTime
  updatedAt: DateTime
  images: ImagesCreateNestedManyWithoutProjectImageInput
  investors: UserCreateNestedManyWithoutProjectsInvestmentInput
}

input ProjectCreateWithoutImagesInput {
  name: String!
  description: String!
  projectCategory: ProjectCategory!
  startDate: DateTime!
  endDate: DateTime!
  returnRate: Float!
  goalAmount: Int!
  currentAmount: Float!
  minimumInvestment: Int!
  maxInvestor: Int!
  createdAt: DateTime
  updatedAt: DateTime
  investors: UserCreateNestedManyWithoutProjectsInvestmentInput
  account: AccountCreateNestedOneWithoutProjectInput!
}

input ProjectFindManyArgs {
  where: ProjectWhereInput
  orderBy: [ProjectOrderByWithRelationInput!]
  take: Int
  skip: Int
  distinct: [ProjectScalarFieldEnum!]
}

input ProjectFindUniqueArgs {
  where: ProjectWhereUniqueInput!
}

type ProjectMaxAggregate {
  id: Int
  name: String
  description: String
  projectCategory: ProjectCategory
  startDate: DateTime
  endDate: DateTime
  returnRate: Float
  goalAmount: Int
  currentAmount: Float
  minimumInvestment: Int
  maxInvestor: Int
  accountId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type ProjectMinAggregate {
  id: Int
  name: String
  description: String
  projectCategory: ProjectCategory
  startDate: DateTime
  endDate: DateTime
  returnRate: Float
  goalAmount: Int
  currentAmount: Float
  minimumInvestment: Int
  maxInvestor: Int
  accountId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

input ProjectNullableRelationFilter {
  is: ProjectWhereInput
  isNot: ProjectWhereInput
}

input ProjectOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  description: SortOrder
  projectCategory: SortOrder
  startDate: SortOrder
  endDate: SortOrder
  returnRate: SortOrder
  goalAmount: SortOrder
  currentAmount: SortOrder
  minimumInvestment: SortOrder
  maxInvestor: SortOrder
  accountId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  images: ImagesOrderByRelationAggregateInput
  investors: UserOrderByRelationAggregateInput
  account: AccountOrderByWithRelationInput
}

enum ProjectScalarFieldEnum {
  id
  name
  description
  projectCategory
  startDate
  endDate
  returnRate
  goalAmount
  currentAmount
  minimumInvestment
  maxInvestor
  accountId
  createdAt
  updatedAt
}

type ProjectSumAggregate {
  id: Int
  returnRate: Float
  goalAmount: Int
  currentAmount: Float
  minimumInvestment: Int
  maxInvestor: Int
  accountId: Int
}

input ProjectUpdateInput {
  name: StringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  projectCategory: EnumProjectCategoryFieldUpdateOperationsInput
  startDate: DateTimeFieldUpdateOperationsInput
  endDate: DateTimeFieldUpdateOperationsInput
  returnRate: FloatFieldUpdateOperationsInput
  goalAmount: IntFieldUpdateOperationsInput
  currentAmount: FloatFieldUpdateOperationsInput
  minimumInvestment: IntFieldUpdateOperationsInput
  maxInvestor: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  images: ImagesUpdateManyWithoutProjectImageNestedInput
  investors: UserUpdateManyWithoutProjectsInvestmentNestedInput
  account: AccountUpdateOneRequiredWithoutProjectNestedInput
}

input ProjectUpdateOneArgs {
  data: ProjectUpdateInput!
  where: ProjectWhereUniqueInput!
}

input ProjectUpdateOneWithoutAccountNestedInput {
  create: ProjectCreateWithoutAccountInput
  connectOrCreate: ProjectCreateOrConnectWithoutAccountInput
  upsert: ProjectUpsertWithoutAccountInput
  disconnect: ProjectWhereInput
  delete: ProjectWhereInput
  connect: ProjectWhereUniqueInput
  update: ProjectUpdateToOneWithWhereWithoutAccountInput
}

input ProjectUpdateOneWithoutImagesNestedInput {
  create: ProjectCreateWithoutImagesInput
  connectOrCreate: ProjectCreateOrConnectWithoutImagesInput
  upsert: ProjectUpsertWithoutImagesInput
  disconnect: ProjectWhereInput
  delete: ProjectWhereInput
  connect: ProjectWhereUniqueInput
  update: ProjectUpdateToOneWithWhereWithoutImagesInput
}

input ProjectUpdateToOneWithWhereWithoutAccountInput {
  where: ProjectWhereInput
  data: ProjectUpdateWithoutAccountInput!
}

input ProjectUpdateToOneWithWhereWithoutImagesInput {
  where: ProjectWhereInput
  data: ProjectUpdateWithoutImagesInput!
}

input ProjectUpdateWithoutAccountInput {
  name: StringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  projectCategory: EnumProjectCategoryFieldUpdateOperationsInput
  startDate: DateTimeFieldUpdateOperationsInput
  endDate: DateTimeFieldUpdateOperationsInput
  returnRate: FloatFieldUpdateOperationsInput
  goalAmount: IntFieldUpdateOperationsInput
  currentAmount: FloatFieldUpdateOperationsInput
  minimumInvestment: IntFieldUpdateOperationsInput
  maxInvestor: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  images: ImagesUpdateManyWithoutProjectImageNestedInput
  investors: UserUpdateManyWithoutProjectsInvestmentNestedInput
}

input ProjectUpdateWithoutImagesInput {
  name: StringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  projectCategory: EnumProjectCategoryFieldUpdateOperationsInput
  startDate: DateTimeFieldUpdateOperationsInput
  endDate: DateTimeFieldUpdateOperationsInput
  returnRate: FloatFieldUpdateOperationsInput
  goalAmount: IntFieldUpdateOperationsInput
  currentAmount: FloatFieldUpdateOperationsInput
  minimumInvestment: IntFieldUpdateOperationsInput
  maxInvestor: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  investors: UserUpdateManyWithoutProjectsInvestmentNestedInput
  account: AccountUpdateOneRequiredWithoutProjectNestedInput
}

input ProjectUpsertWithoutAccountInput {
  update: ProjectUpdateWithoutAccountInput!
  create: ProjectCreateWithoutAccountInput!
  where: ProjectWhereInput
}

input ProjectUpsertWithoutImagesInput {
  update: ProjectUpdateWithoutImagesInput!
  create: ProjectCreateWithoutImagesInput!
  where: ProjectWhereInput
}

input ProjectWhereInput {
  AND: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
  id: IntFilter
  name: StringFilter
  description: StringFilter
  projectCategory: EnumProjectCategoryFilter
  startDate: DateTimeFilter
  endDate: DateTimeFilter
  returnRate: FloatFilter
  goalAmount: IntFilter
  currentAmount: FloatFilter
  minimumInvestment: IntFilter
  maxInvestor: IntFilter
  accountId: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  images: ImagesListRelationFilter
  investors: UserListRelationFilter
  account: AccountRelationFilter
}

input ProjectWhereUniqueInput {
  id: Int
  accountId: Int
  AND: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
  name: StringFilter
  description: StringFilter
  projectCategory: EnumProjectCategoryFilter
  startDate: DateTimeFilter
  endDate: DateTimeFilter
  returnRate: FloatFilter
  goalAmount: IntFilter
  currentAmount: FloatFilter
  minimumInvestment: IntFilter
  maxInvestor: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  images: ImagesListRelationFilter
  investors: UserListRelationFilter
  account: AccountRelationFilter
}

type Query {
  """Deskripsinya ada disini loh"""
  userFindMany(userFindManyArgs: UserFindManyArgs!): [User!]

  """Deskripsinya ada disini loh"""
  userFindOne(userFindUniqueArgs: UserFindUniqueArgs!): User

  """Deskripsinya ada disini loh"""
  userCount(userFindManyArgs: UserFindManyArgs): Int!

  """Deskripsinya ada disini loh"""
  itemFindMany(itemFindManyArgs: ItemFindManyArgs!): [Item!]

  """Deskripsinya ada disini loh"""
  itemFindOne(itemFindUniqueArgs: ItemFindUniqueArgs!): Item
  hotelFindMany(hotelFindManyArgs: HotelFindManyArgs!): [Hotel!]

  """Default prisma query include nested address & checkIns"""
  hotelFindOne(hotelFindUniqueArgs: HotelFindUniqueArgs!): Hotel
  auth(id: Int!): Auth!
  cityFindMany(cityNameSearch: String!): [City!]!
  districtFindMany(districtNameSearch: String!): [District!]!
  postalCodeFindMany: [PostalCode!]!
  bankFindMany: [Bank!]!

  """Deskripsinya ada disini loh"""
  programFindMany(programFindManyArgs: ProgramFindManyArgs!): [Program!]

  """Deskripsinya ada disini loh"""
  programFindOne(programFindUniqueArgs: ProgramFindUniqueArgs!): Program

  """Deskripsinya ada disini loh"""
  programCount(programFindManyArgs: ProgramFindManyArgs): Int!

  """Deskripsinya ada disini loh"""
  programCategoryFindMany(programCategoryFindManyArgs: ProgramCategoryFindManyArgs!): [ProgramCategory!]

  """Deskripsinya ada disini loh"""
  programCategoryFindOne(programCategoryFindUniqueArgs: ProgramCategoryFindUniqueArgs!): ProgramCategory

  """Deskripsinya ada disini loh"""
  rewardFindMany(rewardFindManyArgs: RewardFindManyArgs!): [Reward!]

  """Deskripsinya ada disini loh"""
  rewardFindOne(rewardFindUniqueArgs: RewardFindUniqueArgs!): Reward

  """Deskripsinya ada disini loh"""
  pointTransactionFindMany(pointTransactionFindManyArgs: PointTransactionFindManyArgs!): [PointTransaction!]

  """Deskripsinya ada disini loh"""
  pointTransactionFindOne(pointTransactionFindUniqueArgs: PointTransactionFindUniqueArgs!): PointTransaction

  """Bisa juga untuk ambil balance terakhir dari point milik user"""
  pointTransactionFindFirst(pointTransactionFindFirstArgs: PointTransactionFindFirstArgs!): PointTransaction

  """Deskripsinya ada disini loh"""
  fileFindMany(fileFindManyArgs: FileFindManyArgs!): [File!]

  """Deskripsinya ada disini loh"""
  fileFindOne(fileFindUniqueArgs: FileFindUniqueArgs!): File

  """Deskripsinya ada disini loh"""
  faqFindMany(faqFindManyArgs: FaqFindManyArgs!): [Faq!]

  """Deskripsinya ada disini loh"""
  faqFindOne(faqFindUniqueArgs: FaqFindUniqueArgs!): Faq

  """Deskripsinya ada disini loh"""
  projectFindMany(projectFindManyArgs: ProjectFindManyArgs!): [Project!]

  """Deskripsinya ada disini loh"""
  projectFindOne(projectFindUniqueArgs: ProjectFindUniqueArgs!): Project

  """Deskripsinya ada disini loh"""
  shippingFindMany(shippingFindManyArgs: ShippingFindManyArgs!): [Shipping!]

  """Deskripsinya ada disini loh"""
  shippingFindOne(shippingFindUniqueArgs: ShippingFindUniqueArgs!): Shipping

  """Deskripsinya ada disini loh"""
  checkInFindMany(checkInFindManyArgs: CheckInFindManyArgs!): [CheckIn!]

  """Deskripsinya ada disini loh"""
  checkInFindOne(checkInFindUniqueArgs: CheckInFindUniqueArgs!): CheckIn

  """Deskripsinya ada disini loh"""
  userNotificationFindMany(userNotificationFindManyArgs: UserNotificationFindManyArgs!): [UserNotification!]

  """Deskripsinya ada disini loh"""
  userNotificationFindOne(userNotificationFindUniqueArgs: UserNotificationFindUniqueArgs!): UserNotification

  """Deskripsinya ada disini loh"""
  sessionFindMany(sessionFindManyArgs: SessionFindManyArgs!): [Session!]

  """Deskripsinya ada disini loh"""
  sessionFindOne(sessionFindUniqueArgs: SessionFindUniqueArgs!): Session

  """Deskripsinya ada disini loh"""
  transactionFindMany(transactionFindManyArgs: TransactionFindManyArgs!): [Transaction!]

  """Deskripsinya ada disini loh"""
  transactionFindOne(transactionFindUniqueArgs: TransactionFindUniqueArgs!): Transaction

  """Deskripsinya ada disini loh"""
  accountFindMany(accountFindManyArgs: AccountFindManyArgs!): [Account!]

  """Deskripsinya ada disini loh"""
  accountFindOne(accountFindUniqueArgs: AccountFindUniqueArgs!): Account

  """Bisa juga untuk ambil balance terakhir dari akun tertentu milik user"""
  accountFindFirst(accountFindFirstArgs: AccountFindFirstArgs!): Account
  getAccountTotalBalance(accountId: Float!): Float!
  getAccountBalanceByCustomPeriod(accountBalanceByCustomPeriodArgs: AccountBalanceByCustomPeriodArgs!): [AccountBalanceByCustomPeriodQuery!]!

  """Deskripsinya ada disini loh"""
  schoolFindMany(schoolFindManyArgs: SchoolFindManyArgs!): [School!]

  """Deskripsinya ada disini loh"""
  schoolFindOne(schoolFindUniqueArgs: SchoolFindUniqueArgs!): School

  """Deskripsinya ada disini loh"""
  addressFindMany(addressFindManyArgs: AddressFindManyArgs!): [Address!]

  """Deskripsinya ada disini loh"""
  addressFindOne(addressFindUniqueArgs: AddressFindUniqueArgs!): Address

  """Deskripsinya ada disini loh"""
  orderFindMany(orderFindManyArgs: OrderFindManyArgs!): [Order!]

  """Deskripsinya ada disini loh"""
  orderFindOne(orderFindUniqueArgs: OrderFindUniqueArgs!): Order

  """Deskripsinya ada disini loh"""
  orderCount(orderFindManyArgs: OrderFindManyArgs): Int!
}

type Reward {
  id: Int!
  name: String!
  pointCost: Float!
  description: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  images: [Images!]
  claimers: [UserAbstract!]
  _count: RewardCount!
}

type RewardAvgAggregate {
  id: Float
  pointCost: Float
}

type RewardCount {
  images: Int!
  claimers: Int!
}

type RewardCountAggregate {
  id: Int!
  name: Int!
  pointCost: Int!
  description: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

input RewardCreateArgs {
  data: RewardCreateInput!
}

input RewardCreateInput {
  name: String!
  pointCost: Float!
  description: String!
  createdAt: DateTime
  updatedAt: DateTime
  images: ImagesCreateNestedManyWithoutRewardImageInput
  claimers: UserCreateNestedManyWithoutClaimedRewardsInput
}

input RewardCreateOrConnectWithoutImagesInput {
  where: RewardWhereUniqueInput!
  create: RewardCreateWithoutImagesInput!
}

input RewardCreateWithoutImagesInput {
  name: String!
  pointCost: Float!
  description: String!
  createdAt: DateTime
  updatedAt: DateTime
  claimers: UserCreateNestedManyWithoutClaimedRewardsInput
}

input RewardFindManyArgs {
  where: RewardWhereInput
  orderBy: [RewardOrderByWithRelationInput!]
  take: Int
  skip: Int
  distinct: [RewardScalarFieldEnum!]
}

input RewardFindUniqueArgs {
  where: RewardWhereUniqueInput!
}

type RewardMaxAggregate {
  id: Int
  name: String
  pointCost: Float
  description: String
  createdAt: DateTime
  updatedAt: DateTime
}

type RewardMinAggregate {
  id: Int
  name: String
  pointCost: Float
  description: String
  createdAt: DateTime
  updatedAt: DateTime
}

input RewardNullableRelationFilter {
  is: RewardWhereInput
  isNot: RewardWhereInput
}

input RewardOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  pointCost: SortOrder
  description: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  images: ImagesOrderByRelationAggregateInput
  claimers: UserOrderByRelationAggregateInput
}

enum RewardScalarFieldEnum {
  id
  name
  pointCost
  description
  createdAt
  updatedAt
}

type RewardSumAggregate {
  id: Int
  pointCost: Float
}

input RewardUpdateInput {
  name: StringFieldUpdateOperationsInput
  pointCost: FloatFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  images: ImagesUpdateManyWithoutRewardImageNestedInput
  claimers: UserUpdateManyWithoutClaimedRewardsNestedInput
}

input RewardUpdateOneArgs {
  data: RewardUpdateInput!
  where: RewardWhereUniqueInput!
}

input RewardUpdateOneWithoutImagesNestedInput {
  create: RewardCreateWithoutImagesInput
  connectOrCreate: RewardCreateOrConnectWithoutImagesInput
  upsert: RewardUpsertWithoutImagesInput
  disconnect: RewardWhereInput
  delete: RewardWhereInput
  connect: RewardWhereUniqueInput
  update: RewardUpdateToOneWithWhereWithoutImagesInput
}

input RewardUpdateToOneWithWhereWithoutImagesInput {
  where: RewardWhereInput
  data: RewardUpdateWithoutImagesInput!
}

input RewardUpdateWithoutImagesInput {
  name: StringFieldUpdateOperationsInput
  pointCost: FloatFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  claimers: UserUpdateManyWithoutClaimedRewardsNestedInput
}

input RewardUpsertWithoutImagesInput {
  update: RewardUpdateWithoutImagesInput!
  create: RewardCreateWithoutImagesInput!
  where: RewardWhereInput
}

input RewardWhereInput {
  AND: [RewardWhereInput!]
  OR: [RewardWhereInput!]
  NOT: [RewardWhereInput!]
  id: IntFilter
  name: StringFilter
  pointCost: FloatFilter
  description: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  images: ImagesListRelationFilter
  claimers: UserListRelationFilter
}

input RewardWhereUniqueInput {
  id: Int
  AND: [RewardWhereInput!]
  OR: [RewardWhereInput!]
  NOT: [RewardWhereInput!]
  name: StringFilter
  pointCost: FloatFilter
  description: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  images: ImagesListRelationFilter
  claimers: UserListRelationFilter
}

type School {
  id: Int!
  name: String!
  addressId: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  address: Address!
  students: [UserAbstract!]
  _count: SchoolCount!
}

type SchoolAvgAggregate {
  id: Float
  addressId: Float
}

type SchoolCount {
  students: Int!
}

type SchoolCountAggregate {
  id: Int!
  name: Int!
  addressId: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

input SchoolCreateArgs {
  data: SchoolCreateInput!
}

input SchoolCreateInput {
  name: String!
  address: AddressCreateNestedOneWithoutSchoolInput!
}

input SchoolCreateNestedOneWithoutStudentsInput {
  create: SchoolCreateWithoutStudentsInput
  connectOrCreate: SchoolCreateOrConnectWithoutStudentsInput
  connect: SchoolWhereUniqueInput
}

input SchoolCreateOrConnectWithoutAddressInput {
  where: SchoolWhereUniqueInput!
  create: SchoolCreateWithoutAddressInput!
}

input SchoolCreateOrConnectWithoutStudentsInput {
  where: SchoolWhereUniqueInput!
  create: SchoolCreateWithoutStudentsInput!
}

input SchoolCreateWithoutAddressInput {
  name: String!
}

input SchoolCreateWithoutStudentsInput {
  name: String!
  address: AddressCreateNestedOneWithoutSchoolInput!
}

input SchoolFindManyArgs {
  where: SchoolWhereInput
  orderBy: [SchoolOrderByWithRelationInput!]
  take: Int
  skip: Int
  distinct: [SchoolScalarFieldEnum!]
}

input SchoolFindUniqueArgs {
  where: SchoolWhereUniqueInput!
}

type SchoolMaxAggregate {
  id: Int
  name: String
  addressId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type SchoolMinAggregate {
  id: Int
  name: String
  addressId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

input SchoolNullableRelationFilter {
  is: SchoolWhereInput
  isNot: SchoolWhereInput
}

input SchoolOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  address: AddressOrderByWithRelationInput
  students: UserOrderByRelationAggregateInput
}

enum SchoolScalarFieldEnum {
  id
  name
  addressId
  createdAt
  updatedAt
}

type SchoolSumAggregate {
  id: Int
  addressId: Int
}

input SchoolUpdateInput {
  name: StringFieldUpdateOperationsInput
  address: AddressUpdateOneRequiredWithoutSchoolNestedInput
}

input SchoolUpdateOneArgs {
  data: SchoolUpdateInput!
  where: SchoolWhereUniqueInput!
}

input SchoolUpdateOneWithoutAddressNestedInput {
  create: SchoolCreateWithoutAddressInput
  connectOrCreate: SchoolCreateOrConnectWithoutAddressInput
  upsert: SchoolUpsertWithoutAddressInput
  disconnect: SchoolWhereInput
  delete: SchoolWhereInput
  connect: SchoolWhereUniqueInput
  update: SchoolUpdateToOneWithWhereWithoutAddressInput
}

input SchoolUpdateOneWithoutStudentsNestedInput {
  create: SchoolCreateWithoutStudentsInput
  connectOrCreate: SchoolCreateOrConnectWithoutStudentsInput
  upsert: SchoolUpsertWithoutStudentsInput
  disconnect: SchoolWhereInput
  delete: SchoolWhereInput
  connect: SchoolWhereUniqueInput
  update: SchoolUpdateToOneWithWhereWithoutStudentsInput
}

input SchoolUpdateToOneWithWhereWithoutAddressInput {
  where: SchoolWhereInput
  data: SchoolUpdateWithoutAddressInput!
}

input SchoolUpdateToOneWithWhereWithoutStudentsInput {
  where: SchoolWhereInput
  data: SchoolUpdateWithoutStudentsInput!
}

input SchoolUpdateWithoutAddressInput {
  name: StringFieldUpdateOperationsInput
}

input SchoolUpdateWithoutStudentsInput {
  name: StringFieldUpdateOperationsInput
  address: AddressUpdateOneRequiredWithoutSchoolNestedInput
}

input SchoolUpsertWithoutAddressInput {
  update: SchoolUpdateWithoutAddressInput!
  create: SchoolCreateWithoutAddressInput!
  where: SchoolWhereInput
}

input SchoolUpsertWithoutStudentsInput {
  update: SchoolUpdateWithoutStudentsInput!
  create: SchoolCreateWithoutStudentsInput!
  where: SchoolWhereInput
}

input SchoolWhereInput {
  AND: [SchoolWhereInput!]
  OR: [SchoolWhereInput!]
  NOT: [SchoolWhereInput!]
  id: IntFilter
  name: StringFilter
  address: AddressRelationFilter
  students: UserListRelationFilter
}

input SchoolWhereUniqueInput {
  id: Int
  AND: [SchoolWhereInput!]
  OR: [SchoolWhereInput!]
  NOT: [SchoolWhereInput!]
  name: StringFilter
  address: AddressRelationFilter
  students: UserListRelationFilter
}

type Session {
  id: Int!
  token: String!
  expiresAt: DateTime!
  createdAt: DateTime!
  userId: String!
  device: String!
  ipAddress: Float!
  user: UserAbstract!
}

type SessionAvgAggregate {
  id: Float
  ipAddress: Float
}

type SessionCountAggregate {
  id: Int!
  token: Int!
  expiresAt: Int!
  createdAt: Int!
  userId: Int!
  device: Int!
  ipAddress: Int!
  _all: Int!
}

input SessionFindManyArgs {
  where: SessionWhereInput
  orderBy: [SessionOrderByWithRelationInput!]
  take: Int
  skip: Int
  distinct: [SessionScalarFieldEnum!]
}

input SessionFindUniqueArgs {
  where: SessionWhereUniqueInput!
}

type SessionMaxAggregate {
  id: Int
  token: String
  expiresAt: DateTime
  createdAt: DateTime
  userId: String
  device: String
  ipAddress: Float
}

type SessionMinAggregate {
  id: Int
  token: String
  expiresAt: DateTime
  createdAt: DateTime
  userId: String
  device: String
  ipAddress: Float
}

input SessionOrderByWithRelationInput {
  id: SortOrder
  token: SortOrder
  expiresAt: SortOrder
  createdAt: SortOrder
  userId: SortOrder
  device: SortOrder
  ipAddress: SortOrder
  user: UserOrderByWithRelationInput
}

enum SessionScalarFieldEnum {
  id
  token
  expiresAt
  createdAt
  userId
  device
  ipAddress
}

type SessionSumAggregate {
  id: Int
  ipAddress: Float
}

input SessionWhereInput {
  AND: [SessionWhereInput!]
  OR: [SessionWhereInput!]
  NOT: [SessionWhereInput!]
  id: IntFilter
  token: StringFilter
  expiresAt: DateTimeFilter
  createdAt: DateTimeFilter
  userId: StringFilter
  device: StringFilter
  ipAddress: FloatFilter
  user: UserRelationFilter
}

input SessionWhereUniqueInput {
  id: Int
  token: String
  AND: [SessionWhereInput!]
  OR: [SessionWhereInput!]
  NOT: [SessionWhereInput!]
  expiresAt: DateTimeFilter
  createdAt: DateTimeFilter
  userId: StringFilter
  device: StringFilter
  ipAddress: FloatFilter
  user: UserRelationFilter
}

type Shipping {
  id: Int!
  logisticName: String!
  deliveryDate: DateTime
  shippingStatus: ShippingStatus!
  addressId: Int!
  courier: String
  estimatedTime: String
  trackingNo: String
  orderId: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  address: Address!
  order: Order!
}

type ShippingAvgAggregate {
  id: Float
  addressId: Float
  orderId: Float
}

type ShippingCountAggregate {
  id: Int!
  logisticName: Int!
  deliveryDate: Int!
  shippingStatus: Int!
  addressId: Int!
  courier: Int!
  estimatedTime: Int!
  trackingNo: Int!
  orderId: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

input ShippingCreateArgs {
  data: ShippingCreateInput!
}

input ShippingCreateInput {
  logisticName: String!
  deliveryDate: DateTime
  shippingStatus: ShippingStatus!
  courier: String
  estimatedTime: String
  trackingNo: String
  createdAt: DateTime
  updatedAt: DateTime
  address: AddressCreateNestedOneWithoutShippingInput!
  order: OrderCreateNestedOneWithoutShippingInput!
}

input ShippingCreateNestedOneWithoutOrderInput {
  create: ShippingCreateWithoutOrderInput
  connectOrCreate: ShippingCreateOrConnectWithoutOrderInput
  connect: ShippingWhereUniqueInput
}

input ShippingCreateOrConnectWithoutAddressInput {
  where: ShippingWhereUniqueInput!
  create: ShippingCreateWithoutAddressInput!
}

input ShippingCreateOrConnectWithoutOrderInput {
  where: ShippingWhereUniqueInput!
  create: ShippingCreateWithoutOrderInput!
}

input ShippingCreateWithoutAddressInput {
  logisticName: String!
  deliveryDate: DateTime
  shippingStatus: ShippingStatus!
  courier: String
  estimatedTime: String
  trackingNo: String
  createdAt: DateTime
  updatedAt: DateTime
  order: OrderCreateNestedOneWithoutShippingInput!
}

input ShippingCreateWithoutOrderInput {
  logisticName: String!
  deliveryDate: DateTime
  shippingStatus: ShippingStatus!
  courier: String
  estimatedTime: String
  trackingNo: String
  createdAt: DateTime
  updatedAt: DateTime
  address: AddressCreateNestedOneWithoutShippingInput!
}

input ShippingFindManyArgs {
  where: ShippingWhereInput
  orderBy: [ShippingOrderByWithRelationInput!]
  take: Int
  skip: Int
  distinct: [ShippingScalarFieldEnum!]
}

input ShippingFindUniqueArgs {
  where: ShippingWhereUniqueInput!
}

type ShippingMaxAggregate {
  id: Int
  logisticName: String
  deliveryDate: DateTime
  shippingStatus: ShippingStatus
  addressId: Int
  courier: String
  estimatedTime: String
  trackingNo: String
  orderId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type ShippingMinAggregate {
  id: Int
  logisticName: String
  deliveryDate: DateTime
  shippingStatus: ShippingStatus
  addressId: Int
  courier: String
  estimatedTime: String
  trackingNo: String
  orderId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

input ShippingNullableRelationFilter {
  is: ShippingWhereInput
  isNot: ShippingWhereInput
}

input ShippingOrderByWithRelationInput {
  id: SortOrder
  logisticName: SortOrder
  deliveryDate: SortOrderInput
  shippingStatus: SortOrder
  addressId: SortOrder
  courier: SortOrderInput
  estimatedTime: SortOrderInput
  trackingNo: SortOrderInput
  orderId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  address: AddressOrderByWithRelationInput
  order: OrderOrderByWithRelationInput
}

enum ShippingScalarFieldEnum {
  id
  logisticName
  deliveryDate
  shippingStatus
  addressId
  courier
  estimatedTime
  trackingNo
  orderId
  createdAt
  updatedAt
}

enum ShippingStatus {
  PROCESSING
  DELIVERING
  DELIVERED
}

type ShippingSumAggregate {
  id: Int
  addressId: Int
  orderId: Int
}

input ShippingUpdateInput {
  logisticName: StringFieldUpdateOperationsInput
  deliveryDate: NullableDateTimeFieldUpdateOperationsInput
  shippingStatus: EnumShippingStatusFieldUpdateOperationsInput
  courier: NullableStringFieldUpdateOperationsInput
  estimatedTime: NullableStringFieldUpdateOperationsInput
  trackingNo: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  address: AddressUpdateOneRequiredWithoutShippingNestedInput
  order: OrderUpdateOneRequiredWithoutShippingNestedInput
}

input ShippingUpdateOneArgs {
  data: ShippingUpdateInput!
  where: ShippingWhereUniqueInput!
}

input ShippingUpdateOneWithoutAddressNestedInput {
  create: ShippingCreateWithoutAddressInput
  connectOrCreate: ShippingCreateOrConnectWithoutAddressInput
  upsert: ShippingUpsertWithoutAddressInput
  disconnect: ShippingWhereInput
  delete: ShippingWhereInput
  connect: ShippingWhereUniqueInput
  update: ShippingUpdateToOneWithWhereWithoutAddressInput
}

input ShippingUpdateOneWithoutOrderNestedInput {
  create: ShippingCreateWithoutOrderInput
  connectOrCreate: ShippingCreateOrConnectWithoutOrderInput
  upsert: ShippingUpsertWithoutOrderInput
  disconnect: ShippingWhereInput
  delete: ShippingWhereInput
  connect: ShippingWhereUniqueInput
  update: ShippingUpdateToOneWithWhereWithoutOrderInput
}

input ShippingUpdateToOneWithWhereWithoutAddressInput {
  where: ShippingWhereInput
  data: ShippingUpdateWithoutAddressInput!
}

input ShippingUpdateToOneWithWhereWithoutOrderInput {
  where: ShippingWhereInput
  data: ShippingUpdateWithoutOrderInput!
}

input ShippingUpdateWithoutAddressInput {
  logisticName: StringFieldUpdateOperationsInput
  deliveryDate: NullableDateTimeFieldUpdateOperationsInput
  shippingStatus: EnumShippingStatusFieldUpdateOperationsInput
  courier: NullableStringFieldUpdateOperationsInput
  estimatedTime: NullableStringFieldUpdateOperationsInput
  trackingNo: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  order: OrderUpdateOneRequiredWithoutShippingNestedInput
}

input ShippingUpdateWithoutOrderInput {
  logisticName: StringFieldUpdateOperationsInput
  deliveryDate: NullableDateTimeFieldUpdateOperationsInput
  shippingStatus: EnumShippingStatusFieldUpdateOperationsInput
  courier: NullableStringFieldUpdateOperationsInput
  estimatedTime: NullableStringFieldUpdateOperationsInput
  trackingNo: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  address: AddressUpdateOneRequiredWithoutShippingNestedInput
}

input ShippingUpsertWithoutAddressInput {
  update: ShippingUpdateWithoutAddressInput!
  create: ShippingCreateWithoutAddressInput!
  where: ShippingWhereInput
}

input ShippingUpsertWithoutOrderInput {
  update: ShippingUpdateWithoutOrderInput!
  create: ShippingCreateWithoutOrderInput!
  where: ShippingWhereInput
}

input ShippingWhereInput {
  AND: [ShippingWhereInput!]
  OR: [ShippingWhereInput!]
  NOT: [ShippingWhereInput!]
  id: IntFilter
  logisticName: StringFilter
  deliveryDate: DateTimeNullableFilter
  shippingStatus: EnumShippingStatusFilter
  addressId: IntFilter
  courier: StringNullableFilter
  estimatedTime: StringNullableFilter
  trackingNo: StringNullableFilter
  orderId: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  address: AddressRelationFilter
  order: OrderRelationFilter
}

input ShippingWhereUniqueInput {
  id: Int
  addressId: Int
  orderId: Int
  AND: [ShippingWhereInput!]
  OR: [ShippingWhereInput!]
  NOT: [ShippingWhereInput!]
  logisticName: StringFilter
  deliveryDate: DateTimeNullableFilter
  shippingStatus: EnumShippingStatusFilter
  courier: StringNullableFilter
  estimatedTime: StringNullableFilter
  trackingNo: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  address: AddressRelationFilter
  order: OrderRelationFilter
}

enum SortOrder {
  asc
  desc
}

input SortOrderInput {
  sort: SortOrder!
  nulls: NullsOrder
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

enum Theme {
  LIGHT
  DARK
}

type Transaction {
  id: Int!
  amount: Float!
  proofUrl: String
  status: TransactionStatus!
  transactionCategory: TransactionCategory!
  fromAccountId: Int!
  toAccountId: Int!
  invoiceId: Int
  installmentId: Int
  createdAt: DateTime!
  fromAccount: Account!
  toAccount: Account!
  invoice: Invoice
  Installment: Installment
}

type TransactionAvgAggregate {
  id: Float
  amount: Float
  fromAccountId: Float
  toAccountId: Float
  invoiceId: Float
  installmentId: Float
}

enum TransactionCategory {
  INVESTMENT
  INVESTMENT_RETURN
  COMISSION_BONUS
  WITHDRAWAL
  MEMBER_REGISTRATION
  STUDENT_REGISTRATION
}

type TransactionCountAggregate {
  id: Int!
  amount: Int!
  proofUrl: Int!
  status: Int!
  transactionCategory: Int!
  fromAccountId: Int!
  toAccountId: Int!
  invoiceId: Int!
  installmentId: Int!
  createdAt: Int!
  _all: Int!
}

input TransactionCreateManyFromAccountInput {
  id: Int
  amount: Float!
  proofUrl: String
  status: TransactionStatus!
  transactionCategory: TransactionCategory!
  toAccountId: Int!
  invoiceId: Int
  installmentId: Int
  createdAt: DateTime
}

input TransactionCreateManyFromAccountInputEnvelope {
  data: [TransactionCreateManyFromAccountInput!]!
  skipDuplicates: Boolean
}

input TransactionCreateManyInvoiceInput {
  id: Int
  amount: Float!
  proofUrl: String
  status: TransactionStatus!
  transactionCategory: TransactionCategory!
  fromAccountId: Int!
  toAccountId: Int!
  installmentId: Int
  createdAt: DateTime
}

input TransactionCreateManyInvoiceInputEnvelope {
  data: [TransactionCreateManyInvoiceInput!]!
  skipDuplicates: Boolean
}

input TransactionCreateManyToAccountInput {
  id: Int
  amount: Float!
  proofUrl: String
  status: TransactionStatus!
  transactionCategory: TransactionCategory!
  fromAccountId: Int!
  invoiceId: Int
  installmentId: Int
  createdAt: DateTime
}

input TransactionCreateManyToAccountInputEnvelope {
  data: [TransactionCreateManyToAccountInput!]!
  skipDuplicates: Boolean
}

input TransactionCreateNestedManyWithoutFromAccountInput {
  create: [TransactionCreateWithoutFromAccountInput!]
  connectOrCreate: [TransactionCreateOrConnectWithoutFromAccountInput!]
  createMany: TransactionCreateManyFromAccountInputEnvelope
  connect: [TransactionWhereUniqueInput!]
}

input TransactionCreateNestedManyWithoutInvoiceInput {
  create: [TransactionCreateWithoutInvoiceInput!]
  connectOrCreate: [TransactionCreateOrConnectWithoutInvoiceInput!]
  createMany: TransactionCreateManyInvoiceInputEnvelope
  connect: [TransactionWhereUniqueInput!]
}

input TransactionCreateNestedManyWithoutToAccountInput {
  create: [TransactionCreateWithoutToAccountInput!]
  connectOrCreate: [TransactionCreateOrConnectWithoutToAccountInput!]
  createMany: TransactionCreateManyToAccountInputEnvelope
  connect: [TransactionWhereUniqueInput!]
}

input TransactionCreateNestedOneWithoutInstallmentInput {
  create: TransactionCreateWithoutInstallmentInput
  connectOrCreate: TransactionCreateOrConnectWithoutInstallmentInput
  connect: TransactionWhereUniqueInput
}

input TransactionCreateOrConnectWithoutFromAccountInput {
  where: TransactionWhereUniqueInput!
  create: TransactionCreateWithoutFromAccountInput!
}

input TransactionCreateOrConnectWithoutInstallmentInput {
  where: TransactionWhereUniqueInput!
  create: TransactionCreateWithoutInstallmentInput!
}

input TransactionCreateOrConnectWithoutInvoiceInput {
  where: TransactionWhereUniqueInput!
  create: TransactionCreateWithoutInvoiceInput!
}

input TransactionCreateOrConnectWithoutToAccountInput {
  where: TransactionWhereUniqueInput!
  create: TransactionCreateWithoutToAccountInput!
}

input TransactionCreateWithoutFromAccountInput {
  amount: Float!
  proofUrl: String
  status: TransactionStatus!
  transactionCategory: TransactionCategory!
  createdAt: DateTime
  toAccount: AccountCreateNestedOneWithoutTransactionDestinationInput!
  invoice: InvoiceCreateNestedOneWithoutTransactionsInput
  Installment: InstallmentCreateNestedOneWithoutTransactionInput
}

input TransactionCreateWithoutInstallmentInput {
  amount: Float!
  proofUrl: String
  status: TransactionStatus!
  transactionCategory: TransactionCategory!
  createdAt: DateTime
  fromAccount: AccountCreateNestedOneWithoutTransactionOriginsInput!
  toAccount: AccountCreateNestedOneWithoutTransactionDestinationInput!
  invoice: InvoiceCreateNestedOneWithoutTransactionsInput
}

input TransactionCreateWithoutInvoiceInput {
  amount: Float!
  proofUrl: String
  status: TransactionStatus!
  transactionCategory: TransactionCategory!
  createdAt: DateTime
  fromAccount: AccountCreateNestedOneWithoutTransactionOriginsInput!
  toAccount: AccountCreateNestedOneWithoutTransactionDestinationInput!
  Installment: InstallmentCreateNestedOneWithoutTransactionInput
}

input TransactionCreateWithoutToAccountInput {
  amount: Float!
  proofUrl: String
  status: TransactionStatus!
  transactionCategory: TransactionCategory!
  createdAt: DateTime
  fromAccount: AccountCreateNestedOneWithoutTransactionOriginsInput!
  invoice: InvoiceCreateNestedOneWithoutTransactionsInput
  Installment: InstallmentCreateNestedOneWithoutTransactionInput
}

input TransactionFindManyArgs {
  where: TransactionWhereInput
  orderBy: [TransactionOrderByWithRelationInput!]
  take: Int
  skip: Int
  distinct: [TransactionScalarFieldEnum!]
}

input TransactionFindUniqueArgs {
  where: TransactionWhereUniqueInput!
}

input TransactionListRelationFilter {
  every: TransactionWhereInput
  some: TransactionWhereInput
  none: TransactionWhereInput
}

type TransactionMaxAggregate {
  id: Int
  amount: Float
  proofUrl: String
  status: TransactionStatus
  transactionCategory: TransactionCategory
  fromAccountId: Int
  toAccountId: Int
  invoiceId: Int
  installmentId: Int
  createdAt: DateTime
}

type TransactionMinAggregate {
  id: Int
  amount: Float
  proofUrl: String
  status: TransactionStatus
  transactionCategory: TransactionCategory
  fromAccountId: Int
  toAccountId: Int
  invoiceId: Int
  installmentId: Int
  createdAt: DateTime
}

input TransactionNullableRelationFilter {
  is: TransactionWhereInput
  isNot: TransactionWhereInput
}

input TransactionOrderByRelationAggregateInput {
  _count: SortOrder
}

input TransactionOrderByWithRelationInput {
  id: SortOrder
  amount: SortOrder
  proofUrl: SortOrderInput
  status: SortOrder
  transactionCategory: SortOrder
  fromAccountId: SortOrder
  toAccountId: SortOrder
  invoiceId: SortOrderInput
  installmentId: SortOrderInput
  createdAt: SortOrder
  fromAccount: AccountOrderByWithRelationInput
  toAccount: AccountOrderByWithRelationInput
  invoice: InvoiceOrderByWithRelationInput
  Installment: InstallmentOrderByWithRelationInput
}

enum TransactionScalarFieldEnum {
  id
  amount
  proofUrl
  status
  transactionCategory
  fromAccountId
  toAccountId
  invoiceId
  installmentId
  createdAt
}

input TransactionScalarWhereInput {
  AND: [TransactionScalarWhereInput!]
  OR: [TransactionScalarWhereInput!]
  NOT: [TransactionScalarWhereInput!]
  id: IntFilter
  amount: FloatFilter
  proofUrl: StringNullableFilter
  status: EnumTransactionStatusFilter
  transactionCategory: EnumTransactionCategoryFilter
  fromAccountId: IntFilter
  toAccountId: IntFilter
  invoiceId: IntNullableFilter
  installmentId: IntNullableFilter
  createdAt: DateTimeFilter
}

enum TransactionStatus {
  PROCESSING
  PENDING
  FAILED
  CANCELLED
  COMPLETED
}

type TransactionSumAggregate {
  id: Int
  amount: Float
  fromAccountId: Int
  toAccountId: Int
  invoiceId: Int
  installmentId: Int
}

enum TransactionType {
  DEBIT
  CREDIT
}

input TransactionUpdateManyMutationInput {
  amount: FloatFieldUpdateOperationsInput
  proofUrl: NullableStringFieldUpdateOperationsInput
  status: EnumTransactionStatusFieldUpdateOperationsInput
  transactionCategory: EnumTransactionCategoryFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
}

input TransactionUpdateManyWithoutFromAccountNestedInput {
  create: [TransactionCreateWithoutFromAccountInput!]
  connectOrCreate: [TransactionCreateOrConnectWithoutFromAccountInput!]
  upsert: [TransactionUpsertWithWhereUniqueWithoutFromAccountInput!]
  createMany: TransactionCreateManyFromAccountInputEnvelope
  set: [TransactionWhereUniqueInput!]
  disconnect: [TransactionWhereUniqueInput!]
  delete: [TransactionWhereUniqueInput!]
  connect: [TransactionWhereUniqueInput!]
  update: [TransactionUpdateWithWhereUniqueWithoutFromAccountInput!]
  updateMany: [TransactionUpdateManyWithWhereWithoutFromAccountInput!]
  deleteMany: [TransactionScalarWhereInput!]
}

input TransactionUpdateManyWithoutInvoiceNestedInput {
  create: [TransactionCreateWithoutInvoiceInput!]
  connectOrCreate: [TransactionCreateOrConnectWithoutInvoiceInput!]
  upsert: [TransactionUpsertWithWhereUniqueWithoutInvoiceInput!]
  createMany: TransactionCreateManyInvoiceInputEnvelope
  set: [TransactionWhereUniqueInput!]
  disconnect: [TransactionWhereUniqueInput!]
  delete: [TransactionWhereUniqueInput!]
  connect: [TransactionWhereUniqueInput!]
  update: [TransactionUpdateWithWhereUniqueWithoutInvoiceInput!]
  updateMany: [TransactionUpdateManyWithWhereWithoutInvoiceInput!]
  deleteMany: [TransactionScalarWhereInput!]
}

input TransactionUpdateManyWithoutToAccountNestedInput {
  create: [TransactionCreateWithoutToAccountInput!]
  connectOrCreate: [TransactionCreateOrConnectWithoutToAccountInput!]
  upsert: [TransactionUpsertWithWhereUniqueWithoutToAccountInput!]
  createMany: TransactionCreateManyToAccountInputEnvelope
  set: [TransactionWhereUniqueInput!]
  disconnect: [TransactionWhereUniqueInput!]
  delete: [TransactionWhereUniqueInput!]
  connect: [TransactionWhereUniqueInput!]
  update: [TransactionUpdateWithWhereUniqueWithoutToAccountInput!]
  updateMany: [TransactionUpdateManyWithWhereWithoutToAccountInput!]
  deleteMany: [TransactionScalarWhereInput!]
}

input TransactionUpdateManyWithWhereWithoutFromAccountInput {
  where: TransactionScalarWhereInput!
  data: TransactionUpdateManyMutationInput!
}

input TransactionUpdateManyWithWhereWithoutInvoiceInput {
  where: TransactionScalarWhereInput!
  data: TransactionUpdateManyMutationInput!
}

input TransactionUpdateManyWithWhereWithoutToAccountInput {
  where: TransactionScalarWhereInput!
  data: TransactionUpdateManyMutationInput!
}

input TransactionUpdateOneWithoutInstallmentNestedInput {
  create: TransactionCreateWithoutInstallmentInput
  connectOrCreate: TransactionCreateOrConnectWithoutInstallmentInput
  upsert: TransactionUpsertWithoutInstallmentInput
  disconnect: TransactionWhereInput
  delete: TransactionWhereInput
  connect: TransactionWhereUniqueInput
  update: TransactionUpdateToOneWithWhereWithoutInstallmentInput
}

input TransactionUpdateToOneWithWhereWithoutInstallmentInput {
  where: TransactionWhereInput
  data: TransactionUpdateWithoutInstallmentInput!
}

input TransactionUpdateWithoutFromAccountInput {
  amount: FloatFieldUpdateOperationsInput
  proofUrl: NullableStringFieldUpdateOperationsInput
  status: EnumTransactionStatusFieldUpdateOperationsInput
  transactionCategory: EnumTransactionCategoryFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  toAccount: AccountUpdateOneRequiredWithoutTransactionDestinationNestedInput
  invoice: InvoiceUpdateOneWithoutTransactionsNestedInput
  Installment: InstallmentUpdateOneWithoutTransactionNestedInput
}

input TransactionUpdateWithoutInstallmentInput {
  amount: FloatFieldUpdateOperationsInput
  proofUrl: NullableStringFieldUpdateOperationsInput
  status: EnumTransactionStatusFieldUpdateOperationsInput
  transactionCategory: EnumTransactionCategoryFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  fromAccount: AccountUpdateOneRequiredWithoutTransactionOriginsNestedInput
  toAccount: AccountUpdateOneRequiredWithoutTransactionDestinationNestedInput
  invoice: InvoiceUpdateOneWithoutTransactionsNestedInput
}

input TransactionUpdateWithoutInvoiceInput {
  amount: FloatFieldUpdateOperationsInput
  proofUrl: NullableStringFieldUpdateOperationsInput
  status: EnumTransactionStatusFieldUpdateOperationsInput
  transactionCategory: EnumTransactionCategoryFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  fromAccount: AccountUpdateOneRequiredWithoutTransactionOriginsNestedInput
  toAccount: AccountUpdateOneRequiredWithoutTransactionDestinationNestedInput
  Installment: InstallmentUpdateOneWithoutTransactionNestedInput
}

input TransactionUpdateWithoutToAccountInput {
  amount: FloatFieldUpdateOperationsInput
  proofUrl: NullableStringFieldUpdateOperationsInput
  status: EnumTransactionStatusFieldUpdateOperationsInput
  transactionCategory: EnumTransactionCategoryFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  fromAccount: AccountUpdateOneRequiredWithoutTransactionOriginsNestedInput
  invoice: InvoiceUpdateOneWithoutTransactionsNestedInput
  Installment: InstallmentUpdateOneWithoutTransactionNestedInput
}

input TransactionUpdateWithWhereUniqueWithoutFromAccountInput {
  where: TransactionWhereUniqueInput!
  data: TransactionUpdateWithoutFromAccountInput!
}

input TransactionUpdateWithWhereUniqueWithoutInvoiceInput {
  where: TransactionWhereUniqueInput!
  data: TransactionUpdateWithoutInvoiceInput!
}

input TransactionUpdateWithWhereUniqueWithoutToAccountInput {
  where: TransactionWhereUniqueInput!
  data: TransactionUpdateWithoutToAccountInput!
}

input TransactionUpsertWithoutInstallmentInput {
  update: TransactionUpdateWithoutInstallmentInput!
  create: TransactionCreateWithoutInstallmentInput!
  where: TransactionWhereInput
}

input TransactionUpsertWithWhereUniqueWithoutFromAccountInput {
  where: TransactionWhereUniqueInput!
  update: TransactionUpdateWithoutFromAccountInput!
  create: TransactionCreateWithoutFromAccountInput!
}

input TransactionUpsertWithWhereUniqueWithoutInvoiceInput {
  where: TransactionWhereUniqueInput!
  update: TransactionUpdateWithoutInvoiceInput!
  create: TransactionCreateWithoutInvoiceInput!
}

input TransactionUpsertWithWhereUniqueWithoutToAccountInput {
  where: TransactionWhereUniqueInput!
  update: TransactionUpdateWithoutToAccountInput!
  create: TransactionCreateWithoutToAccountInput!
}

input TransactionWhereInput {
  AND: [TransactionWhereInput!]
  OR: [TransactionWhereInput!]
  NOT: [TransactionWhereInput!]
  id: IntFilter
  amount: FloatFilter
  proofUrl: StringNullableFilter
  status: EnumTransactionStatusFilter
  transactionCategory: EnumTransactionCategoryFilter
  fromAccountId: IntFilter
  toAccountId: IntFilter
  invoiceId: IntNullableFilter
  installmentId: IntNullableFilter
  createdAt: DateTimeFilter
  fromAccount: AccountRelationFilter
  toAccount: AccountRelationFilter
  invoice: InvoiceNullableRelationFilter
  Installment: InstallmentNullableRelationFilter
}

input TransactionWhereUniqueInput {
  id: Int
  installmentId: Int
  AND: [TransactionWhereInput!]
  OR: [TransactionWhereInput!]
  NOT: [TransactionWhereInput!]
  amount: FloatFilter
  proofUrl: StringNullableFilter
  status: EnumTransactionStatusFilter
  transactionCategory: EnumTransactionCategoryFilter
  fromAccountId: IntFilter
  toAccountId: IntFilter
  invoiceId: IntNullableFilter
  createdAt: DateTimeFilter
  fromAccount: AccountRelationFilter
  toAccount: AccountRelationFilter
  invoice: InvoiceNullableRelationFilter
  Installment: InstallmentNullableRelationFilter
}

type User {
  """Dwadidaw"""
  id: String!
  firstName: String!
  lastName: String
  email: String!
  addressId: Int!
  userRole: UserRole!
  userType: UserType!
  avatarUrl: String
  whatsappNumber: String!
  whatsappVerifiedAt: DateTime
  referralCode: String!
  referredById: String
  status: UserStatus!
  schoolId: Int
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  theme: Theme!
  address: Address!
  referredBy: UserAbstract
  referredUsers: [UserAbstract!]
  checkIns: [CheckIn!]
  school: School
  accounts: [Account!]
  PointTransactions: [PointTransaction!]
  orders: [Order!]
  sessions: [Session!]
  hotelsCreated: [Hotel!]
  programsParticipation: [Program!]
  projectsInvestment: [Project!]
  claimedRewards: [Reward!]
  userNotifications: [UserNotification!]
  programsCreated: [Program!]
  filesCreated: [File!]
  _count: UserCount!
}

type UserAbstract {
  id: String!
  firstName: String!
  lastName: String
  email: String!
  addressId: Int!
  userRole: UserRole!
  userType: UserType!
  avatarUrl: String
  whatsappNumber: String!
  whatsappVerifiedAt: DateTime
  referralCode: String!
  referredById: String
  status: UserStatus!
  schoolId: Int
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  theme: Theme!
  address: Address!
  referredBy: UserAbstract
  referredUsers: [UserAbstract!]
  checkIns: [CheckIn!]
  school: School
  accounts: [Account!]
  PointTransactions: [PointTransaction!]
  orders: [Order!]
  sessions: [Session!]
  hotelsCreated: [Hotel!]
  programsParticipation: [Program!]
  projectsInvestment: [Project!]
  claimedRewards: [Reward!]
  userNotifications: [UserNotification!]
  programsCreated: [Program!]
  filesCreated: [File!]
  _count: UserCount!
}

type UserAvgAggregate {
  addressId: Float
  schoolId: Float
}

type UserCount {
  referredUsers: Int!
  checkIns: Int!
  accounts: Int!
  PointTransactions: Int!
  orders: Int!
  sessions: Int!
  hotelsCreated: Int!
  programsParticipation: Int!
  projectsInvestment: Int!
  claimedRewards: Int!
  userNotifications: Int!
  programsCreated: Int!
  filesCreated: Int!
}

type UserCountAggregate {
  id: Int!
  firstName: Int!
  lastName: Int!
  email: Int!
  addressId: Int!
  userRole: Int!
  userType: Int!
  avatarUrl: Int!
  whatsappNumber: Int!
  whatsappVerifiedAt: Int!
  referralCode: Int!
  referredById: Int!
  status: Int!
  schoolId: Int!
  createdAt: Int!
  updatedAt: Int!
  deletedAt: Int!
  theme: Int!
  _all: Int!
}

input UserCreateArgs {
  data: UserCreateInput!
}

input UserCreateInput {
  firstName: String!
  lastName: String
  email: String!
  userRole: UserRole
  userType: UserType!
  avatarUrl: String
  whatsappNumber: String!
  password: String!
  status: UserStatus
  theme: Theme
  address: AddressCreateNestedOneWithoutUserInput!
  referredBy: UserCreateNestedOneWithoutReferredUsersInput
  school: SchoolCreateNestedOneWithoutStudentsInput
  accounts: AccountCreateNestedManyWithoutUserInput
  orders: OrderCreateNestedManyWithoutOrderByInput
}

input UserCreateManyReferredByInput {
  firstName: String!
  lastName: String
  email: String!
  userRole: UserRole
  userType: UserType!
  avatarUrl: String
  whatsappNumber: String!
  password: String!
  status: UserStatus
  theme: Theme
}

input UserCreateManyReferredByInputEnvelope {
  data: [UserCreateManyReferredByInput!]!
  skipDuplicates: Boolean
}

input UserCreateNestedManyWithoutClaimedRewardsInput {
  create: [UserCreateWithoutClaimedRewardsInput!]
  connectOrCreate: [UserCreateOrConnectWithoutClaimedRewardsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateNestedManyWithoutProjectsInvestmentInput {
  create: [UserCreateWithoutProjectsInvestmentInput!]
  connectOrCreate: [UserCreateOrConnectWithoutProjectsInvestmentInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateNestedOneWithoutAccountsInput {
  create: UserCreateWithoutAccountsInput
  connectOrCreate: UserCreateOrConnectWithoutAccountsInput
  connect: UserWhereUniqueInput
}

input UserCreateNestedOneWithoutCheckInsInput {
  create: UserCreateWithoutCheckInsInput
  connectOrCreate: UserCreateOrConnectWithoutCheckInsInput
  connect: UserWhereUniqueInput
}

input UserCreateNestedOneWithoutFilesCreatedInput {
  create: UserCreateWithoutFilesCreatedInput
  connectOrCreate: UserCreateOrConnectWithoutFilesCreatedInput
  connect: UserWhereUniqueInput
}

input UserCreateNestedOneWithoutHotelsCreatedInput {
  create: UserCreateWithoutHotelsCreatedInput
  connectOrCreate: UserCreateOrConnectWithoutHotelsCreatedInput
  connect: UserWhereUniqueInput
}

input UserCreateNestedOneWithoutOrdersInput {
  create: UserCreateWithoutOrdersInput
  connectOrCreate: UserCreateOrConnectWithoutOrdersInput
  connect: UserWhereUniqueInput
}

input UserCreateNestedOneWithoutPointTransactionsInput {
  create: UserCreateWithoutPointTransactionsInput
  connectOrCreate: UserCreateOrConnectWithoutPointTransactionsInput
  connect: UserWhereUniqueInput
}

input UserCreateNestedOneWithoutProgramsCreatedInput {
  create: UserCreateWithoutProgramsCreatedInput
  connectOrCreate: UserCreateOrConnectWithoutProgramsCreatedInput
  connect: UserWhereUniqueInput
}

input UserCreateNestedOneWithoutReferredUsersInput {
  create: UserCreateWithoutReferredUsersInput
  connectOrCreate: UserCreateOrConnectWithoutReferredUsersInput
  connect: UserWhereUniqueInput
}

input UserCreateNestedOneWithoutUserNotificationsInput {
  create: UserCreateWithoutUserNotificationsInput
  connectOrCreate: UserCreateOrConnectWithoutUserNotificationsInput
  connect: UserWhereUniqueInput
}

input UserCreateOrConnectWithoutAccountsInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutAccountsInput!
}

input UserCreateOrConnectWithoutAddressInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutAddressInput!
}

input UserCreateOrConnectWithoutCheckInsInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutCheckInsInput!
}

input UserCreateOrConnectWithoutClaimedRewardsInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutClaimedRewardsInput!
}

input UserCreateOrConnectWithoutFilesCreatedInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutFilesCreatedInput!
}

input UserCreateOrConnectWithoutHotelsCreatedInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutHotelsCreatedInput!
}

input UserCreateOrConnectWithoutOrdersInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutOrdersInput!
}

input UserCreateOrConnectWithoutPointTransactionsInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutPointTransactionsInput!
}

input UserCreateOrConnectWithoutProgramsCreatedInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutProgramsCreatedInput!
}

input UserCreateOrConnectWithoutProgramsParticipationInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutProgramsParticipationInput!
}

input UserCreateOrConnectWithoutProjectsInvestmentInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutProjectsInvestmentInput!
}

input UserCreateOrConnectWithoutReferredByInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutReferredByInput!
}

input UserCreateOrConnectWithoutReferredUsersInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutReferredUsersInput!
}

input UserCreateOrConnectWithoutUserNotificationsInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutUserNotificationsInput!
}

input UserCreateWithoutAccountsInput {
  firstName: String!
  lastName: String
  email: String!
  userRole: UserRole
  userType: UserType!
  avatarUrl: String
  whatsappNumber: String!
  password: String!
  status: UserStatus
  theme: Theme
  address: AddressCreateNestedOneWithoutUserInput!
  referredBy: UserCreateNestedOneWithoutReferredUsersInput
  school: SchoolCreateNestedOneWithoutStudentsInput
  orders: OrderCreateNestedManyWithoutOrderByInput
}

input UserCreateWithoutAddressInput {
  firstName: String!
  lastName: String
  email: String!
  userRole: UserRole
  userType: UserType!
  avatarUrl: String
  whatsappNumber: String!
  password: String!
  status: UserStatus
  theme: Theme
  referredBy: UserCreateNestedOneWithoutReferredUsersInput
  school: SchoolCreateNestedOneWithoutStudentsInput
  accounts: AccountCreateNestedManyWithoutUserInput
  orders: OrderCreateNestedManyWithoutOrderByInput
}

input UserCreateWithoutCheckInsInput {
  firstName: String!
  lastName: String
  email: String!
  userRole: UserRole
  userType: UserType!
  avatarUrl: String
  whatsappNumber: String!
  password: String!
  status: UserStatus
  theme: Theme
  address: AddressCreateNestedOneWithoutUserInput!
  referredBy: UserCreateNestedOneWithoutReferredUsersInput
  school: SchoolCreateNestedOneWithoutStudentsInput
  accounts: AccountCreateNestedManyWithoutUserInput
  orders: OrderCreateNestedManyWithoutOrderByInput
}

input UserCreateWithoutClaimedRewardsInput {
  firstName: String!
  lastName: String
  email: String!
  userRole: UserRole
  userType: UserType!
  avatarUrl: String
  whatsappNumber: String!
  password: String!
  status: UserStatus
  theme: Theme
  address: AddressCreateNestedOneWithoutUserInput!
  referredBy: UserCreateNestedOneWithoutReferredUsersInput
  school: SchoolCreateNestedOneWithoutStudentsInput
  accounts: AccountCreateNestedManyWithoutUserInput
  orders: OrderCreateNestedManyWithoutOrderByInput
}

input UserCreateWithoutFilesCreatedInput {
  firstName: String!
  lastName: String
  email: String!
  userRole: UserRole
  userType: UserType!
  avatarUrl: String
  whatsappNumber: String!
  password: String!
  status: UserStatus
  theme: Theme
  address: AddressCreateNestedOneWithoutUserInput!
  referredBy: UserCreateNestedOneWithoutReferredUsersInput
  school: SchoolCreateNestedOneWithoutStudentsInput
  accounts: AccountCreateNestedManyWithoutUserInput
  orders: OrderCreateNestedManyWithoutOrderByInput
}

input UserCreateWithoutHotelsCreatedInput {
  firstName: String!
  lastName: String
  email: String!
  userRole: UserRole
  userType: UserType!
  avatarUrl: String
  whatsappNumber: String!
  password: String!
  status: UserStatus
  theme: Theme
  address: AddressCreateNestedOneWithoutUserInput!
  referredBy: UserCreateNestedOneWithoutReferredUsersInput
  school: SchoolCreateNestedOneWithoutStudentsInput
  accounts: AccountCreateNestedManyWithoutUserInput
  orders: OrderCreateNestedManyWithoutOrderByInput
}

input UserCreateWithoutOrdersInput {
  firstName: String!
  lastName: String
  email: String!
  userRole: UserRole
  userType: UserType!
  avatarUrl: String
  whatsappNumber: String!
  password: String!
  status: UserStatus
  theme: Theme
  address: AddressCreateNestedOneWithoutUserInput!
  referredBy: UserCreateNestedOneWithoutReferredUsersInput
  school: SchoolCreateNestedOneWithoutStudentsInput
  accounts: AccountCreateNestedManyWithoutUserInput
}

input UserCreateWithoutPointTransactionsInput {
  firstName: String!
  lastName: String
  email: String!
  userRole: UserRole
  userType: UserType!
  avatarUrl: String
  whatsappNumber: String!
  password: String!
  status: UserStatus
  theme: Theme
  address: AddressCreateNestedOneWithoutUserInput!
  referredBy: UserCreateNestedOneWithoutReferredUsersInput
  school: SchoolCreateNestedOneWithoutStudentsInput
  accounts: AccountCreateNestedManyWithoutUserInput
  orders: OrderCreateNestedManyWithoutOrderByInput
}

input UserCreateWithoutProgramsCreatedInput {
  firstName: String!
  lastName: String
  email: String!
  userRole: UserRole
  userType: UserType!
  avatarUrl: String
  whatsappNumber: String!
  password: String!
  status: UserStatus
  theme: Theme
  address: AddressCreateNestedOneWithoutUserInput!
  referredBy: UserCreateNestedOneWithoutReferredUsersInput
  school: SchoolCreateNestedOneWithoutStudentsInput
  accounts: AccountCreateNestedManyWithoutUserInput
  orders: OrderCreateNestedManyWithoutOrderByInput
}

input UserCreateWithoutProgramsParticipationInput {
  firstName: String!
  lastName: String
  email: String!
  userRole: UserRole
  userType: UserType!
  avatarUrl: String
  whatsappNumber: String!
  password: String!
  status: UserStatus
  theme: Theme
  address: AddressCreateNestedOneWithoutUserInput!
  referredBy: UserCreateNestedOneWithoutReferredUsersInput
  school: SchoolCreateNestedOneWithoutStudentsInput
  accounts: AccountCreateNestedManyWithoutUserInput
  orders: OrderCreateNestedManyWithoutOrderByInput
}

input UserCreateWithoutProjectsInvestmentInput {
  firstName: String!
  lastName: String
  email: String!
  userRole: UserRole
  userType: UserType!
  avatarUrl: String
  whatsappNumber: String!
  password: String!
  status: UserStatus
  theme: Theme
  address: AddressCreateNestedOneWithoutUserInput!
  referredBy: UserCreateNestedOneWithoutReferredUsersInput
  school: SchoolCreateNestedOneWithoutStudentsInput
  accounts: AccountCreateNestedManyWithoutUserInput
  orders: OrderCreateNestedManyWithoutOrderByInput
}

input UserCreateWithoutReferredByInput {
  firstName: String!
  lastName: String
  email: String!
  userRole: UserRole
  userType: UserType!
  avatarUrl: String
  whatsappNumber: String!
  password: String!
  status: UserStatus
  theme: Theme
  address: AddressCreateNestedOneWithoutUserInput!
  school: SchoolCreateNestedOneWithoutStudentsInput
  accounts: AccountCreateNestedManyWithoutUserInput
  orders: OrderCreateNestedManyWithoutOrderByInput
}

input UserCreateWithoutReferredUsersInput {
  firstName: String!
  lastName: String
  email: String!
  userRole: UserRole
  userType: UserType!
  avatarUrl: String
  whatsappNumber: String!
  password: String!
  status: UserStatus
  theme: Theme
  address: AddressCreateNestedOneWithoutUserInput!
  referredBy: UserCreateNestedOneWithoutReferredUsersInput
  school: SchoolCreateNestedOneWithoutStudentsInput
  accounts: AccountCreateNestedManyWithoutUserInput
  orders: OrderCreateNestedManyWithoutOrderByInput
}

input UserCreateWithoutUserNotificationsInput {
  firstName: String!
  lastName: String
  email: String!
  userRole: UserRole
  userType: UserType!
  avatarUrl: String
  whatsappNumber: String!
  password: String!
  status: UserStatus
  theme: Theme
  address: AddressCreateNestedOneWithoutUserInput!
  referredBy: UserCreateNestedOneWithoutReferredUsersInput
  school: SchoolCreateNestedOneWithoutStudentsInput
  accounts: AccountCreateNestedManyWithoutUserInput
  orders: OrderCreateNestedManyWithoutOrderByInput
}

input UserFindManyArgs {
  where: UserWhereInput
  orderBy: [UserOrderByWithRelationInput!]
  cursor: UserWhereUniqueInput
  take: Int
  skip: Int
  distinct: [UserScalarFieldEnum!]
}

input UserFindUniqueArgs {
  where: UserWhereUniqueInput!
}

input UserListRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

type UserMaxAggregate {
  id: String
  firstName: String
  lastName: String
  email: String
  addressId: Int
  userRole: UserRole
  userType: UserType
  avatarUrl: String
  whatsappNumber: String
  whatsappVerifiedAt: DateTime
  referralCode: String
  referredById: String
  status: UserStatus
  schoolId: Int
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  theme: Theme
}

type UserMinAggregate {
  id: String
  firstName: String
  lastName: String
  email: String
  addressId: Int
  userRole: UserRole
  userType: UserType
  avatarUrl: String
  whatsappNumber: String
  whatsappVerifiedAt: DateTime
  referralCode: String
  referredById: String
  status: UserStatus
  schoolId: Int
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  theme: Theme
}

type UserNotification {
  id: Int!
  title: String!
  subtitle: String!
  content: String!
  createdAt: DateTime!
  category: UserNotificationCategory!
  isRead: Boolean!
  isCleared: Boolean!
  userId: String!
  deepLink: String
  fcmToken: String
  user: UserAbstract!
}

type UserNotificationAvgAggregate {
  id: Float
}

enum UserNotificationCategory {
  BILLING_ALERT
  ANNOUNCEMENT
  CHAT_MESSAGE
}

type UserNotificationCountAggregate {
  id: Int!
  title: Int!
  subtitle: Int!
  content: Int!
  createdAt: Int!
  category: Int!
  isRead: Int!
  isCleared: Int!
  userId: Int!
  deepLink: Int!
  fcmToken: Int!
  _all: Int!
}

input UserNotificationCreateArgs {
  data: UserNotificationCreateInput!
}

input UserNotificationCreateInput {
  title: String!
  subtitle: String!
  content: String!
  createdAt: DateTime
  category: UserNotificationCategory!
  isRead: Boolean
  isCleared: Boolean
  deepLink: String
  fcmToken: String
  user: UserCreateNestedOneWithoutUserNotificationsInput!
}

input UserNotificationFindManyArgs {
  where: UserNotificationWhereInput
  orderBy: [UserNotificationOrderByWithRelationInput!]
  take: Int
  skip: Int
  distinct: [UserNotificationScalarFieldEnum!]
}

input UserNotificationFindUniqueArgs {
  where: UserNotificationWhereUniqueInput!
}

type UserNotificationMaxAggregate {
  id: Int
  title: String
  subtitle: String
  content: String
  createdAt: DateTime
  category: UserNotificationCategory
  isRead: Boolean
  isCleared: Boolean
  userId: String
  deepLink: String
  fcmToken: String
}

type UserNotificationMinAggregate {
  id: Int
  title: String
  subtitle: String
  content: String
  createdAt: DateTime
  category: UserNotificationCategory
  isRead: Boolean
  isCleared: Boolean
  userId: String
  deepLink: String
  fcmToken: String
}

input UserNotificationOrderByWithRelationInput {
  id: SortOrder
  title: SortOrder
  subtitle: SortOrder
  content: SortOrder
  createdAt: SortOrder
  category: SortOrder
  isRead: SortOrder
  isCleared: SortOrder
  userId: SortOrder
  deepLink: SortOrderInput
  fcmToken: SortOrderInput
  user: UserOrderByWithRelationInput
}

enum UserNotificationScalarFieldEnum {
  id
  title
  subtitle
  content
  createdAt
  category
  isRead
  isCleared
  userId
  deepLink
  fcmToken
}

type UserNotificationSumAggregate {
  id: Int
}

input UserNotificationUpdateInput {
  title: StringFieldUpdateOperationsInput
  subtitle: StringFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  category: EnumUserNotificationCategoryFieldUpdateOperationsInput
  isRead: BoolFieldUpdateOperationsInput
  isCleared: BoolFieldUpdateOperationsInput
  deepLink: NullableStringFieldUpdateOperationsInput
  fcmToken: NullableStringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutUserNotificationsNestedInput
}

input UserNotificationUpdateOneArgs {
  data: UserNotificationUpdateInput!
  where: UserNotificationWhereUniqueInput!
}

input UserNotificationWhereInput {
  AND: [UserNotificationWhereInput!]
  OR: [UserNotificationWhereInput!]
  NOT: [UserNotificationWhereInput!]
  id: IntFilter
  title: StringFilter
  subtitle: StringFilter
  content: StringFilter
  createdAt: DateTimeFilter
  category: EnumUserNotificationCategoryFilter
  isRead: BoolFilter
  isCleared: BoolFilter
  userId: StringFilter
  deepLink: StringNullableFilter
  fcmToken: StringNullableFilter
  user: UserRelationFilter
}

input UserNotificationWhereUniqueInput {
  id: Int
  AND: [UserNotificationWhereInput!]
  OR: [UserNotificationWhereInput!]
  NOT: [UserNotificationWhereInput!]
  title: StringFilter
  subtitle: StringFilter
  content: StringFilter
  createdAt: DateTimeFilter
  category: EnumUserNotificationCategoryFilter
  isRead: BoolFilter
  isCleared: BoolFilter
  userId: StringFilter
  deepLink: StringNullableFilter
  fcmToken: StringNullableFilter
  user: UserRelationFilter
}

input UserNullableRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input UserOrderByRelationAggregateInput {
  _count: SortOrder
}

input UserOrderByWithRelationInput {
  id: SortOrder
  firstName: SortOrder
  lastName: SortOrderInput
  email: SortOrder
  userRole: SortOrder
  userType: SortOrder
  avatarUrl: SortOrderInput
  whatsappNumber: SortOrder
  password: SortOrder
  referralCode: SortOrder
  status: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  deletedAt: SortOrderInput
  theme: SortOrder
  address: AddressOrderByWithRelationInput
  referredBy: UserOrderByWithRelationInput
  referredUsers: UserOrderByRelationAggregateInput
  checkIns: CheckInOrderByRelationAggregateInput
  school: SchoolOrderByWithRelationInput
  accounts: AccountOrderByRelationAggregateInput
  orders: OrderOrderByRelationAggregateInput
  hotelsCreated: HotelOrderByRelationAggregateInput
  programsCreated: ProgramOrderByRelationAggregateInput
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserRole {
  MEMBER
  ADMIN
  SUPERUSER
  STUDENT
}

enum UserScalarFieldEnum {
  id
  firstName
  lastName
  email
  addressId
  userRole
  userType
  avatarUrl
  whatsappNumber
  whatsappVerifiedAt
  password
  referralCode
  referredById
  status
  schoolId
  createdAt
  updatedAt
  deletedAt
  theme
}

input UserScalarWhereInput {
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
  id: StringFilter
  firstName: StringFilter
  lastName: StringNullableFilter
  email: StringFilter
  userRole: EnumUserRoleFilter
  userType: EnumUserTypeFilter
  avatarUrl: StringNullableFilter
  whatsappNumber: StringFilter
  password: StringFilter
  referralCode: StringFilter
  status: EnumUserStatusFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  theme: EnumThemeFilter
}

enum UserStatus {
  ACTIVE
  PENDING
  INACTIVE
}

type UserSumAggregate {
  addressId: Int
  schoolId: Int
}

enum UserType {
  PARENT
  SCHOOL_HEAD
  STUDENT
}

input UserUpdateInput {
  firstName: StringFieldUpdateOperationsInput
  lastName: NullableStringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  userRole: EnumUserRoleFieldUpdateOperationsInput
  userType: EnumUserTypeFieldUpdateOperationsInput
  avatarUrl: NullableStringFieldUpdateOperationsInput
  whatsappNumber: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  status: EnumUserStatusFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  theme: EnumThemeFieldUpdateOperationsInput
  address: AddressUpdateOneRequiredWithoutUserNestedInput
  referredBy: UserUpdateOneWithoutReferredUsersNestedInput
  referredUsers: UserUpdateManyWithoutReferredByNestedInput
  checkIns: CheckInUpdateManyWithoutUserNestedInput
  school: SchoolUpdateOneWithoutStudentsNestedInput
  accounts: AccountUpdateManyWithoutUserNestedInput
  orders: OrderUpdateManyWithoutOrderByNestedInput
  hotelsCreated: HotelUpdateManyWithoutCreatedByNestedInput
  programsCreated: ProgramUpdateManyWithoutCreatedByNestedInput
}

input UserUpdateManyMutationInput {
  firstName: StringFieldUpdateOperationsInput
  lastName: NullableStringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  userRole: EnumUserRoleFieldUpdateOperationsInput
  userType: EnumUserTypeFieldUpdateOperationsInput
  avatarUrl: NullableStringFieldUpdateOperationsInput
  whatsappNumber: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  status: EnumUserStatusFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  theme: EnumThemeFieldUpdateOperationsInput
}

input UserUpdateManyWithoutClaimedRewardsNestedInput {
  create: [UserCreateWithoutClaimedRewardsInput!]
  connectOrCreate: [UserCreateOrConnectWithoutClaimedRewardsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutClaimedRewardsInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutClaimedRewardsInput!]
  updateMany: [UserUpdateManyWithWhereWithoutClaimedRewardsInput!]
  deleteMany: [UserScalarWhereInput!]
}

input UserUpdateManyWithoutProgramsParticipationNestedInput {
  create: [UserCreateWithoutProgramsParticipationInput!]
  connectOrCreate: [UserCreateOrConnectWithoutProgramsParticipationInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutProgramsParticipationInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutProgramsParticipationInput!]
  updateMany: [UserUpdateManyWithWhereWithoutProgramsParticipationInput!]
  deleteMany: [UserScalarWhereInput!]
}

input UserUpdateManyWithoutProjectsInvestmentNestedInput {
  create: [UserCreateWithoutProjectsInvestmentInput!]
  connectOrCreate: [UserCreateOrConnectWithoutProjectsInvestmentInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutProjectsInvestmentInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutProjectsInvestmentInput!]
  updateMany: [UserUpdateManyWithWhereWithoutProjectsInvestmentInput!]
  deleteMany: [UserScalarWhereInput!]
}

input UserUpdateManyWithoutReferredByNestedInput {
  create: [UserCreateWithoutReferredByInput!]
  connectOrCreate: [UserCreateOrConnectWithoutReferredByInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutReferredByInput!]
  createMany: UserCreateManyReferredByInputEnvelope
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutReferredByInput!]
  updateMany: [UserUpdateManyWithWhereWithoutReferredByInput!]
  deleteMany: [UserScalarWhereInput!]
}

input UserUpdateManyWithWhereWithoutClaimedRewardsInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyMutationInput!
}

input UserUpdateManyWithWhereWithoutProgramsParticipationInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyMutationInput!
}

input UserUpdateManyWithWhereWithoutProjectsInvestmentInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyMutationInput!
}

input UserUpdateManyWithWhereWithoutReferredByInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyMutationInput!
}

input UserUpdateOneArgs {
  data: UserUpdateInput!
  where: UserWhereUniqueInput!
}

input UserUpdateOneRequiredWithoutAccountsNestedInput {
  create: UserCreateWithoutAccountsInput
  connectOrCreate: UserCreateOrConnectWithoutAccountsInput
  upsert: UserUpsertWithoutAccountsInput
  connect: UserWhereUniqueInput
  update: UserUpdateToOneWithWhereWithoutAccountsInput
}

input UserUpdateOneRequiredWithoutCheckInsNestedInput {
  create: UserCreateWithoutCheckInsInput
  connectOrCreate: UserCreateOrConnectWithoutCheckInsInput
  upsert: UserUpsertWithoutCheckInsInput
  connect: UserWhereUniqueInput
  update: UserUpdateToOneWithWhereWithoutCheckInsInput
}

input UserUpdateOneRequiredWithoutFilesCreatedNestedInput {
  create: UserCreateWithoutFilesCreatedInput
  connectOrCreate: UserCreateOrConnectWithoutFilesCreatedInput
  upsert: UserUpsertWithoutFilesCreatedInput
  connect: UserWhereUniqueInput
  update: UserUpdateToOneWithWhereWithoutFilesCreatedInput
}

input UserUpdateOneRequiredWithoutHotelsCreatedNestedInput {
  create: UserCreateWithoutHotelsCreatedInput
  connectOrCreate: UserCreateOrConnectWithoutHotelsCreatedInput
  upsert: UserUpsertWithoutHotelsCreatedInput
  connect: UserWhereUniqueInput
  update: UserUpdateToOneWithWhereWithoutHotelsCreatedInput
}

input UserUpdateOneRequiredWithoutOrdersNestedInput {
  create: UserCreateWithoutOrdersInput
  connectOrCreate: UserCreateOrConnectWithoutOrdersInput
  upsert: UserUpsertWithoutOrdersInput
  connect: UserWhereUniqueInput
  update: UserUpdateToOneWithWhereWithoutOrdersInput
}

input UserUpdateOneRequiredWithoutProgramsCreatedNestedInput {
  create: UserCreateWithoutProgramsCreatedInput
  connectOrCreate: UserCreateOrConnectWithoutProgramsCreatedInput
  upsert: UserUpsertWithoutProgramsCreatedInput
  connect: UserWhereUniqueInput
  update: UserUpdateToOneWithWhereWithoutProgramsCreatedInput
}

input UserUpdateOneRequiredWithoutUserNotificationsNestedInput {
  create: UserCreateWithoutUserNotificationsInput
  connectOrCreate: UserCreateOrConnectWithoutUserNotificationsInput
  upsert: UserUpsertWithoutUserNotificationsInput
  connect: UserWhereUniqueInput
  update: UserUpdateToOneWithWhereWithoutUserNotificationsInput
}

input UserUpdateOneWithoutAddressNestedInput {
  create: UserCreateWithoutAddressInput
  connectOrCreate: UserCreateOrConnectWithoutAddressInput
  upsert: UserUpsertWithoutAddressInput
  disconnect: UserWhereInput
  delete: UserWhereInput
  connect: UserWhereUniqueInput
  update: UserUpdateToOneWithWhereWithoutAddressInput
}

input UserUpdateOneWithoutReferredUsersNestedInput {
  create: UserCreateWithoutReferredUsersInput
  connectOrCreate: UserCreateOrConnectWithoutReferredUsersInput
  upsert: UserUpsertWithoutReferredUsersInput
  disconnect: UserWhereInput
  delete: UserWhereInput
  connect: UserWhereUniqueInput
  update: UserUpdateToOneWithWhereWithoutReferredUsersInput
}

input UserUpdateToOneWithWhereWithoutAccountsInput {
  where: UserWhereInput
  data: UserUpdateWithoutAccountsInput!
}

input UserUpdateToOneWithWhereWithoutAddressInput {
  where: UserWhereInput
  data: UserUpdateWithoutAddressInput!
}

input UserUpdateToOneWithWhereWithoutCheckInsInput {
  where: UserWhereInput
  data: UserUpdateWithoutCheckInsInput!
}

input UserUpdateToOneWithWhereWithoutFilesCreatedInput {
  where: UserWhereInput
  data: UserUpdateWithoutFilesCreatedInput!
}

input UserUpdateToOneWithWhereWithoutHotelsCreatedInput {
  where: UserWhereInput
  data: UserUpdateWithoutHotelsCreatedInput!
}

input UserUpdateToOneWithWhereWithoutOrdersInput {
  where: UserWhereInput
  data: UserUpdateWithoutOrdersInput!
}

input UserUpdateToOneWithWhereWithoutProgramsCreatedInput {
  where: UserWhereInput
  data: UserUpdateWithoutProgramsCreatedInput!
}

input UserUpdateToOneWithWhereWithoutReferredUsersInput {
  where: UserWhereInput
  data: UserUpdateWithoutReferredUsersInput!
}

input UserUpdateToOneWithWhereWithoutUserNotificationsInput {
  where: UserWhereInput
  data: UserUpdateWithoutUserNotificationsInput!
}

input UserUpdateWithoutAccountsInput {
  firstName: StringFieldUpdateOperationsInput
  lastName: NullableStringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  userRole: EnumUserRoleFieldUpdateOperationsInput
  userType: EnumUserTypeFieldUpdateOperationsInput
  avatarUrl: NullableStringFieldUpdateOperationsInput
  whatsappNumber: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  status: EnumUserStatusFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  theme: EnumThemeFieldUpdateOperationsInput
  address: AddressUpdateOneRequiredWithoutUserNestedInput
  referredBy: UserUpdateOneWithoutReferredUsersNestedInput
  referredUsers: UserUpdateManyWithoutReferredByNestedInput
  checkIns: CheckInUpdateManyWithoutUserNestedInput
  school: SchoolUpdateOneWithoutStudentsNestedInput
  orders: OrderUpdateManyWithoutOrderByNestedInput
  hotelsCreated: HotelUpdateManyWithoutCreatedByNestedInput
  programsCreated: ProgramUpdateManyWithoutCreatedByNestedInput
}

input UserUpdateWithoutAddressInput {
  firstName: StringFieldUpdateOperationsInput
  lastName: NullableStringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  userRole: EnumUserRoleFieldUpdateOperationsInput
  userType: EnumUserTypeFieldUpdateOperationsInput
  avatarUrl: NullableStringFieldUpdateOperationsInput
  whatsappNumber: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  status: EnumUserStatusFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  theme: EnumThemeFieldUpdateOperationsInput
  referredBy: UserUpdateOneWithoutReferredUsersNestedInput
  referredUsers: UserUpdateManyWithoutReferredByNestedInput
  checkIns: CheckInUpdateManyWithoutUserNestedInput
  school: SchoolUpdateOneWithoutStudentsNestedInput
  accounts: AccountUpdateManyWithoutUserNestedInput
  orders: OrderUpdateManyWithoutOrderByNestedInput
  hotelsCreated: HotelUpdateManyWithoutCreatedByNestedInput
  programsCreated: ProgramUpdateManyWithoutCreatedByNestedInput
}

input UserUpdateWithoutCheckInsInput {
  firstName: StringFieldUpdateOperationsInput
  lastName: NullableStringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  userRole: EnumUserRoleFieldUpdateOperationsInput
  userType: EnumUserTypeFieldUpdateOperationsInput
  avatarUrl: NullableStringFieldUpdateOperationsInput
  whatsappNumber: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  status: EnumUserStatusFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  theme: EnumThemeFieldUpdateOperationsInput
  address: AddressUpdateOneRequiredWithoutUserNestedInput
  referredBy: UserUpdateOneWithoutReferredUsersNestedInput
  referredUsers: UserUpdateManyWithoutReferredByNestedInput
  school: SchoolUpdateOneWithoutStudentsNestedInput
  accounts: AccountUpdateManyWithoutUserNestedInput
  orders: OrderUpdateManyWithoutOrderByNestedInput
  hotelsCreated: HotelUpdateManyWithoutCreatedByNestedInput
  programsCreated: ProgramUpdateManyWithoutCreatedByNestedInput
}

input UserUpdateWithoutClaimedRewardsInput {
  firstName: StringFieldUpdateOperationsInput
  lastName: NullableStringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  userRole: EnumUserRoleFieldUpdateOperationsInput
  userType: EnumUserTypeFieldUpdateOperationsInput
  avatarUrl: NullableStringFieldUpdateOperationsInput
  whatsappNumber: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  status: EnumUserStatusFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  theme: EnumThemeFieldUpdateOperationsInput
  address: AddressUpdateOneRequiredWithoutUserNestedInput
  referredBy: UserUpdateOneWithoutReferredUsersNestedInput
  referredUsers: UserUpdateManyWithoutReferredByNestedInput
  checkIns: CheckInUpdateManyWithoutUserNestedInput
  school: SchoolUpdateOneWithoutStudentsNestedInput
  accounts: AccountUpdateManyWithoutUserNestedInput
  orders: OrderUpdateManyWithoutOrderByNestedInput
  hotelsCreated: HotelUpdateManyWithoutCreatedByNestedInput
  programsCreated: ProgramUpdateManyWithoutCreatedByNestedInput
}

input UserUpdateWithoutFilesCreatedInput {
  firstName: StringFieldUpdateOperationsInput
  lastName: NullableStringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  userRole: EnumUserRoleFieldUpdateOperationsInput
  userType: EnumUserTypeFieldUpdateOperationsInput
  avatarUrl: NullableStringFieldUpdateOperationsInput
  whatsappNumber: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  status: EnumUserStatusFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  theme: EnumThemeFieldUpdateOperationsInput
  address: AddressUpdateOneRequiredWithoutUserNestedInput
  referredBy: UserUpdateOneWithoutReferredUsersNestedInput
  referredUsers: UserUpdateManyWithoutReferredByNestedInput
  checkIns: CheckInUpdateManyWithoutUserNestedInput
  school: SchoolUpdateOneWithoutStudentsNestedInput
  accounts: AccountUpdateManyWithoutUserNestedInput
  orders: OrderUpdateManyWithoutOrderByNestedInput
  hotelsCreated: HotelUpdateManyWithoutCreatedByNestedInput
  programsCreated: ProgramUpdateManyWithoutCreatedByNestedInput
}

input UserUpdateWithoutHotelsCreatedInput {
  firstName: StringFieldUpdateOperationsInput
  lastName: NullableStringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  userRole: EnumUserRoleFieldUpdateOperationsInput
  userType: EnumUserTypeFieldUpdateOperationsInput
  avatarUrl: NullableStringFieldUpdateOperationsInput
  whatsappNumber: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  status: EnumUserStatusFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  theme: EnumThemeFieldUpdateOperationsInput
  address: AddressUpdateOneRequiredWithoutUserNestedInput
  referredBy: UserUpdateOneWithoutReferredUsersNestedInput
  referredUsers: UserUpdateManyWithoutReferredByNestedInput
  checkIns: CheckInUpdateManyWithoutUserNestedInput
  school: SchoolUpdateOneWithoutStudentsNestedInput
  accounts: AccountUpdateManyWithoutUserNestedInput
  orders: OrderUpdateManyWithoutOrderByNestedInput
  programsCreated: ProgramUpdateManyWithoutCreatedByNestedInput
}

input UserUpdateWithoutOrdersInput {
  firstName: StringFieldUpdateOperationsInput
  lastName: NullableStringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  userRole: EnumUserRoleFieldUpdateOperationsInput
  userType: EnumUserTypeFieldUpdateOperationsInput
  avatarUrl: NullableStringFieldUpdateOperationsInput
  whatsappNumber: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  status: EnumUserStatusFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  theme: EnumThemeFieldUpdateOperationsInput
  address: AddressUpdateOneRequiredWithoutUserNestedInput
  referredBy: UserUpdateOneWithoutReferredUsersNestedInput
  referredUsers: UserUpdateManyWithoutReferredByNestedInput
  checkIns: CheckInUpdateManyWithoutUserNestedInput
  school: SchoolUpdateOneWithoutStudentsNestedInput
  accounts: AccountUpdateManyWithoutUserNestedInput
  hotelsCreated: HotelUpdateManyWithoutCreatedByNestedInput
  programsCreated: ProgramUpdateManyWithoutCreatedByNestedInput
}

input UserUpdateWithoutProgramsCreatedInput {
  firstName: StringFieldUpdateOperationsInput
  lastName: NullableStringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  userRole: EnumUserRoleFieldUpdateOperationsInput
  userType: EnumUserTypeFieldUpdateOperationsInput
  avatarUrl: NullableStringFieldUpdateOperationsInput
  whatsappNumber: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  status: EnumUserStatusFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  theme: EnumThemeFieldUpdateOperationsInput
  address: AddressUpdateOneRequiredWithoutUserNestedInput
  referredBy: UserUpdateOneWithoutReferredUsersNestedInput
  referredUsers: UserUpdateManyWithoutReferredByNestedInput
  checkIns: CheckInUpdateManyWithoutUserNestedInput
  school: SchoolUpdateOneWithoutStudentsNestedInput
  accounts: AccountUpdateManyWithoutUserNestedInput
  orders: OrderUpdateManyWithoutOrderByNestedInput
  hotelsCreated: HotelUpdateManyWithoutCreatedByNestedInput
}

input UserUpdateWithoutProgramsParticipationInput {
  firstName: StringFieldUpdateOperationsInput
  lastName: NullableStringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  userRole: EnumUserRoleFieldUpdateOperationsInput
  userType: EnumUserTypeFieldUpdateOperationsInput
  avatarUrl: NullableStringFieldUpdateOperationsInput
  whatsappNumber: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  status: EnumUserStatusFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  theme: EnumThemeFieldUpdateOperationsInput
  address: AddressUpdateOneRequiredWithoutUserNestedInput
  referredBy: UserUpdateOneWithoutReferredUsersNestedInput
  referredUsers: UserUpdateManyWithoutReferredByNestedInput
  checkIns: CheckInUpdateManyWithoutUserNestedInput
  school: SchoolUpdateOneWithoutStudentsNestedInput
  accounts: AccountUpdateManyWithoutUserNestedInput
  orders: OrderUpdateManyWithoutOrderByNestedInput
  hotelsCreated: HotelUpdateManyWithoutCreatedByNestedInput
  programsCreated: ProgramUpdateManyWithoutCreatedByNestedInput
}

input UserUpdateWithoutProjectsInvestmentInput {
  firstName: StringFieldUpdateOperationsInput
  lastName: NullableStringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  userRole: EnumUserRoleFieldUpdateOperationsInput
  userType: EnumUserTypeFieldUpdateOperationsInput
  avatarUrl: NullableStringFieldUpdateOperationsInput
  whatsappNumber: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  status: EnumUserStatusFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  theme: EnumThemeFieldUpdateOperationsInput
  address: AddressUpdateOneRequiredWithoutUserNestedInput
  referredBy: UserUpdateOneWithoutReferredUsersNestedInput
  referredUsers: UserUpdateManyWithoutReferredByNestedInput
  checkIns: CheckInUpdateManyWithoutUserNestedInput
  school: SchoolUpdateOneWithoutStudentsNestedInput
  accounts: AccountUpdateManyWithoutUserNestedInput
  orders: OrderUpdateManyWithoutOrderByNestedInput
  hotelsCreated: HotelUpdateManyWithoutCreatedByNestedInput
  programsCreated: ProgramUpdateManyWithoutCreatedByNestedInput
}

input UserUpdateWithoutReferredByInput {
  firstName: StringFieldUpdateOperationsInput
  lastName: NullableStringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  userRole: EnumUserRoleFieldUpdateOperationsInput
  userType: EnumUserTypeFieldUpdateOperationsInput
  avatarUrl: NullableStringFieldUpdateOperationsInput
  whatsappNumber: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  status: EnumUserStatusFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  theme: EnumThemeFieldUpdateOperationsInput
  address: AddressUpdateOneRequiredWithoutUserNestedInput
  referredUsers: UserUpdateManyWithoutReferredByNestedInput
  checkIns: CheckInUpdateManyWithoutUserNestedInput
  school: SchoolUpdateOneWithoutStudentsNestedInput
  accounts: AccountUpdateManyWithoutUserNestedInput
  orders: OrderUpdateManyWithoutOrderByNestedInput
  hotelsCreated: HotelUpdateManyWithoutCreatedByNestedInput
  programsCreated: ProgramUpdateManyWithoutCreatedByNestedInput
}

input UserUpdateWithoutReferredUsersInput {
  firstName: StringFieldUpdateOperationsInput
  lastName: NullableStringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  userRole: EnumUserRoleFieldUpdateOperationsInput
  userType: EnumUserTypeFieldUpdateOperationsInput
  avatarUrl: NullableStringFieldUpdateOperationsInput
  whatsappNumber: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  status: EnumUserStatusFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  theme: EnumThemeFieldUpdateOperationsInput
  address: AddressUpdateOneRequiredWithoutUserNestedInput
  referredBy: UserUpdateOneWithoutReferredUsersNestedInput
  checkIns: CheckInUpdateManyWithoutUserNestedInput
  school: SchoolUpdateOneWithoutStudentsNestedInput
  accounts: AccountUpdateManyWithoutUserNestedInput
  orders: OrderUpdateManyWithoutOrderByNestedInput
  hotelsCreated: HotelUpdateManyWithoutCreatedByNestedInput
  programsCreated: ProgramUpdateManyWithoutCreatedByNestedInput
}

input UserUpdateWithoutUserNotificationsInput {
  firstName: StringFieldUpdateOperationsInput
  lastName: NullableStringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  userRole: EnumUserRoleFieldUpdateOperationsInput
  userType: EnumUserTypeFieldUpdateOperationsInput
  avatarUrl: NullableStringFieldUpdateOperationsInput
  whatsappNumber: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  status: EnumUserStatusFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  theme: EnumThemeFieldUpdateOperationsInput
  address: AddressUpdateOneRequiredWithoutUserNestedInput
  referredBy: UserUpdateOneWithoutReferredUsersNestedInput
  referredUsers: UserUpdateManyWithoutReferredByNestedInput
  checkIns: CheckInUpdateManyWithoutUserNestedInput
  school: SchoolUpdateOneWithoutStudentsNestedInput
  accounts: AccountUpdateManyWithoutUserNestedInput
  orders: OrderUpdateManyWithoutOrderByNestedInput
  hotelsCreated: HotelUpdateManyWithoutCreatedByNestedInput
  programsCreated: ProgramUpdateManyWithoutCreatedByNestedInput
}

input UserUpdateWithWhereUniqueWithoutClaimedRewardsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutClaimedRewardsInput!
}

input UserUpdateWithWhereUniqueWithoutProgramsParticipationInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutProgramsParticipationInput!
}

input UserUpdateWithWhereUniqueWithoutProjectsInvestmentInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutProjectsInvestmentInput!
}

input UserUpdateWithWhereUniqueWithoutReferredByInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutReferredByInput!
}

input UserUpsertWithoutAccountsInput {
  update: UserUpdateWithoutAccountsInput!
  create: UserCreateWithoutAccountsInput!
  where: UserWhereInput
}

input UserUpsertWithoutAddressInput {
  update: UserUpdateWithoutAddressInput!
  create: UserCreateWithoutAddressInput!
  where: UserWhereInput
}

input UserUpsertWithoutCheckInsInput {
  update: UserUpdateWithoutCheckInsInput!
  create: UserCreateWithoutCheckInsInput!
  where: UserWhereInput
}

input UserUpsertWithoutFilesCreatedInput {
  update: UserUpdateWithoutFilesCreatedInput!
  create: UserCreateWithoutFilesCreatedInput!
  where: UserWhereInput
}

input UserUpsertWithoutHotelsCreatedInput {
  update: UserUpdateWithoutHotelsCreatedInput!
  create: UserCreateWithoutHotelsCreatedInput!
  where: UserWhereInput
}

input UserUpsertWithoutOrdersInput {
  update: UserUpdateWithoutOrdersInput!
  create: UserCreateWithoutOrdersInput!
  where: UserWhereInput
}

input UserUpsertWithoutProgramsCreatedInput {
  update: UserUpdateWithoutProgramsCreatedInput!
  create: UserCreateWithoutProgramsCreatedInput!
  where: UserWhereInput
}

input UserUpsertWithoutReferredUsersInput {
  update: UserUpdateWithoutReferredUsersInput!
  create: UserCreateWithoutReferredUsersInput!
  where: UserWhereInput
}

input UserUpsertWithoutUserNotificationsInput {
  update: UserUpdateWithoutUserNotificationsInput!
  create: UserCreateWithoutUserNotificationsInput!
  where: UserWhereInput
}

input UserUpsertWithWhereUniqueWithoutClaimedRewardsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutClaimedRewardsInput!
  create: UserCreateWithoutClaimedRewardsInput!
}

input UserUpsertWithWhereUniqueWithoutProgramsParticipationInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutProgramsParticipationInput!
  create: UserCreateWithoutProgramsParticipationInput!
}

input UserUpsertWithWhereUniqueWithoutProjectsInvestmentInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutProjectsInvestmentInput!
  create: UserCreateWithoutProjectsInvestmentInput!
}

input UserUpsertWithWhereUniqueWithoutReferredByInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutReferredByInput!
  create: UserCreateWithoutReferredByInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: StringFilter
  firstName: StringFilter
  lastName: StringNullableFilter
  email: StringFilter
  userRole: EnumUserRoleFilter
  userType: EnumUserTypeFilter
  avatarUrl: StringNullableFilter
  whatsappNumber: StringFilter
  password: StringFilter
  referralCode: StringFilter
  status: EnumUserStatusFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  theme: EnumThemeFilter
  address: AddressRelationFilter
  referredBy: UserNullableRelationFilter
  referredUsers: UserListRelationFilter
  checkIns: CheckInListRelationFilter
  school: SchoolNullableRelationFilter
  accounts: AccountListRelationFilter
  orders: OrderListRelationFilter
  hotelsCreated: HotelListRelationFilter
  programsCreated: ProgramListRelationFilter
}

input UserWhereUniqueInput {
  id: String
  email: String
  whatsappNumber: String
  referralCode: String
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  firstName: StringFilter
  lastName: StringNullableFilter
  userRole: EnumUserRoleFilter
  userType: EnumUserTypeFilter
  avatarUrl: StringNullableFilter
  password: StringFilter
  status: EnumUserStatusFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  theme: EnumThemeFilter
  address: AddressRelationFilter
  referredBy: UserNullableRelationFilter
  referredUsers: UserListRelationFilter
  checkIns: CheckInListRelationFilter
  school: SchoolNullableRelationFilter
  accounts: AccountListRelationFilter
  orders: OrderListRelationFilter
  hotelsCreated: HotelListRelationFilter
  programsCreated: ProgramListRelationFilter
}

